<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<!-- <import name="midea-about" src="../Component/MideaAbout/index"></import> -->
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>
<import name="midea-showdialog" src="../Component/MideaShowdialog/index"></import>
<template>
	<div class="container">
		<midea-head title="复式洗衣机" onclose-websocket="closeWebsocket" language="{{language}}" power="{{col}}"></midea-head>
		<!-- <div class="nav_ac" style="background-color: {{col === 'on'?Color:bgColor}};"> -->
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="scrollbottom" refreshing="{{isRefreshing}}">
			<list onscrollbottom="" onscroll="" class="main-nav" id="listdeviceNav" style="background-color: {{col === 'on'?Color:bgColor}};">
				<list-item type="deviceNav" class="main-nav-nav">
					<div class="nav_clock" style="justify-content:{{language?'flex-end':'flex-start'}}">
						<image src="{{col === 'on'?'./assets/img/loadingMeiju.png':'./assets/img/meijuicon.png'}}" @click="downMeiju()" class="child-lock-image"></image>
					</div>
					<text class="child-lock-text" style="color: {{col === 'on'?'#ffffff':'#666666'}};">使用美居</text>
					<div class="midea-D9-tab-container">
						<div class="midea-D9-tabs">
							<text class="{{firstTubeClass}}" @click="changeTube('da')">上筒</text>
							<text class="{{lastTubeClass}}" @click="changeTube('db')">下筒</text>
						</div>
					</div>
					<div class="nav_time_show" if="{{col === 'on' && running_status != 'standby' && running_status !== 'end'}}">
						<text class="nav_time_data" style="color: {{col === 'on'?'#ffffff':'#666666'}};">
							<span>{{showRemainTime()}}</span>
						</text>
					</div>
					<text class="nav_time_show_label" if="{{col === 'on' && running_status != 'standby' && running_status !== 'end'}}" style="color: {{col === 'on'?'#ffffff':'#666666'}};">
						<span>大约需要</span>
					</text>
					<text class="nav_time_show_text" if="{{col === 'on' && running_status !== 'standby' && running_status !== 'end' && running_status !== 'fault'}}">
						<span>{{showTimeLabel()}}</span>
					</text>
					<div class="nav_time_show_text_error_container" if="{{col === 'on' && running_status === 'fault'}}">
						<text class="nav_time_show_text_error">
							错误: 请检查洗衣机是否故障
						</text>
					</div>
					<text if="{{col === 'on' && running_status === 'standby'}}" class="nav_time_cancel" style="color: {{col === 'on'?'#ffffff':'#666666'}};">待机中</text>
					<text if="{{col === 'on' && running_status === 'end'}}" class="nav_time_cancel" style="color: {{col === 'on'?'#ffffff':'#666666'}};">已完成</text>
					<text if="{{col === 'on' && (running_status === 'standby' || running_status === 'end')}}" class="nav_time_canceltext" style="color: {{col === 'on'?'#ffffff':'#666666'}};">请选择下方功能</text>
					<text if="{{col != 'on'}}" class="nav_time_cancel" style="color: {{col === 'on'?'#ffffff':'#666666'}};">已关机</text>
					<text if="{{col != 'on'}}" class="nav_time_canceltext" style="color: {{col === 'on'?'#ffffff':'#666666'}};">点击下方开关</text>
				</list-item>
			</list>
		</refresh>
		<text class="nav_time_text" if="{{col === 'on' && running_status != 'standby' && running_status !== 'end'}}" style="color: {{col === 'on'?'#ffffff':'#666666'}};left: {{parseInt(remain_time)>99?'850px':'750px'}};">
			<span>分</span>
		</text>
		<div class="nav_control_btn" style="background-color: {{btnBgColor}};">
			<div class="nav_control_btn_group">
				<div class="nav_listDetails" @click="powOnOff()">
					<image class="nav_img" src="{{btnPowOnOffImgSrc}}"></image>
					<text class="nav_control_text" style="color: {{btnTextColor}};">{{col === 'off' ? '开机' : '关机'}}</text>
				</div>

				<div class="nav_listDetails" @click="isStartPaurseButtonEnable && startPauseDevice()">
					<image class="nav_img" src="{{btnStartPaurseImgSrc}}"></image>
					<text class="nav_control_text" style="color: {{btnStartPaurseTextColor}};">{{btnStartPaurseText}}</text>
				</div>
			</div>
		</div>
		<midea-showdialog if="{{showErrorDialog}}" header="{{dialogHead}}" footer="{{dialogFoot}}" onclick-event1="closeErrorDialog()" onclick-event2="closeErrorDialog()" onclick-event3="closeErrorDialog()">
			<text class="error_dialog_content">请检查设备是否故障</text>
		</midea-showdialog>
		<midea-loading if="{{isloading}}"></midea-loading>
		<midea-tips if="{{istips}}"></midea-tips>
	</div>
</template>

<style>
@import "./assets/index.css";
@import "./assets/language.css";
</style>

<script>
import api from '../Common/api/api.js';
import router from '@system.router';
import prompt from '@system.prompt';
import fetch from '@system.fetch';
import account from '@service.account';
import storage from '@system.storage'
// import IOT from '@service.iot';
import push from '@service.push';
import pkg from '@system.package';
import network from '@system.network'
import net from '../Common/api/networkAPI.js';
module.exports = {
	private: {
		isagain: true,
		lanOnline: 'false',
		isLanInit: false,
		timeTips: '',
		isoffset: '-1000px',
		isRefreshing: false,
		ws: '',
		isws: false,
		isclosews: false,
		language: true,
		col: 'off',
		istips: false,
		isabout: false,
		online: 'false',
		isOnLine: true,
		retryCount: 0,
		firstError: true,
		isstop: false,
		isfirst: false,
		isopen_: "water_level",
		isloading: false,
		accessToken: '',
		openId: '',
		code: '',
		showDialog: false,
		is_up: true,
		isopen: true,
		bgColor: '#CCCCCC',
		Color: "#3191FD",
		id: 0,
		iswarm: true,
		timeoutInter: '',
		water_1: '',
		water_2: '',
		water_3: '',
		water_4: '',
		water_5: '',
		obj1: [],
		obj2: [],
		power: "off",
		program: "cotton",
		control_status: "pause",
		running_status: "pause",
		remain_time: 15,
		dataLists: {
			power: "off",
			program: "cotton",
			control_status: "pause",
			running_status: "pause",
			remain_time: 15
		},
		DBdata: ["db_power", "db_running_status", "db_program", "db_remain_time", "db_error_code"],
		DAdata: ["da_power", "da_running_status", "da_program", "da_remain_time", "da_error_code"],
		list_1: [],
		list_2: [],
		listDevice: {},
		time: [],
		firstTubeClass: 'midea-D9-tube',
		lastTubeClass: 'midea-D9-tube_active_off',
		currentTube: 'db',
		dialogHead: {
			title: '错误',
			fontSize: 48,
			color: "#000000",
			fontWeight: 'bold'
		},
		dialogFoot: [{
			name: '取消',
			fontSize: 48,
			color: "#333333",
			fontWeight: 'nomal'
		}, {
			name: '确定',
			fontSize: 48,
			color: "#3191FD",
			fontWeight: 'nomal'
		}],
		btnPowOnOffImgSrc: './assets/img/off.png',
		isStartPaurseButtonEnable: false,
		btnStartPaurseImgSrc: './assets/img/start_disable2.png',
		btnStartPaurseText: '启动',
		btnBgColor: '#ffffff',
		btnTextColor: '#666666',
		btnStartPaurseTextColor: '#33666666',
		showErrorDialog: false,
		isErrorReminded: false
	},
	public: {
		deviceSeries: '',
		deviceId: '',
		openid: ''
	},
	// firstClick() {
	// 	this.firstTubeClass = 'tube_active';
	// 	this.lastTubeClass = 'tube';
	// },
	// lastClick() {
	// 	this.firstTubeClass = 'tube';
	// 	this.lastTubeClass = 'tube_active';
	// },
	closeErrorDialog() {
		this.showErrorDialog = false;
	},
	isshowclose() {
		let that = this;
		if (that.timeTips != '') {
			that.istips = false;
			clearTimeout(that.timeTips)
		}
		if (that.iswarm) {
			that.istips = true;
			that.timeTips = setTimeout(() => {
				that.istips = false;
			}, 3000)
		}
		return false;
	},
	showTimeLabel() {
		if (this.running_status === 'start') {
			return '运行中';
		} else if (this.running_status === 'pause') {
			return '暂停中';
		} else if (this.running_status === 'fault') {
			return '错误: 请检查洗衣机是否故障';
		} else if (this.running_status === 'delay') {
			return '预约中';
		} else if (this.running_status === 'end') {
			return '洗衣完成';
		} else {
			return '';
		}
	},
	showRemainTime() {
		if (this.running_status !== 'start' && this.running_status !== 'pause') {
			return '--';
		}

		if (this.remain_time && this.remain_time !== 65535) {
			return this.remain_time;
		}

		return '--';
	},
	downMeiju() {
		let that = this;
		let str1 = "确定打开美居？（仅支持美居5.2及以上版本）";
		let str2 = "您还没安装美居app，是否确定下载安装?";
		pkg.hasInstalled({
			package: 'com.midea.ai.appliances',
			success: function (res) {
				prompt.showDialog({
					title: '提示',
					message: res.result ? str1 : str2,
					buttons: [
						{
							text: res.result ? '直接打开' : '去下载',
							color: '#33dd44'
						}
					],
					success: function (data) {
						if (res.result) {
							router.push({ uri: 'meiju://com.midea.meiju/main' });
						} else {
							pkg.install({
								package: 'com.midea.ai.appliances',
								success: function (resp) {
									console.log(`handling success: ${resp.result}`);
								},
								fail: function (resp, code) {
									console.log(`handling fail, code = ${code}`);
								}
							});
						}
					},
					cancel: function () {
						console.log('handling cancel');
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`);
					}
				});

				console.log(`handling success: ${res.result}`);
			},
			fail: function (res, code) {
				console.log(`handling fail, code = ${code}`);
			}
		});
	},
	// 上下筒切换
	changeTube(tube) {
		if (!tube) {
			return;
		}

		if (this.col === "off") {
			return;
		}

		if (tube === this.currentTube) {
			return;
		}

		let params;
		if ('da' === tube) {
			params = {
				bucket: 'da',
				da_position: 1
			}
		} else {
			params = {
				bucket: 'db',
				db_position: 1
			}
		}
		this.postDeviceControl(params, {});
	},
	powOnOff() {
		let that = this;
		if (that.online === 'false') {
			that.isshowclose();
			return false;
		}
		let params;
		let status = that.dataLists;
		if (that.col === "on") {
			if ('da' === that.currentTube) {
				params = {
					bucket: 'da',
					da_power: "off"
				}
				delete status.da_running_status;
				delete status.da_power;
			} else {
				params = {
					bucket: 'db',
					db_power: "off"
				}
				delete status.db_running_status;
				delete status.db_power;
			}
		} else {
			if ('da' === that.currentTube) {
				params = {
					bucket: 'da',
					da_power: "on"
				}
				delete status.da_control_status
				delete status.da_running_status;
				delete status.da_power;
			} else {
				params = {
					bucket: 'db',
					db_power: "on"
				}
				delete status.db_control_status
				delete status.db_running_status;
				delete status.db_power;
			}
		}
		that.isloading = true;
		that.postDeviceControl(params, status);
	},
	startPauseDevice() {
		var params;
		let that = this;
		let status = this.dataLists;
		if (this.running_status === 'start') {
			if ('da' === that.currentTube) {
				params = {
					bucket: 'da',
					da_control_status: 'pause'
				}
				status.da_running_status = 'pause';
				delete status.da_control_status;
			} else {
				params = {
					bucket: 'db',
					db_control_status: 'pause'
				}
				status.db_running_status = 'pause';
				delete status.db_control_status;
			}
		} else {
			if ('da' === that.currentTube) {
				params = {
					bucket: 'da',
					da_control_status: 'start'
				}
				status.da_running_status = 'start';
				delete status.da_control_status;
			} else {
				params = {
					bucket: 'db',
					db_control_status: 'start'
				}
				status.db_running_status = 'start';
				delete status.db_control_status;
			}
		}
		this.postDeviceControl(params, status);
	},
	// pauseDevice() {
	// 	let that = this;
	// 	let params;
	// 	let status = this.dataLists;
	// 	if ('da' === that.currentTube) {
	// 		params = {
	// 			bucket: 'da',
	// 			da_control_status: 'pause'
	// 		}
	// 		status.da_running_status = 'pause';
	// 		delete status.da_control_status;
	// 	} else {
	// 		params = {
	// 			bucket: 'db',
	// 			db_control_status: 'pause'
	// 		}
	// 		status.db_running_status = 'pause';
	// 		delete status.db_control_status;
	// 	}
	// 	this.postDeviceControl(params, status);
	// },
	// startDevice() {
	// 	let that = this;
	// 	let params;
	// 	let status = this.dataLists;
	// 	if ('da' === that.currentTube) {
	// 		params = {
	// 			bucket: 'da',
	// 			da_control_status: 'start'
	// 		}
	// 		status.da_running_status = 'start';
	// 		delete status.da_control_status;
	// 	} else {
	// 		params = {
	// 			bucket: 'db',
	// 			db_control_status: 'start'
	// 		}
	// 		status.db_running_status = 'start';
	// 		delete status.db_control_status;
	// 	}
	// 	this.postDeviceControl(params, status);
	// },
	// stopDevice() {
	// 	this.isstop = true;
	// 	let that = this;
	// 	that.isloading = true;
	// 	let params;
	// 	let status = that.dataLists;

	// 	if ('da' === that.currentTube) {
	// 		params = {
	// 			bucket: 'da',
	// 			da_power: "off"
	// 		}
	// 		status.da_power = 'off';
	// 		delete status.da_running_status;
	// 	} else {
	// 		params = {
	// 			bucket: 'db',
	// 			db_power: "off"
	// 		}
	// 		status.db_power = 'off';
	// 		delete status.db_running_status;
	// 	}
	// 	that.postDeviceControl(params, status);
	// },
	scrollbottom(e) {
		let that = this;
		that.isRefreshing = e.refreshing;
		if (that.isfirst) {
			that.regetdata();
		}
	},
	regetdata() {
		let that = this;
		let timestamp = Date.parse(new Date());
		storage.get({
			key: 'openidToken',
			success: function (data) {
				that.isloading = true;
				that.iswarm = true;
				if (data === '') {
					that.authorize();
				} else {
					let obj = JSON.parse(data);
					if (parseInt(timestamp) > parseInt(obj.time)) {
						that.authorize();
					} else {
						if (obj.openid === that.openid) {
							that.openId = obj.openid;
							that.accessToken = obj.accessToken;
							if (!that.isLanInit) {
								that.LanOnlineGet();
							}
							that.getDeviceStatus(that.openId);
						} else {
							that.authorize();
						}
					}
				}
				console.log('handling success')
			},
			fail: function (data, code) {
				console.log(`handling fail, code = ${code}`)
			}
		})
	},
	getStatus() {
		let that = this;
		that.iswarm = false;
		let timestamp = Date.parse(new Date());
		storage.get({
			key: 'openidToken',
			success: function (data) {
				if (data === '') {
					that.authorize();
				} else {
					let obj = JSON.parse(data);
					if (parseInt(timestamp) > parseInt(obj.time)) {
						that.authorize();
					} else {
						if (obj.openid === that.openid) {
							that.openId = obj.openid;
							that.accessToken = obj.accessToken;
							if (!that.isLanInit) {
								that.LanOnlineGet();
							}
							that.getDeviceStatus(that.openId);
						} else {
							that.authorize();
						}
					}
				}
				console.log('handling success')
			},
			fail: function (data, code) {
				console.log(`handling fail, code = ${code}`)
			}
		})
	},
	timeGetData() {
		let that = this;
		that.getStatus();
		that.timeoutInter = setInterval(function () {
			that.iswarm = false;
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function (data) {
					if (data === '') {
						that.authorize();
					} else {
						let obj = JSON.parse(data);
						if (parseInt(timestamp) > parseInt(obj.time)) {
							that.authorize();
						} else {
							if (obj.openid === that.openid) {
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								if (!that.isLanInit) {
									that.LanOnlineGet();
								}
								that.getDeviceStatus(that.openId);
							} else {
								that.authorize();
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		}, 3000)
	},
	// openData1() {
	// 	let that = this;
	// 	if (that.online === 'false') {
	// 		that.isshowclose();
	// 		return false;
	// 	}
	// 	let params;
	// 	let status = that.dataLists;
	// 	console.log("为什么跑到这里");
	// 	if (that.col === "on") {
	// 		if ('da' === that.currentTube) {
	// 			params = {
	// 				bucket: 'da',
	// 				da_power: "off"
	// 			}
	// 			delete status.da_running_status;
	// 			delete status.da_power;
	// 		} else {
	// 			params = {
	// 				bucket: 'db',
	// 				db_power: "off"
	// 			}
	// 			delete status.db_running_status;
	// 			delete status.db_power;
	// 		}
	// 	} else {
	// 		if ('da' === that.currentTube) {
	// 			params = {
	// 				bucket: 'da',
	// 				da_power: "on"
	// 			}
	// 			delete status.da_control_status
	// 			delete status.da_running_status;
	// 			delete status.da_power;
	// 		} else {
	// 			params = {
	// 				bucket: 'db',
	// 				db_power: "on"
	// 			}
	// 			delete status.db_control_status
	// 			delete status.db_running_status;
	// 			delete status.db_power;
	// 		}
	// 	}
	// 	that.isloading = true;
	// 	that.postDeviceControl(params, status);
	// },
	//获取第三方登录信息
	authorize() {
		let that = this;
		// that.isloading = true;
		account.authorize({
			type: 'code',
			success: function (data) {
				let params = {
					thirdUId: data.code,
				}
				api.getUserToken(params).then((res) => {
					let data_accesstoken = res;
					if (data_accesstoken.code && data_accesstoken.code === 200) {
						let result_data = (typeof data_accesstoken.data) === "object" ? data_accesstoken.data : JSON.parse(data_accesstoken.data);
						if (!parseInt(result_data.code)) {
							that.openId = result_data.openId;
							that.openid = result_data.openId;
							that.accessToken = result_data.accessToken;
							// that.isloading = true;
							let obj = {
								openid: that.openId,
								accessToken: that.accessToken,
								time: that.gettime()
							}
							storage.set({
								key: 'openidToken',
								value: JSON.stringify(obj),
								success: function (data) {

								},
								fail: function (data, code) {

								}
							})
							that.LanOnlineGet();
							that.getDeviceStatus(that.openId);
						} else {
							that.initData();
							that.isRefreshing = false;
							that.isloading = false;
							that.netWorkGet(that.getCode(result_data.code, "获取访问令牌失败"))
							// that.netWorkGet('获取访问令牌失败')
							that.isfirst = true;
						}
					} else {
						that.initData();
						that.isRefreshing = false;
						that.isloading = false;
						that.netWorkGet('获取访问令牌失败')
						that.isfirst = true;
					}
				}).catch((error) => {
					that.initData();
					that.isRefreshing = false;
					that.isloading = false;
					that.netWorkGet('获取访问令牌失败')
					that.isfirst = true;
				})

			},
			fail: function (data, code) {
				that.initData();
				console.log("授权接口：data" + data + ":::code" + code)
				that.netWorkGet('授权失败,请稍后重试');
				that.isRefreshing = false;
				that.isloading = false;
				that.isfirst = true;
				// 					prompt.showToast({
				// 						message: 'authorize:' + code
				// 					})
			}
		})
	},
	/**
	 * 局域网获取
	 */
	getLanData(res) {
		// console.log("getLanData res: " + JSON.stringify(res));
		let that = this;
		// prompt.showToast({
		// 	message: '局域网'
		// })
		console.log("getLanData: res: " + res);
		let obj = (typeof res) === 'object' ? res : JSON.parse(res);
		if (parseInt(obj.code) === 0) {
			let data = (typeof obj.message) === 'object' ? obj.message : JSON.parse(obj.message);
			that.handleData(data);
		} else {
			that.isagain = false;
			that.lanOnline = "false";
			that.getDeviceStatus(that.openId);
		}
	},
	// 判断设备是否开机了
	isPowerOn(res) {
		if (res.code !== 200) {
			return null;
		}

		let data = (typeof res.data) === "object" ? res.data : JSON.parse(res.data);
		if (!parseInt(data.code) && !parseInt(data.devices[0].status)) {
			let obj = data.devices[0].properties;
			if ('da' === obj.bucket && 'on' === obj.da_power) {
				return true;
			} else if ('db' === obj.bucket && 'on' === obj.db_power) {
				return true;
			}
			return false;
		} else {
			return null;
		}
	},
	/**
	 * 联网获取
	 */
	getdataLan(res) {
		let that = this;
		// if (that.timeoutInter != '') {
		// 	clearInterval(that.timeoutInter);
		// }
		if (res.code === 200) {
			let data = (typeof res.data) === "object" ? res.data : JSON.parse(res.data);
			if (!parseInt(data.code) && !parseInt(data.devices[0].status)) {
				let obj = data.devices[0].properties;
				// 只更新当前筒的状态到页面
				that.retryCount = 0;
				that.firstError = false;
				that.handleData(obj);
			} else {
				that.initData();
				that.isstop = true;
				that.isloading = false;
				that.isRefreshing = false;
				if (data.msg === '') {
					let str1 = '';
					if (data.devices[0].status) {
						str1 = data.devices[0].status;
						let online = !data.devices[0].properties ? 'false' : data.devices[0].properties.online;
						if (str1.toString() === '-6') {
							that.isshowclose();
							return false;
						}
						if (str1.toString() === '-100' && online === 'false' && that.isOnLine) {
							if (that.firstError || that.retryCount >= 3) {
								// 离线，弹出提示框，退出插件页
								that.isOnLine = false;
								if (that.timeoutInter != '') {
									clearInterval(that.timeoutInter);
								}
								prompt.showDialog({
									title: '提示',
									message: '获取设备状态失败，请确认设备是否在线',
									buttons: [{
										text: '确定',
										color: '#33dd44'
									}],
									complete: function () {
										router.back();
									}
								});
							}
							return;
						}
						if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
							that.isshowclose();
						} else {
							that.netWorkGet(api.getStatus("get", str1, '获取设备状态失败'))
						}
						// that.netWorkGet(api.getStatus(str1,'获取设备状态失败'))
					} else {
						str1 = data.code;
						that.netWorkGet(api.getCode(str1, '获取设备状态失败'))
					}
					// that.netWorkGet('获取设备状态失败')
				} else {
					that.netWorkGet(data.msg)
				}
				// that.netWorkGet(data.msg)
			}
		} else {
			that.initData();
			that.isloading = false;
			that.isRefreshing = false;
			that.isstop = true;
			that.netWorkGet('获取设备状态失败,请稍后重试')
		}
	},
	// 处理设备状态数据
	handleData(obj) {
		let that = this;
		var position = 0;
		if ('da' === obj.bucket) {
			// 上筒
			if (1 === obj.da_position || '1' === obj.da_position) {
				if (obj.da_running_status) {
					that.running_status = obj.da_running_status;
				} else {
					if (obj.da_power === 'on') {
						that.running_status = 'standby';
					} else {
						that.running_status = 'fault';
					}
				}
				that.col = obj.da_power;
				if (obj.online) {
					that.online = obj.online;
				}
				that.remain_time = obj.da_remain_time;
				that.program = obj.da_program;
				that.firstTubeClass = 'on' === that.col ? 'midea-D9-tube_active' : 'midea-D9-tube_active_off';
				that.lastTubeClass = 'midea-D9-tube';
				that.currentTube = 'da';
				position = 1;
				if (obj.da_error_code && obj.da_error_code !== '0' && obj.da_error_code !== 'ff' && obj.da_error_code !== 'FF') {
					that.running_status = 'fault';
				}
			}
		} else {
			// 下筒
			if (1 === obj.db_position || '1' === obj.db_position) {
				if (obj.db_running_status) {
					that.running_status = obj.db_running_status;
				} else {
					if (obj.db_power === 'on') {
						that.running_status = 'standby';
					} else {
						that.running_status = 'fault';
					}
				}
				that.col = obj.db_power;
				if (obj.online) {
					that.online = obj.online;
				}
				that.remain_time = obj.db_remain_time;
				that.program = obj.db_program;
				that.firstTubeClass = 'midea-D9-tube';
				that.lastTubeClass = 'on' === that.col ? 'midea-D9-tube_active' : 'midea-D9-tube_active_off';
				that.currentTube = 'db';
				position = 1;
				if (obj.db_error_code && obj.db_error_code !== '0' && obj.db_error_code !== 'ff' && obj.db_error_code !== 'FF') {
					that.running_status = 'fault';
				}
			}
		}

		if (1 === position) {
			that.isloading = false;
			that.isRefreshing = false;
			that.dataLists = obj;
			that.listDevice = obj;

			// 刷新页面背景颜色、按钮icon等
			if (that.col === 'off') {
				// 关机状态，底部白色
				that.btnBgColor = '#ffffff';
				that.btnPowOnOffImgSrc = './assets/img/off.png';
				that.btnTextColor = '#666666';
				that.btnStartPaurseTextColor = '#33666666';
				that.isStartPaurseButtonEnable = false;
				that.btnStartPaurseImgSrc = './assets/img/start_disable2.png';
				that.btnStartPaurseText = '启动';
				that.isErrorReminded = false;
			} else {
				// 开机状态，判断设备运行状态
				if (that.running_status === 'start') {
					// 运行中，底部蓝色
					that.btnBgColor = that.Color;
					that.btnPowOnOffImgSrc = './assets/img/off2.png';
					that.btnTextColor = '#ffffff';
					that.btnStartPaurseTextColor = '#ffffff';
					that.isStartPaurseButtonEnable = true;
					that.btnStartPaurseImgSrc = './assets/img/pause.png';
					that.btnStartPaurseText = '暂停';
				} else if (that.running_status === 'pause') {
					// 暂停，底部蓝色
					that.btnBgColor = that.Color;
					that.btnPowOnOffImgSrc = './assets/img/off2.png';
					that.btnTextColor = '#ffffff';
					that.btnStartPaurseTextColor = '#ffffff';
					that.isStartPaurseButtonEnable = true;
					that.btnStartPaurseImgSrc = './assets/img/start.png';
					that.btnStartPaurseText = '继续';
				} else if (that.running_status === 'standby') {
					// 待机，底部白色
					that.btnBgColor = '#ffffff';
					that.btnPowOnOffImgSrc = './assets/img/off.png';
					that.btnTextColor = '#666666';
					that.btnStartPaurseTextColor = '#666666';
					that.isStartPaurseButtonEnable = true;
					that.btnStartPaurseImgSrc = './assets/img/start2.png';
					that.btnStartPaurseText = '启动';
				} else if (that.running_status === 'delay') {
					// 预约，底部蓝色
					that.btnBgColor = that.Color;
					that.btnPowOnOffImgSrc = './assets/img/off2.png';
					that.btnTextColor = '#ffffff';
					that.btnStartPaurseTextColor = '#33ffffff';
					that.isStartPaurseButtonEnable = false;
					that.btnStartPaurseImgSrc = './assets/img/start_disable.png';
					that.btnStartPaurseText = '启动';
				} else {
					// 故障、完成状态，底部白色
					that.btnBgColor = '#ffffff';
					that.btnPowOnOffImgSrc = './assets/img/off.png';
					that.btnTextColor = '#666666';
					that.btnStartPaurseTextColor = '#33666666';
					that.isStartPaurseButtonEnable = false;
					that.btnStartPaurseImgSrc = './assets/img/start_disable2.png';
					that.btnStartPaurseText = '启动';
				}
			}

			if (that.col === 'on' && that.running_status === 'fault') {
				if (!that.isErrorReminded) {
					that.isErrorReminded = true;
					that.showErrorDialog = true;
				}
			}

			if (that.online != 'true') {
				that.isshowclose()
			}
			if (that.running_status === 'start' || that.running_status === 'pause') {
				that.isstop = false;
				// if (that.running_status === 'start') {
				// 	that.timeGetData();
				// }
			} else if (that.running_status === 'fault') {
				// prompt.showToast({
				// 	message: '设备运行出错，请检查洗衣机是否故障'
				// })
			}
		}
	},
	getTubeInfo(opid, deviceType) {
		let that = this;
		let params = {
			openId: opid,
			devices: [{
				deviceId: that.deviceId,
				properties: deviceType === 'da' ? that.DAdata : that.DBdata,
				orders: { query_type: deviceType }
			}]
		}
		that.istips = false;
		if (net.$Lanonline.deviceid === that.deviceId && net.$Lanonline.isonLan === 'true' && that.isagain) {
			that.lanOnline = 'true';
			console.log('getTubeInfo: ' + deviceType + ' 局域网');
		} else {
			that.lanOnline = 'false';
			console.log('getTubeInfo: ' + deviceType + ' 广域网');
		}
		// api.postDeviceStatusQuery(params, that.accessToken, that.lanOnline, that.deviceId).then((res) => {
		api.postDeviceStatusQuery(params, that.accessToken, 'false', that.deviceId).then((res) => {
			that.isfirst = true;
			// that.isloading = false;
			// that.isRefreshing = false;
			if (res.lanonline) {
				that.getdataLan(res);
			} else {
				that.getLanData(res);
			}
			if (deviceType === 'db') {
				that.getTubeInfo(opid, 'da');
			}
		}).catch((error) => {
			if (error.online) {
				that.initData();
				that.isstop = true;
				that.netWorkGet('获取设备状态失败,请稍后重试')
				that.isfirst = true;
				that.isRefreshing = false;
				that.isloading = false;
			} else {
				that.isagain = false;
				that.lanOnline = "false";
				// that.getDeviceStatus(that.openId);
			}
		})
	},
	//查询状态
	getDeviceStatus(opid) {
		this.retryCount++;
		this.getTubeInfo(opid, 'db');
	},
	/**
	 * 局域网控制
	 */
	lanControl(res, obj1, status) {
		let that = this;
		let obj = (typeof res) === 'object' ? res : JSON.parse(res);
		console.log("局域网：" + JSON.stringify(res))
		if (parseInt(obj.code) === 0) {
			// setTimeout(function () {
			// 	that.getDeviceStatus(that.openId);
			// }, 1000)
		} else {
			console.log('getLanData: set isagain = false 3');
			that.isagain = false;
			that.lanOnline = 'false';
			that.postDeviceControl(obj1, status);
		}
	},
	/**
	 * 广域网控制
	 */
	wlanControl(res) {
		let that = this;
		if (res.code === 200) {
			let data = (typeof res.data) === "object" ? res.data : JSON.parse(res.data);
			if (parseInt(data.code) === 0) {
				if (!parseInt(data.devices[0].status)) {
					// setTimeout(function () {
					// 	that.getDeviceStatus(that.openId);
					// }, 1000)
				} else {
					that.initData();
					that.isRefreshing = false;
					that.isloading = false;
					that.isstop = true;
					if (data.msg === '') {
						let str1 = '';
						if (data.devices[0].status) {
							str1 = data.devices[0].status;
							if (str1.toString() === '-6') {
								that.isshowclose();
								return false;
							}
							if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
								// that.netWorkGet('设备离线')
								that.isshowclose();
							} else {
								that.netWorkGet(api.getStatus("post", str1, '操作设备失败'))
							}
						} else {
							str1 = data.code;
							that.netWorkGet(api.getCode(str1, '操作设备失败'))
						}
					} else {
						that.netWorkGet(data.msg)
					}
				}
			} else {
				that.initData();
				that.isRefreshing = false;
				that.isloading = false;
				that.isstop = true;
				if (data.msg === '') {
					let str1 = '';
					str1 = data.code;
					that.netWorkGet(api.getCode(str1, '操作设备失败'))
				} else {
					that.netWorkGet(data.msg)
				}
			}
		} else {
			that.initData();
			that.isRefreshing = false;
			that.isloading = false;
			that.netWorkGet('操作设备失败,请稍后重试')
		}
	},
	postDeviceControl(obj, status) {
		let that = this;
		let params = {
			openId: that.openId,
			devices: [{
				deviceId: that.deviceId,
				properties: obj,
				status: status
			}]
		}
		clearInterval(that.timeoutInter);
		that.isloading = true;

		console.log("$Lanonline:" + JSON.stringify(net.$Lanonline) + "::::::::isagain:" + that.isagain)
		if (net.$Lanonline.deviceid === that.deviceId && net.$Lanonline.isonLan === 'true' && that.isagain) {
			that.lanOnline = 'true';
		} else {
			that.lanOnline = 'false';
		}
		// api.postDeviceControl(params, that.accessToken, that.lanOnline, that.deviceId).then((res) => {
		api.postDeviceControl(params, that.accessToken, 'false', that.deviceId).then((res) => {
			that.isagain = true;
			// that.timeGetData();
			setTimeout(function () {
				that.timeGetData();
			}, 1000)
			if (res.lanonline) {
				that.wlanControl(res);
			} else {
				that.lanControl(res, obj, status)
			}
		}).catch((error) => {
			// if (error.online) {
				that.initData();
				that.isstop = true;
				that.netWorkGet('操作设备失败,请稍后重试')
				that.isloading = false;
				that.isRefreshing = false;
				// that.timeGetData();
				setTimeout(function () {
					that.timeGetData();
				}, 1000)
			// } else {
			// 	that.isagain = false;
			// 	that.lanOnline = 'false';
			// 	that.postDeviceControl(obj, status);
			// }
		})
	},
	initData() {
		this.isfirst = true;
	},
	netWorkGet(str) {
		if (this.iswarm) {
			network.getType({
				success: function (data) {
					if (data.type === 'none') {
						prompt.showToast({
							message: str + "请检查网络",
							duration: 1
						})
					} else {
						prompt.showToast({
							message: str,
							duration: 1
						})
					}
				}
			})
		}
	},
	gettime() {
		let timestamp = Date.parse(new Date());
		return parseInt(timestamp) + 3600000;
	},
	onMenuPress() {
		this.isabout = !this.isabout;
	},
	/**
	 * 局域网初始化
	 */
	LanOnlineGet() {
		console.log("LanOnlineGet 局域网初始化")
		let that = this;
		net.deviceInit(that.accessToken, that.deviceId).then((res) => {
			that.isLanInit = true;
		}).catch((error) => {
			that.isLanInit = false;
		});
	},
	closeWebsocket(e) {
		let that = this;
		that.isclosews = true;
		// if (that.timeoutInter != '') {
		// 	clearInterval(that.timeoutInter);
		// }
		if (that.ws != '') {
			that.ws.close({
				code: 1000,
				reason: '退出关闭',
				success: function () {
					that.ws = '';
					console.log("关闭websocket成功")
				},
				fail: function (data, code) {
					console.log("关闭websocke失败, code = " + JSON.stringify(code))
				}
			})
		}
	},
	onHide() {
		let that = this;
		that.istips = false;
		that.closeWebsocket();
		if (that.timeoutInter != '') {
			clearInterval(that.timeoutInter);
		}
	},
	onShow() {
		console.log('deviceSeries: ' + this.deviceSeries);
		console.log('deviceId: ' + this.deviceId);
		console.log('openid: ' + this.openid);
		let that = this;
		that.isclosews = false;
		if (that.timeoutInter != '') {
			clearInterval(that.timeoutInter);
		}
		if (that.isOnLine) {
			that.timeGetData();
		}
	},
	onInit() {
		api.getlanguage().then((res) => {
			if (res === 'ug') {
				this.language = false;
			} else {
				this.language = true;
			}
		})
		let that = this;
		router.clear();
		// prompt.showToast({message:"deviceid" + this.deviceId + ":::::::openid" + this.openid})
		this.$page.setTitleBar({
			text: '复式洗衣机'
		})
		that.$on('cancel', function (e) {
			that.isabout = false;
			// prompt.showToast({message:"shdf" + e})
		})
		that.$on('closetips', function (e) {
			that.istips = false;
			that.regetdata();
			// prompt.showToast({message:"shdf" + e})
		})
		that.$on('openmenu', function (e) {
			that.isabout = !that.isabout;
		})
		for (let i = 0; i < 25; i++) {
			let obj = {}
			obj = {
				"name": i + "小时",
				"value": "",
				"icon": "",
				"color": ''
			}
			this.time.push(obj);
		}
		this.isloading = true;
		let timestamp = Date.parse(new Date());
		storage.get({
			key: 'openidToken',
			success: function (data) {
				if (data === '') {
					that.authorize();
				} else {
					let obj = JSON.parse(data);
					if (parseInt(timestamp) > parseInt(obj.time)) {
						that.authorize();
					} else {
						if (obj.openid === that.openid) {
							that.openId = obj.openid;
							that.accessToken = obj.accessToken;
							that.LanOnlineGet();
							that.getDeviceStatus(that.openId);
						} else {
							that.authorize();
						}
					}
				}
				console.log('handling success')
			},
			fail: function (data, code) {
				console.log(`handling fail, code = ${code}`)
			}
		})
	},
	onCreate() {
		this.firstError = true;
		this.isErrorReminded = false;
	},
	onBackPress() {
		router.back();
		// router.clear();
		// this.$app.exit();
	}
}
</script>
<style lang='less'>
@import "./assets/index.less";
</style>
