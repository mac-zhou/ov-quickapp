<!-- 组件引入 -->
<import name="midea-head" src="../Component/MideaHead/index"></import>
<!-- <import name="midea-about" src="../Component/MideaAbout/index"></import> -->
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-showdialog" src="../Component/MideaShowdialog/index"></import>

<template>
	<div class="container" id="container_body">
		<text if="{{work_status == 2}}" class="EA_nav_list_data_fen" style="color: {{online === 'true'?'#ffffff':'#666666'}};padding-left:{{padingLeft(left_time_hour,left_time_min)}}px;">分</text>
		<midea-head title="破壁机" onclose-websocket="closeWebsocket" language="{{language}}" isnew="{{bgColor}}" coloron="{{online === 'true'? work_status == 0 || work_status == 3 ? '#F9CB3D' : '#F98242':'#cccccc'}}" power="{{online === 'true'?'on':'false'}}"></midea-head>
		<refresh class="EA_refresh" offset="{{isoffset}}" onrefresh="scrollbottom" refreshing="{{isRefreshing}}">
			<list onscroll="" style="background-color: {{online === 'true'? work_status == 0 || work_status == 3 ? '#F9CB3D' : '#F98242':'#cccccc'}}" class="EA_nav" id="list">
				<list-item type="listItem" class="EA_nav_list">
					<div class="{{language?'EA_nav_list_lock':'EA_nav_list_lock_l'}}" @click="isMeiju()">
						<image src="{{online === 'true'?'./assets/img/loadingMeiju.png':'./assets/img/meijuicon.png'}}" class="EA_nav_list_lock_img"></image>
					</div>
					<text class="EA_nav_list_usemeiju" style="color: {{online === 'true'?'#ffffff':'#666666'}};">使用美居</text>
					<div class="EA_nav_list_data" if="{{work_status != 'cancel' && work_status != 'keep_warm'}}">
						<text class="EA_nav_list_data_data_change" if="{{work_status == '2'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">{{getRestTime(current_time)}}</text>
						<text class="EA_nav_list_data_data_change1" if="{{work_status != '2'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">{{getStatusText(work_status)}}</text>
					</div>
					<text class="EA_nav_list_text" if="{{work_status == '2'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">大约需要</text>
					<text class="EA_nav_list_status" if="{{work_status != 'cancel' && work_status != 'keep_warm'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">{{work_status_fun()}}</text>
					<text class="EA_nav_list_cancel" if="{{work_status === 'cancel'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">待机中</text>
					<text class="EA_nav_list_canceltext" if="{{work_status === 'cancel'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">请选择下方功能</text>
					<text class="EA_nav_list_keepwarm" if="{{work_status === 'keep_warm'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">{{keepTime(warm_time_hour,warm_time_min)}}</text>
					<text class="EA_nav_list_keeptext" if="{{work_status === 'keep_warm'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">已持续保温</text>
					<text class="EA_nav_list_keepstatus" if="{{work_status === 'keep_warm'}}" style="color: {{online === 'true'?'#ffffff':'#666666'}};">保温中</text>
				</list-item>
			</list>
		</refresh>
		<div class="EA_ctr" if="{{online === 'false' || (work_status == 0 || work_status == 3)}}">
			<div class="EA_ctr_list">
				<div class="EA_ctr_list_constrl" @click="doingDevice(25)">
					<image src="./assets/img/3.png" class="EA_ctr_list_constrl_img"></image>
					<text class="EA_ctr_list_constrl_text">婴儿糊</text>
				</div>
				<div class="EA_ctr_list_constrl" @click="doingDevice(33)">
					<image src="./assets/img/2.png" class="EA_ctr_list_constrl_img"></image>
					<text class="EA_ctr_list_constrl_text">婴儿粥</text>
				</div>
				<div class="EA_ctr_list_constrl" @click="doingDevice(36)">
					<image src="./assets/img/1.png" class="EA_ctr_list_constrl_img"></image>
					<text class="EA_ctr_list_constrl_text">辅食泥</text>
				</div>
			</div>
		</div>
		<div class="EA_contrl" if="{{online === 'true' && (work_status != 0)}}">
			<div class="EA_contrl_btn" @click="stopDevice()">
				<image src="./assets/img/stop.png" class="EA_contrl_btn_img"></image>
				<text class="EA_contrl_btn_text">停止</text>
			</div>
		</div>
		<div class="EA_alert" if="{{showAlert}}" @click="closealert()">
			<div class="EA_alert_nav">
				<div class="EA_alert_nav_title">
					<text if="{{language}}" class="EA_alert_nav_title_text">立即启动</text>
					<div class="{{language?'EA_alert_nav_title_switch':'EA_alert_nav_title_switch_l'}}">
						<div class="EA_alert_nav_title_switch_btn" style="background-color: {{isswitch?'#F9CB3D':'#CCCCCC'}};" @click="switchChang()">
							<div if="{{language}}" class="EA_alert_nav_title_switch_btn_select {{isswitch?'animationSelectOpne':'animationSelectClose'}}"></div>
							<div if="{{!language}}" class="EA_alert_nav_title_switch_l_select {{isswitch?'animationSelectOpne_l':'animationSelectClose_l'}}"></div>
						</div>
					</div>
					<text if="{{!language}}" class="EA_alert_nav_title_text_l">立即启动</text>
				</div>
				<div class="EA_alert_nav_title">
					<text if="{{language}}" class="EA_alert_nav_title_text">预约完成时间</text>
					<div class="EA_alert_nav_title_data" if="{{language}}">
						<text if="{{!isswitch}}" class="EA_alert_nav_title_data_select">{{selHour < 10?'0'+selHour:selHour}}:{{selMin < 10?'0'+selMin:selMin}}</text>
						<image src="./assets/img/arow_down.png" class="EA_alert_nav_title_data_img"></image>
					</div>
					<div class="EA_alert_nav_title_data_l" if="{{!language}}">
						<image src="./assets/img/arow_down.png" class="EA_alert_nav_title_data_img"></image>
						<text if="{{!isswitch}}" class="EA_alert_nav_title_data_select">{{selHour < 10?'0'+selHour:selHour}}:{{selMin < 10?'0'+selMin:selMin}}</text>
					</div>
					<text if="{{!language}}" class="EA_alert_nav_title_text_l">预约完成时间</text>
				</div>
				<div class="EA_alert_nav_list" if="{{language}}">
					<list class="EA_alert_nav_list_hour" id="list" show="{{!isswitch}}">
						<list-item type="listItem" class="EA_alert_nav_list_hour_item" @click="selectTime('hour',$idx)" for="{{listHour}}">
							<text class="EA_alert_nav_list_hour_item_text" style="color: {{selHour === $idx?'#F9CB3D':'#cccccc'}};">{{$item.data}}</text>
							<div class="img_select">
								<image src="./assets/img/select.png" class="EA_alert_nav_list_hour_item_img" show="{{selHour === $idx}}"></image>
							</div>
						</list-item>
					</list>
					<list class="EA_alert_nav_list_hour" id="list" show="{{!isswitch}}">
						<list-item type="listItem" class="EA_alert_nav_list_hour_item" @click="selectTime('min',$idx)" for="{{listMin}}">
							<text class="EA_alert_nav_list_hour_item_text" style="color: {{selMin === $idx?'#F9CB3D':'#cccccc'}};">{{$item.data}}</text>
							<div class="img_select">
								<image src="./assets/img/select.png" class="EA_alert_nav_list_hour_item_img" show="{{selMin === $idx}}"></image>
							</div>
						</list-item>
					</list>
				</div>
				<div class="EA_alert_nav_list" if="{{!language}}">
					<list class="EA_alert_nav_list_hour" id="list" show="{{!isswitch}}">
						<list-item type="listItem" class="EA_alert_nav_list_hour_item" @click="selectTime('min',$idx)" for="{{listMin}}">
							<div class="img_select_l">
								<image src="./assets/img/select.png" class="EA_alert_nav_list_hour_item_img" show="{{selMin === $idx}}"></image>
							</div>
							<text class="EA_alert_nav_list_hour_item_text" style="color: {{selMin === $idx?'#F9CB3D':'#cccccc'}};">{{$item.data}}</text>
						</list-item>
					</list>
					<list class="EA_alert_nav_list_hour" id="list" show="{{!isswitch}}">
						<list-item type="listItem" class="EA_alert_nav_list_hour_item" @click="selectTime('hour',$idx)" for="{{listHour}}">
							<div class="img_select_l">
								<image src="./assets/img/select.png" class="EA_alert_nav_list_hour_item_img" show="{{selHour === $idx}}"></image>
							</div>
							<text class="EA_alert_nav_list_hour_item_text" style="color: {{selHour === $idx?'#F9CB3D':'#cccccc'}};">{{$item.data}}</text>
						</list-item>
					</list>
				</div>
				<div class="EA_alert_nav_btnList">
					<div class="EA_alert_nav_btnList_btn" if="{{language}}" @click="closealert()">
						<text class="EA_alert_nav_btnList_btn_text">取消</text>
					</div>
					<div class="EA_alert_nav_btnList_btn" @click="doingDevice()">
						<text class="EA_alert_nav_btnList_btn_text1">启动</text>
					</div>
					<div class="EA_alert_nav_btnList_btn" if="{{!language}}" @click="closealert()">
						<text class="EA_alert_nav_btnList_btn_text">取消</text>
					</div>
				</div>
			</div>
		</div>
		<!-- 组件 -->
		<!-- <midea-showdialog if="{{showd}}" header="{{head}}" data="{{setdata}}" footer="{{foot}}" onclick-event3="closeDialog()" onclick-event1="closeAlert()" onclick-event2="comfirm()">
			<div class="nav_dialog" style="height:{{isup?453:heightNav}}px;" >
				<div class="item" @click="selectPower()">
					<text class="text1">预约开机</text>
					<image @click="selectPower()" class="icon" src="{{ispower?'./assets/img/select.png':'./assets/img/unselect.png'}}"></image>
				</div>
				<div class="item" @click="selectClose()">
					<text class="text1">预约关机</text>
					<image class="icon" src="{{isclose?'./assets/img/select.png':'./assets/img/unselect.png'}}"></image>
				</div>
				<div class="item" @click="openselect()" style="border-bottom-width:{{isup?0:1}}px">
					<text class="text1">预约时间</text>
					<div class="selectData">
						<text class="selecttext">{{selectdata}}</text>
						<image class="selecticon" src="{{isup?'./assets/img/up.png':'./assets/img/down.png'}}"></image>
					</div>
				</div>
				<div class="itemSelect" style="height:{{isup?0:heightNav-453}}px">
					<list onscrollbottom="" id="list" class="itemlist">
						<list-item for="{{hourList}}" class="dialog_center" type="listItem"  @click="timeSelect($item.name,'hour')">
							<div class="itemSelectIcon" show="{{$item.name.toString() == selectdata.substring(0,2)}}"></div>
							<text class="itemoption" style="color:{{$item.name.toString() == selectdata.substring(0,2)?'#F9CB3D':'#cccccc'}}">{{$item.name}}</text>
							<image class="itemSelectIcon" show="{{$item.name.toString() == selectdata.substring(0,2)}}" src="./assets/img/selected.png"></image>
						</list-item>
					</list>
					<div class="itemLine"></div>
					<list onscrollbottom="" id="list" class="itemlist">
						<list-item for="{{minList}}" class="dialog_center" type="listItem" @click="timeSelect($item.name,'min')">
							<div class="itemSelectIcon" show="{{$item.name.toString() == selectdata.substring(3,5)}}"></div>
							<text class="itemoption" style="color:{{$item.name.toString() == selectdata.substring(3,5)?'#F9CB3D':'#cccccc'}}">{{$item.name}}</text>
							<image class="itemSelectIcon" show="{{$item.name.toString() == selectdata.substring(3,5)}}" src="./assets/img/selected.png"></image>
						</list-item>
					</list>
				</div>
			</div>
		</midea-showdialog> -->
		<!-- <midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about> -->
		<midea-loading if="{{isshowLoading}}"></midea-loading>
		<midea-tips if="{{istips}}"></midea-tips>
	</div>
</template>
<script>
	import api from '../Common/api/api.js';
	import prompt from '@system.prompt';
	import router from '@system.router';
	import fetch from '@system.fetch';
	import account from '@service.account';
	import storage from '@system.storage';
	import barcode from '@system.barcode';
	import pkg from '@system.package';
	import network from '@system.network';
	import net from '../Common/api/networkAPI.js';

	export default {
		private: {
			showd:true,
			head:{
				title:'头部',
				fontSize:48,
				color:"#000000",
				fontWeight:'bold'
			},
			setdata:{
				text:"",
				fontSize:40,
				color:'#F9CB3D',
				fontWeight:'normal'
			},
			foot:[{
				name:'取消',
				fontSize:48,
				color:"#F9CB3D",
				fontWeight:'nomal',
				disabled:true
			},{
				name:'确定',
				fontSize:48,
				color:"#F9CB3D",
				fontWeight:'nomal',
				disabled:false
			}],
			isup: true,
			heightNav: 980,
			hourList: [],
			minList:[],
			selectdata:'05:47',
			// dialog end
			getStatusInterval: null,
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			warmtime:"",
			ws: '',
			fenClassname:false,
			isws: false,
			isclosews: false,
			timeoutInter:'',
			className:'EA_nav_list_data_data',
			className_l:'EA_nav_list_data_data_l',
			ismeiju: false,
			isfirst: false,
			isshowLoading: false,
			istips: false,
			isabout: false,
			showAlert: false,
			bgColor: true,
			language: true,
			deviceHeight: 0,
			isswitch: false,
			selHour: 0,
			selMin: 0,
			listHour: [],
			listMin: [],
			code: '',
			openId: '',
			accessToken: '',
			online: 'false',
			power: "on",
			selectMode: '',
			iswarm: true,
			left_time_hour: 0,
			left_time_min: 0,
			code_id: 0,
			work_mode: 0,
			work_status: 0,
			current_time: 0,
			EAlist: ['mode','work_status', 'order_time_hour', 'order_time_min', 'left_time_hour', 'left_time_min'],
			EAdata: {
				work_status: '',
				code_id: 0,
				work_mode: 0,
				current_time: 0,
			},
			listDevice:{}
		},
		public: {
			deviceSeries: '00090009',
			deviceId: '1099511824244',
			openid: 'b1473dafc7f84f12b4d0c08c969adadf'
		},
		closeDialog(){
			// 关闭预约时间
			this.showd = false;
			console.log("点击弹框以外的阴影部分")
			// prompt.showToast({
			// 	message:"ssssssssssss"
			// })
		},
		closeAlert(){
			this.showd = false;
			console.log("取消按钮")
		},
		comfirm(){
			console.log("确定按钮")
		},
		selectPower(){
			let that = this;
			that.ispower = !that.ispower;
			that.isclose = false;
			that.getTime()
		},
		selectClose(){
			let that = this;
			that.isclose = !that.isclose;
			that.ispower = false;
			that.getTime()
		},
		openselect(){
			let that = this;
			that.isup = !that.isup;
			if(that.isup){
				that.heightNav = 453;
			}else{
				that.heightNav = 980;
			}
		},
		timeSelect(data,str){
			let that = this;
			if(str == 'min'){
				that.selectdata = that.selectdata.substring(0,2) + ":" + data;
			}else{
				that.selectdata = data + ":" + that.selectdata.substring(3,5);
			}
			that.getTime()
		},
		//启动
		doingDevice(menuId){
			let that = this;
			let status = [];
			let params = {
				'code_id': menuId,
				'work_mode': menuId,
				'power': 'on'
			};
			status = ['code_id','work_mode', 'power'];

			that.isshowLoading = true;
			that.showAlert = false;
			that.ctrDevice(params,status);
		},
		//停止
		stopDevice(){
			let that = this;
			let params = {
				power: 'off'
			}
			let status = ['mode','order_time_hour','order_time_min','work_status'];
			that.isshowLoading = true;
			that.ctrDevice(params,status);
		},
		//显示alert
		selectData(str) {
			let that = this;
			let params;
			if(that.online === 'true'){
				if(str === 'keep_warm'){
					params = {
						'mode':str,
						'work_status':'cooking'
					}
				}else{
					params = {
						'mode':str,
						'work_status':'cooking'
					}
				}
				let status = ['mode','work_status'];
				that.isshowLoading = true;
				that.ctrDevice(params,status);
// 				this.showAlert = true;
// 				this.isswitch = true;
// 				this.initData();
// 				this.selectMode = str;
			}else{
				that.isshowclose()
			}
		},
		// 关闭alert
		closealert() {
			this.showAlert = false;
			this.initData();
		},
		//选择时间
		selectTime(str, id) {
			let that = this;
			if (str === 'hour') {
				that.selHour = id;
				if (id === 0) {
					if (that.selMin === 0 || that.selMin === '--') {
						that.selMin = 1;
					}
				} else {
					if (that.selMin === '--') {
						that.selMin = 0;
					}
				}
			} else {
				if (id === 0 && that.selHour === 0) {} else {
					that.selMin = id;
					if (id === 0) {
						if (that.selHour === 0 || that.selHour === '--') {
							that.selHour = 1
						}
					} else {
						if (that.selHour === 0 || that.selHour === '--') {
							that.selHour = 0;
						}
					}
				}
			}
		},
		//获取目前时间
		getTimeNow(timeType){
			let myDate = new Date();
			if(timeType === 'hour'){
				return parseInt(myDate.getHours())
			}else if(timeType === 'min'){
				return parseInt(myDate.getMinutes())
			}
		},
		//switch开关
		switchChang() {
			this.isswitch = !this.isswitch;
		},
		//保温时间过滤
		keepTime(hour,min){
			let H;
			let M;
			if(10 > parseInt(hour) > 0){
				H = '0' + parseInt(hour);
			}else if(parseInt(hour) > 9){
				H = parseInt(hour);
			}else if(parseInt(hour) === 0){
				H = "00";
			}else{
				H = "--";
			}
			if(10 > parseInt(min) > 0){
				M = "0" + parseInt(min);
			}else if(parseInt(min) > 9){
				M = parseInt(min);
			}else if(parseInt(min) === 0){
				M = "00";
			}else{
				M = "--";
			}
			return H + ":" + M;
		},
		getStatusText(status) {
			// 获取状态文字
			let result = '';
			switch(status) {
				case '0':
					result = '空闲中';
					break;
				case '1':
					result = '预约中';
					break;
				case '3':
					result = '空闲中';
					break;
			}
			return result;
		},
		//状态显示过滤器
		work_status_fun() {
			let codeId = this.work_mode;
			let workStatus = this.work_status;
			let status = '';
			let mode_data = "";
			console.log("状态改变了");
			console.log(codeId);
			switch (codeId) {
				case '25':
					mode_data = "婴儿糊";
					break;
				case '33':
					mode_data = "婴儿粥";
					break;
				case '36':
					mode_data = "辅食泥";
					break;
				default:
					mode_data = "其他功能";
					break;
			}
			switch (workStatus) {
				case '1':
					status = mode_data + " | " + "预约中";
					break;
				case '2':
					status = mode_data + " | " + "工作中";
					break;
				default:
					status = '';
					break;
			}
			return status;
		},
		//样式过滤
		padingLeft(hour,min){
			let Len = this.tiemData(hour, min).toString().length;
			console.log("他的值"+this.tiemData(hour, min))
			console.log("长度"+Len)
			switch (Len) {
				case 1:
					return '250'
					break;
				case 2:
					return '450'
					break;
				case 3:
					return '600'
					break;
				case 4:
					return '750'
					break;
				case 5:
					return '950'
					break;
				default:
					return false;
					break;
			}
		},
		//根据大小切换样式
		styleChange(num){
			let that = this;
			if(parseInt(num) > 99){
				that.fenClassname = true;
				that.className = 'EA_nav_list_data_data_change';
				that.className_l = 'EA_nav_list_data_data_l_change';
			}else{
				that.fenClassname = false;
				that.className = 'EA_nav_list_data_data';
				that.className_l = 'EA_nav_list_data_data_l';
			}
		},
		//时间过滤器
		tiemData(hour, min) {
			let that = this;
			// if((hour && min) || (hour === 'null' && min === 'null')){
				if (parseInt(hour) === 0) {
					if (parseInt(min) === 0) {
						that.styleChange(0);
						return "--";
					} else {
						that.styleChange(parseInt(min));
						return parseInt(min);
					}
				} else if(parseInt(hour) < 24 && parseInt(min) < 60){
					that.styleChange((parseInt(hour) * 60) + parseInt(min))
					return (parseInt(hour) * 60) + parseInt(min);
				}else{
					that.styleChange(0);
					return "--";
				}
// 			}else{
// 				return "--";
// 			}
			
		},
		getRestTime(current_time) {
			// 获取剩余时间
			if(current_time == 0) {
				return '--'
			} else {
				return Math.ceil(current_time / 60);
			}
		},
		//小时以及分钟
		setTime() {
			let that = this;
			let obj;
			for (let i = 0; i < 2; i++) {
				if (i === 0) {
					for (let h = 0; h < 24; h++) {
						if (h < 10) {
							obj = {
								id: h,
								data: '0' + h.toString()
							}
						} else {
							obj = {
								id: h,
								data: h.toString()
							}
						}
						that.listHour.push(obj)
					}
				} else {
					for (let m = 0; m < 60; m++) {
						if (m < 10) {
							obj = {
								id: m,
								data: '0' + m.toString()
							}
						} else {
							obj = {
								id: m,
								data: m.toString()
							}
						}

						that.listMin.push(obj)
					}
				}
			}
		},
		//时间逻辑
		timeGet(){
			let that = this;
			let time1 = parseInt(that.EAdata.order_time_hour);
			let time2 = parseInt(that.EAdata.order_time_min);
			if(that.EAdata.order_time_hour && that.EAdata.order_time_min){
				if(time1 < 24 && time2 < 60){
					if(time1 >= 0 && time2 >= 0){
						that.selHour = time1;
						that.selMin = time2;
						that.order_time_hour = time1;
						that.order_time_min = time2;
					}else{
						that.selHour = '--';
						that.selMin = '--'
					}
				}else{
					that.selHour = '--';
					that.selMin = '--'
				}
			}else{
				that.selHour = '--';
				that.selMin = '--'
			}
		},
		//初始化数据
		initData() {
			let that = this;
			this.isfirst = true;
			that.timeGet();
			if(this.online === 'true'){
				this.power = 'on';
			}else{
				this.power = 'off';
			}
			if(that.timeoutInter != ''){
				clearTimeout(that.timeoutInter)
			}
			this.work_status = this.EAdata.work_status;
			this.code_id = this.EAdata.code_id;
			this.work_mode = this.EAdata.work_mode;
			console.log(this.work_mode);
			this.current_time = this.EAdata.current_time;
			if(this.work_status === 'keep_warm' || this.work_status === 'cooking' || this.work_status === 'schedule'){
				that.timeGetdata();
			}
		},
		//网络检查
		netWorkGet(str) {
			let that = this;
			if(that.iswarm){
				network.getType({
					success: function(data) {
						if (data.type === 'none') {
							prompt.showToast({
								message: str + "，请检查网络",
								duration: 1
							})
						} else {
							prompt.showToast({
								message: str,
								duration: 1
							})
						}
					}
				})
			}
			
		},
		//获取后一天的时间戳
		gettime() {
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		//获取授权信息
		getAuthor() {
			let that = this;
			console.log("第三步授权")
			account.authorize({
				type: 'code',
				success: function(data) {
					console.log("第三步"+JSON.stringify(data))
					that.code = data.code;
					that.getToken(data.code);
				},
				fail: function(data, code) {
					console.log("第三步"+JSON.stringify(data))
					that.initData();
					that.isfirst = true;
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('授权失败,请稍后重试')
				}
			})
		},
		//获取token 
		getToken(code) {
			let that = this;
			let params = {
				thirdUId: code,
			}
			that.pause_data = true;
			api.getUserToken(params).then((res) => {
				let data_accesstoken = res;
				if (data_accesstoken.code && data_accesstoken.code === 200) {
					let result_data = typeof data_accesstoken.data === 'object'?data_accesstoken.data:JSON.parse(data_accesstoken.data);
					if (!parseInt(result_data.code)) {
						that.openId = result_data.openId;
						that.openid = result_data.openId;
						that.accessToken = result_data.accessToken;
						let obj = {
							openid: that.openId,
							accessToken: that.accessToken,
							time: that.gettime()
						}
						storage.set({
							key: 'openidToken',
							value: JSON.stringify(obj),
							success: function(data) {

							},
							fail: function(data, code) {

							}
						})
						that.LanOnlineGet();
						that.getDeviceList();
					} else {
						that.initData();
						that.isfirst = true;
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.netWorkGet(api.getCode(result_data.code, "获取访问令牌失败"))
					}
				} else {
					that.initData();
					that.isfirst = true;
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('获取访问令牌失败,请稍后重试')
				}
			}).catch((error,code) => {
				console.log("授权接口：error"+error+":::code"+code)
				that.initData();
				that.isfirst = true;
				that.isRefreshing = false;
				that.isshowLoading = false;
				that.netWorkGet('获取访问令牌失败,请稍后重试')
			})
		},
		/**
		 * 局域网获取
		 */
		getLanData(res){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			if(parseInt(obj.code) == 0){
				that.isRefreshing = false;
				that.isshowLoading = false;
				that.isfirst = true;
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.EAdata = data;
				that.listDevice = data;
				that.listDevice.online = "true";
				that.online = "true";
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceList();
			}
		},
		/**
		 * 联网获取
		 */
		getdataLan(res){
			let that = this;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.isfirst = true;
			if (res.code === 200) {
				let data = (typeof res.data) === "object" ? res.data : JSON.parse(res.data);
				if (!parseInt(data.code) && !parseInt(data.devices[0].status)) {
					let obj = data.devices[0].properties;
					that.EAdata = obj;
					that.listDevice = obj;
					that.online = that.EAdata.online;
					if (that.online != 'true') {
						that.isshowclose();
					}
				} else {
					that.initall();
					if (data.msg === '') {
						let str1 = '';
						if (data.devices[0].status) {
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
								that.isshowclose();
							} else {
								that.netWorkGet(api.getStatus("get",str1, '获取设备状态失败'))
							}
						} else {
							str1 = data.code;
							that.netWorkGet(api.getCode(str1, '获取设备状态失败'))
						}
					} else {
						that.netWorkGet(data.msg)
					}
				}
			} else {
				that.initall();
				that.netWorkGet('获取设备状态失败,请稍后重试')
			}
		},
		//获取设备列表
		getDeviceList() {
			let that = this;
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: that.EAlist
				}]
			}
			that.istips = false;
			that.pause_data = true;
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
				that.initData();
			}).catch((error) => {
				if(error.online){
					if(that.iswarm){
						that.initall();
						that.initData();
					}
					that.netWorkGet('获取设备状态失败,请稍后重试');
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.isfirst = true;
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceList();
				}
				
			})
		},
		/**
		 * 局域网控制
		 */
		lanControl(res,obj1,status){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			if(parseInt(obj.code) == 0){
				that.isRefreshing = false;
				that.isshowLoading = false;
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.EAdata.mode = data.mode;
				that.mode = data.mode;
				that.EAdata.order_time_hour = data.order_time_hour;
				that.EAdata.order_time_min = data.order_time_min;
				that.EAdata.left_time_hour = data.left_time_hour;
				that.left_time_hour = data.left_time_hour;
				that.EAdata.left_time_min = data.left_time_min;
				that.left_time_min = data.left_time_min;
				that.EAdata.warm_time_hour = data.warm_time_hour;
				that.warm_time_hour = data.warm_time_hour;
				that.EAdata.warm_time_min = data.warm_time_min;
				that.warm_time_min = data.warm_time_min;
				that.EAdata.work_status = data.work_status
				that.EAdata.online = 'true';
				that.listDevice = data;
				that.listDevice.online = "true";
				that.online = 'true';
				
				that.initData();
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.ctrDevice(obj1, status);
			}
		},
		/**
		 * 广域网控制
		 */
		wlanControl(res){
			let that = this;
			if (res.code && res.code === 200) {
				console.log("第一步")
				let bind_res_data = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
				if(parseInt(bind_res_data.code) == 0){
					console.log("第二步")
					if (!parseInt(bind_res_data.devices[0].status)) {
						that.EAdata.online = 'true';
						that.online = 'true';
						let isall = false;
						let obj = typeof bind_res_data.devices[0].props === 'object' ? bind_res_data.devices[0].props : JSON.parse(bind_res_data.devices[0].props);
						if (obj.mode) {
							that.EAdata.mode = obj.mode;
						} else {
							isall = true;
						}
						if (obj.work_status) {
							that.EAdata.work_status = obj.work_status
						} else {
							isall = true;
						}
						that.listDevice = obj;
						if (isall) {
							that.isshowLoading = true;
							that.getDeviceList();
						} else {
							that.isRefreshing = false;
							that.isshowLoading = false;
						}
					} else {
						that.initall();
						console.log("第三步")
						that.isRefreshing = false;
						that.isshowLoading = false;
						if (bind_res_data.msg === '') {
							console.log("第四步")
							let str1 = '';
							if (bind_res_data.devices[0].status) {
								console.log("第5步")
								str1 = bind_res_data.devices[0].status;
								if(str1.toString() === '-6'){
									that.isshowclose();
									return false;
								}
								if (str1.toString() === '-100' && bind_res_data.devices[0].description.toString() === '3123') {
									that.isshowclose();
								} else {
									that.netWorkGet(api.getStatus("post",str1, '操作设备失败'))
								}
							} else {
								str1 = bind_res_data.code;
								that.netWorkGet(api.getCode(str1, '操作设备失败'))
							}
						} else {
							that.netWorkGet(bind_res_data.msg)
						}
					}
				}else{
					that.initall();
					that.isRefreshing = false;
					that.isshowLoading = false;
					if (bind_res_data.msg === '') {
						let str1 = '';
						str1 = bind_res_data.code;
						that.netWorkGet(api.getCode(str1, '操作设备失败'))
					} else {
						that.netWorkGet(bind_res_data.msg)
					}
				}
			} else {
				that.initall();
				that.isRefreshing = false;
				that.isshowLoading = false;
				that.netWorkGet('操作设备失败,请稍后重试')
			}
			that.initData();
		},
		//控制家电
		ctrDevice(obj, status) {
			let that = this;
			that.pause_data = true;
			that.isshowLoading = true;
			let EAdata = that.listDevice;
			let status_params = that.EAdata;
			for (let i = 0; i < status.length; i++) {
				delete status_params[status[i]]
			}
			if (status_params.online) {
				delete status_params.online
			}
			let params = {
				'openId': that.openId,
				'devices': [{
					"deviceId": that.deviceId,
					"properties": obj,
					// "status": 0
					"status": status_params
				}]
			}
			console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				that.iswarm = true;
				if(res.lanonline){
					that.wlanControl(res);
				}else{
					that.lanControl(res,obj,status)
				}
			}).catch((error) => {
				that.getDeviceList();
				that.iswarm = true;
				if(that.lanOnline == 'true'){
					console.log("ssssssss")
					that.isagain = false;
					that.lanOnline = 'false';
					that.ctrDevice(obj, status);
				}else{
					// that.initall();
					that.initData();
					that.netWorkGet('操作设备失败,请稍后重试');
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.isfirst = true;
				}
				
			})
		},
		initall(){
			let that = this;
			that.EAdata = {
				order_time_hour: 0,
				order_time_min: 0,
				left_time_hour: 0,
				left_time_min: 0,
				work_status: '--',
				mode: '--',
				warm_time_hour: 0,
				warm_time_min: 0
			}
			that.EAdata.online = 'false';
			that.listDevice = that.EAdata;
			that.listDevice.online = "false";
			that.online = 'false';
		},
		isshowclose(){
			let that = this;
			that.istips = false;
			if(that.timeTips != ''){
				clearTimeout(that.timeTips)
			}
			if(that.iswarm){
				that.istips = true;
				that.timeTips = setTimeout(() => {
					that.istips = false;
				},3000)
			}
		},
		//下拉刷新
		scrollbottom(e) {
			let that = this;
			that.isRefreshing = e.refreshing;
			let timestamp = Date.parse(new Date());
			// if(that.isfirst){
				that.isshowLoading = true;
				storage.get({
					key: 'openidToken',
					success: function (data) {
						that.iswarm = true;
						if(data === ''){
							that.getAuthor();
						}else{
							let obj = JSON.parse(data);
							if(parseInt(timestamp) > parseInt(obj.time)){
								that.getAuthor();
							}else{
								if(obj.openid === that.openid){
									that.openId = obj.openid;
									that.accessToken = obj.accessToken;
									if(!that.isLanInit){
										that.LanOnlineGet();
									}
									that.getDeviceList();
								}else{
									that.getAuthor();
								}
							}
						}
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			// }
		},
		timeGetdata(){
			let that = this;
			if(that.timeoutInter != ''){
				clearInterval(that.timeoutInter)
			}
			that.timeoutInter = setInterval(function(){
				that.iswarm = false;
				let timestamp = Date.parse(new Date());
					storage.get({
						key: 'openidToken',
						success: function (data) {
							if(data === ''){
								that.getAuthor();
							}else{
								let obj = JSON.parse(data);
								if(parseInt(timestamp) > parseInt(obj.time)){
									that.getAuthor();
								}else{
									if(obj.openid === that.openid){
										that.openId = obj.openid;
										that.accessToken = obj.accessToken;
										if(!that.isLanInit){
											that.LanOnlineGet();
										}
										that.getDeviceList();
									}else{
										that.getAuthor();
									}
								}
							}
						},
						fail: function (data, code) {
							console.log(`handling fail, code = ${code}`)
						}
					})
			},3000)
		},
		//判断是否安装美居
		isMeiju() {
			let that = this;
			let str1 = "确定打开美居？（仅支持美居5.2及以上版本）";
			let str2 = "您还没安装美居app，是否确定下载安装?";
			pkg.hasInstalled({
				package: 'com.midea.ai.appliances',
				success: function(res) {
					prompt.showDialog({
						title: '提示',
						message: res.result?str1:str2,
						buttons: [
							{
								text: res.result?'直接打开':'去下载',
								color: '#33dd44'
							}
						],
						success: function(data) {
							if (res.result) {
								router.push({ uri: 'meiju://com.midea.meiju/main' });
							} else {
								pkg.install({
									package: 'com.midea.ai.appliances',
									success: function(resp) {
										console.log(`handling success: ${resp.result}`);
									},
									fail: function(resp, code) {
										console.log(`handling fail, code = ${code}`);
									}
								});
							}
						},
						cancel: function() {
							console.log('handling cancel');
						},
						fail: function(data, code) {
							console.log(`handling fail, code = ${code}`);
						}
					});
					
					console.log(`handling success: ${res.result}`);
				},
				fail: function(res, code) {
					console.log(`handling fail, code = ${code}`);
				}
			});
		},
		//websocket
		webSocketdata() {
			let that = this;
			api.createWensocket(that.deviceId).then((ws) => {
				that.ws = ws;
				that.isws = true;
				ws.onopen = function() {
					console.log("websocket连接成功")
				}
				ws.onerror = function(data) {
					// 连接失败
					//失败之后再重启
					that.webSocketdata();
					console.log('websocket连接失败')
				}
				ws.onmessage = function(res) {
// 					prompt.showDialog({
// 						title: 'websocket',
// 						message: "websocket："+ JSON.stringify(res),
// 						buttons: [{
// 							text: '确定',
// 							color: '#33dd44'
// 						}],
// 						success: function (data) {
// 						},
// 						cancel: function () {
// 							console.log('handling cancel')
// 						},
// 						fail: function (data, code) {
// 							console.log(`handling fail, code = ${code}`)
// 						}
// 					})
					let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
					if(obj.status.online){
						that.online = obj.status.online;
						that.EAdata.online = obj.status.online;
					}else{
						that.EAdata.online = 'true';
						that.online = 'true';
					}
					if (obj.status.mode) {
						that.EAdata.mode = obj.status.mode;
					}
					if (obj.status.order_time_hour) {
						that.EAdata.order_time_hour = obj.status.order_time_hour;
					}
					if (obj.status.order_time_min) {
						that.EAdata.order_time_min = obj.status.order_time_min;
					}
					if(obj.status.left_time_hour){
						that.EAdata.left_time_hour = obj.status.left_time_hour;
						that.left_time_hour = obj.status.left_time_hour;
					}
					if(obj.status.left_time_min){
						that.EAdata.left_time_min = obj.status.left_time_min;
						that.left_time_min = obj.status.left_time_min;
					}
					if(obj.status.warm_time_hour){
						that.EAdata.warm_time_hour = obj.status.warm_time_hour;
						that.warm_time_hour = obj.status.warm_time_hour;
					}
					if(obj.status.warm_time_min){
						that.EAdata.warm_time_min = obj.status.warm_time_min;
						that.warm_time_min = obj.status.warm_time_min;
					}
					if (obj.status.work_status) {
						that.EAdata.work_status = obj.status.work_status;
					}
					that.listDevice = that.EAdata;
					that.initData();
				}
				ws.onclose = function() {
					// 关闭 websocket
					// 关闭之后再重启
					if(!that.isclosews){
						that.webSocketdata();
					}
					console.log("websocket连接已关闭...")
				};
			});
		},
		/**
		 * 局域网初始化
		 */
		LanOnlineGet(){
			let that = this;
			net.deviceInit(that.accessToken,that.deviceId).then((res) => {
				that.isLanInit = true;
			}).catch((error) => {
				that.isLanInit = false;
			});
		},
		onclickFn(e){
			this.isabout = false;
		},
		onMenuPress(){
			this.isabout = !this.isabout;
		},
		closeWebsocket(e){
			let that = this;
			that.isclosews = true;
			if(that.timeoutInter != ''){
				clearInterval(that.timeoutInter)
			}
			if(that.ws != ''){
				that.ws.close({
					code: 1000,
					reason: '退出关闭',
					success: function() {
						that.ws = '';
						console.log("关闭websocket成功")
					},
					fail: function(data, code) {
						console.log("关闭websocke失败, code = "+JSON.stringify(code))
					}
				})
			}
		},
		onShow(){
			let that = this;
			that.isclosews = false;
			if(that.timeoutInter != ''){
				clearInterval(that.timeoutInter)
			}
			if(that.online === 'true'){
				if(this.work_status === 'keep_warm' || this.work_status === 'cooking' || this.work_status === 'schedule'){
					that.timeGetdata();
				}
			}
			
			if(that.ws === '' && that.isws){
				// that.webSocketdata();
			}
		},
		onBackPress(){
			let that = this;
			that.closeWebsocket();
			router.clear();
			this.$app.exit();
		},
		onHide(){
			let that = this;
			that.istips = false;
			that.closeWebsocket();
			// that.isabout = false;
		},
		onInit() {
		  /* 如将 $element('id')获取到内容，赋值给成员变量，则有可能引发堆栈溢出 */
		  this.setTime();
		  //初始化
		  this.initData();
		  let that = this;
		  this.getStatusInterval = setInterval(function() {
			that.getDeviceList();
		  }, 5000)
		  // this.deviceHeight = this.$app.options.env.deviceHeight;
		  api.getlanguage().then((res) => {
		  	if (res === 'ug') {
		  		that.language = false;
		  	} else {
		  		that.language = true;
		  	}
		  })
		  // this.isMeiju();
		  router.clear();
		  	for (let time = 1; time < 24; time++) {
				let obj = {
					name:'',
					data:''
				}
				obj.data = time;
				if(time < 10){
					obj.name = '0'+time;
				}else{
					obj.name = time;
				}
				that.hourList.push(obj)
	    	}
			for (let time = 0; time < 60; time++) {
				let obj = {
					name:'',
					data:''
				}
				obj.data = time;
				if(time < 10){
					obj.name = '0'+time;
				}else{
					obj.name = time;
				}
				that.minList.push(obj)
			}
		  //组件控制
		  that.$on('openmenu', function(e) {
		  	that.isabout = !this.isabout;
		  })
		  that.$on('cancel', function(e) {
		  	that.isabout = false;
		  })
		  that.$on('closetips', function(e) {
		  	that.istips = false;
		  })
		  let timestamp = Date.parse(new Date());
		  storage.get({
		  	key: 'openidToken',
		  	success: function(data) {
		  		that.isshowLoading = true;
				console.log("来这里"+data);
				
		  		if (data === '') {
		  			that.getAuthor();
		  		} else {
		  			let obj = JSON.parse(data);
		  			if (parseInt(timestamp) > parseInt(obj.time)) {
		  				that.getAuthor();
		  			} else {
						console.log("第一步")
		  				if (obj.openid === that.openid) {
		  					that.openId = obj.openid;
		  					that.accessToken = obj.accessToken;
							that.LanOnlineGet();
		  					that.getDeviceList();
		  				} else {
		  					that.getAuthor();
		  				}
		  			}
		  		}
		  	},
		  	fail: function(data, code) {
		  		console.log(`handling fail, code = ${code}`)
		  	}
		  })
		},
	}
</script>
<style lang='less'>
	@import "./assets/index.less";

	.nav_dialog{
	    width: 100%;
	    height: 453px;
	    flex-direction: column;
	}
	.item{
	    width: 100%;
	    height: 150px;
	    padding-left: 60px;
	    padding-right: 60px;
	    flex-direction: row;
	    align-items: center;
	    justify-content: space-between;
	    border-bottom-color: #E5E5E5;
	    border-bottom-width: 1px;
	}
	.text1{
	    font-size: 48px;
	    color:#000000;
	}
	.icon{
	    width: 60px;
	    height: 60px;
	    resize-mode: cover;
	    border-radius: 60px;
	}
	.selectData{
	    padding: 50px 18px;
	    flex-direction: row;
	    justify-content: center;
	    align-items: center;
	}
	.selecttext{
	    font-size: 42px;
	    text-align: center;
	    color: #666666;
	}
	.selecticon{
	    margin-left: 37.6px;
	    width: 30px;
	    height: 15px;
	    resize-mode: cover;
	}
	.itemSelect{
	    width: 100%;
	    flex-direction: row;
	    background-color: #F2F2F2;
	}
	.itemlist{
	    width: 50%;
	}
	.dialog_center{
	    width: 100%;
	    height: 105px;
	    flex-direction: row;
	    align-items: center;
	    justify-content: center;
	}
	.itemoption{
	    font-size: 48px;
	    padding: 0px 50px;
	}
	.itemSelectIcon{
	    width: 65px;
	    height: 40px;
	    resize-mode: cover;
	}
	.itemLine{
	    width: 1.5px;
	    height: 526px;
	    background-color: #d9d9d9;
	}
</style>
