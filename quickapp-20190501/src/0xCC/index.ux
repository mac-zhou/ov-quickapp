<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-logo" src="../Component/MideaLogo/index"></import>
<!-- <import name="midea-wind-speed" src="../Component/MideaWindSpeed/index"></import> -->
<import name="midea-time" src="../Component/MideaTime/index"></import>
<!-- <import name="midea-about" src="../Component/MideaAbout/index"></import> -->
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>

<template>
    <div class="container">
		<midea-head title="中央空调" language="{{language}}" onclose-websocket="closeWebsocket" power="{{isopen?'on':'off'}}" isnew="false" coloron="{{headColor}}"></midea-head>
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="refreshData" refreshing="{{isRefreshing}}">

			<list onscrollbottom="" onscroll="" style="background-color: {{isopen?Color:bgColor}};">
				<list-item type="refresh" class="wrap">
					<midea-logo isopen="{{isopen}}"></midea-logo>
					<div class="nav_data_show">
						<div class="nav_data nav_data2">
							<text class="nav_data_text2" if="{{!language}}" style="color: {{isopen?bgCo:dataColor}};">°C</text>
							<text class="nav_data_text" style="color: {{isopen?bgCo:dataColor}};">{{value}}</text>
							<text class="nav_data_text2" if="{{language}}" style="color: {{isopen?bgCo:dataColor}};">°C</text>
						</div>
					</div>
					<div class="nav_tip_show">
						<text class="nav_data">
							<span class="nav_data_tip" style="color: {{isopen?bgCo:dataColor}};">设定温度</span>
						</text>
					</div>
					<div class="nav_all_show">
						<text class="nav_data">
							<span class="nav_data_tip_in" style="color: {{isopen?bgCo:dataColor}};">室内温度:{{indoor}}°C</span>
						</text>
						<!-- <text class="fixed_time" style="color: {{isopen?bgCo:dataColor}};">{{fixed_time}}</text> -->
					</div>
					<div class="nav_btn">
						<image class="{{language?'nav_del_data':'nav_del_data_in'}}" src="{{isopen?'./assets/img/del.png':'./assets/img/del2.png'}}" @click="delData(isopen)"></image>
						<image class="{{language?'nav_del_data_in':'nav_del_data'}}" src="{{isopen?'./assets/img/add.png':'./assets/img/add2.png'}}"  @click="addData(isopen)"></image>
					</div>
				</list-item>    
			</list>
			</refresh>
			<!-- <div class="nav_btn">
				<image class="{{language?'nav_del_data':'nav_del_data_in'}}" src="{{isopen?'./assets/img/del.png':'./assets/img/del2.png'}}" @click="delData(isopen)"></image>
				<image class="{{language?'nav_del_data_in':'nav_del_data'}}" src="{{isopen?'./assets/img/add.png':'./assets/img/add2.png'}}"  @click="addData(isopen)"></image>
			</div> -->
			<!--lua control-->
			<div class="control" @swipe="swiperData({direction:[up]})">
				<div class="tabs">
					<div class="tabs_in" for="productList" @click="showDialog($item.value,$idx)">

						<!-- <div class="img_in" style="background-color: {{getDataItem($item)?'#E9EDFF':'#ffffff'}}; border-color: #e5e5e5" if="{{!$item.flagImg}}">
							<text class="timeText" style="color:{{getDataItem($item)?'#5D75F6':'#666666'}}">
								<span>{{$item.name}}</span>
							</text>
						
						</div> -->
		
						<!-- 这里是我的加的 -->
						<div class="ctrl" 
						style="background-color:{{isopen?$item.color:'#fff'}}; border-width: {{isopen&&$item.name!=='开关'?'0':'3px'}};border-style:solid;border-color: {{$item.name=='开关'?'#d5d5d5':'#f3f3f3'}};">
							<text class="text_in" style="color:{{isopen?'#fff':'#000'}};opacity: {{isopen?'1':'0.3'}};" if="{{$item.textt != ''}}">{{$item.textt}}</text>
							<image class="img" else="{{$item.flagImg}}" src="{{$item.icon}}"></image>
						</div>
						
						<div class="nav_icon">
						<!-- 开关、模式、风速 颜色为 常黑 -->
							<text class="text" style="color: #000;opacity: {{isopen||$item.name=='开关'?'1':'0.3'}};">
								{{$item.nameNew}}
							</text>
						</div>

					</div>
				</div>
			</div>

			<div class="selectDta" if="{{issmork}}" @click="closeDialog()"></div>
			
			<div class="data_select {{Height}}" if="{{isdata}}">
				<block for="list">	
					<div class="nav_add_show item firstlist" if="{{$idx===0}}" @click="selectData($idx)">
						<text class="data_text_l" if="{{!language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
						<image class="{{language?'picIcon':'picIcon_l'}}" src="{{$item.icon}}"></image>
						<text class="data_text" if="{{language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
					</div>
					<div class="nav_add_show item" else @click="selectData($idx)">
						<text class="data_text_l" if="{{!language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
						<image class="picIcon" src="{{$item.icon}}"></image>
						<text class="data_text" if="{{language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
					</div>
				</block>
			</div>
			<div class="data_dia" style="top:{{(deviceHeight-1000)/2}}px" if="{{is_smork}}">
                <midea-time language="{{language}}" flag="{{switchFlag}}" list-data="{{timeList}}" time-value="{{timeValue}}" hight-color="#3191FD" default-color="#CCCCCC" selected-index="{{timeIndex}}" text="{{timeText}}" oncancel-evt="setTimeCancel" onsure-evt="setTimeSure"></midea-time>
			</div>
			<div class="wind_dia {{Height}}" if="{{is_wind_dia}}">
				<div class="windtabs">
					<div class="tabbar">
						<div class="tabbar-section" @click="windTypeSelect(0)">
							<text class="txt {{windTypeIndex==0?'curColor':''}}">手动</text>
							<image class="img-icon {{windTypeIndex==0?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
						</div>
						<div class="tabbar-section"  @click="windTypeSelect(1)">
							<text class="txt {{windTypeIndex==1?'curColor':''}}">自动</text>
							<image class="img-icon {{windTypeIndex==1?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
					<div class="tabcontent">
						<div class="tabcontent-section" show="{{tabContentShow === 0}}">
							<list class="list-wind">
								<block for="windList">
									<list-item type="wind-speed" class="wind-item" @click="windSelect($idx)">
										<text class="txt {{windIndex==$idx?'curColor':''}}">{{$item}}</text>
										<image class="img-icon {{windIndex==$idx?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
									</list-item>
								</block>
							</list>
						</div>
						<div class="tabcontent-section" show="{{tabContentShow === 1}}">
							<text class="txt2 curColor">自动风</text>
							<image class="img-icon img-icon2" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
				</div>
				<div class="btn-grounp">
					<text class="btn btn-cancel" @click="windCancel">取消</text>
					<text class="btn btn-sure" @click="windSure">确定</text>
				</div>
			</div>
        <!-- </div> -->
		<midea-loading if="{{isshowLoading}}"></midea-loading>
		<midea-tips if="{{istips}}"></midea-tips>
    </div>
</template>

<style>
    @import "./assets/index.css";
</style>

<script>
/* eslint-disable indent */
import router from '@system.router'
import prompt from '@system.prompt'
// import fetch from '@system.fetch'
import account from '@service.account'
import storage from '@system.storage'
import device from '@system.device'
import api from '../Common/api/api.js'
import network from '@system.network'
import net from '../Common/api/networkAPI.js'
	
    module.exports = {
        private: {
			onColor:'#FFF', //#E9EDFF
			offColor:'#FFF', //F2F2F2
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			ws: '',
			isws: false,
			isclosews: false,
   	 		language:true,
			deviceHeight:0,
			istips: false,
			isabout: false,
			isshowLoading: false,
			config_network: '',
			online:'false',
			id: "",
			isfirst:false,
			dataHeight: "height: 600px",
			humidity:"--",
			indoor: "--", //室内温度
			value: '--', //设定温度
			fixed_time: '',
			bgColor: '#CCCCCC',
			dataColor: '#666666',
			Color: "#FF0000",
			bgCo: '#ffffff',
			headColor:"#627BFF",
			isopen: false,
			issmork: false,
			isdata: false,
			is_smork: false,
			is_wind_dia: false,
			date: true,
			closeDia: "",
			Height: '',
			deviceModel:'',
			timeBgcolor: "#ffffff",
			windBgcolor: '#ffffff',
			timecolor: "#000000",
			windcolor: "#666666",
			time_cishu: 0,
			listDevice: {},
			productList: [
				{
				"name":"开关",
				"nameNew":"开关",
				"value": "open",
				"data":'开关',
				"icon":"./assets/img/on_off.png",
				"id":'',
				"color": "#fff",
				"flagImg": true,
				'textt':''
			},
			{
				"name":"模式",
				"nameNew":"模式",
				"value":'model',
				"data": "模式|制冷",
				"icon":"./assets/img/model_off_2.png",
				"id":0,
				"color": "",
				"flagImg": true,
				'textt':''
			},
			{
				"name":"风速",
				"nameNew":"风速",
				"value": "wind",
				"data": "--",
				"icon":"",
				"id":0,
				"color": "",
				"flagImg": true,
				'textt':'风速'
			}],
			productList_in: [
				{
				"name":"上下摆风",
				"value": "windDe1",
				"data": "上下摆风",
				"icon":"./assets/img/windDe_1.png",
				"id":'',
				"color": "",
				"flagImg": true
			},{
				"name":"左右摆风",
				"value": "windDe2",
				"data": "左右摆风",
				"icon":"./assets/img/windDe_2.png",
				"id":'',
				"color": "",
				"flagImg": true
			},{
				"name":"电辅热",
				"value": "elecHeat",
				"data": "on",
				"icon":"./assets/img/elecHeat.png",
				"id":'',
				"color": "",
				"flagImg": true
			}],
			list:[],
			model:[
			{
				"name":"制冷",
				"value":"model_on_2",
				"icon":"./assets/img/modelimg_2.png",
				"color": ''
			},{
				"name":"制热",
				"value":"model_on_3",
				"icon":"./assets/img/modelimg_3.png",
				"color": ''
			},{
				"name":"送风",
				"value":"model_on_4",
				"icon":"./assets/img/modelimg_4.png",
				"color": ''
			},{
				"name":"除湿",
				"value":"model_on_5",
				"icon":"./assets/img/modelimg_5.png",
				"color": ''
			}],
			wind:[
				{
				'name':'静音风',
				'value':'wind_on_1',
				'icon':'./assets/img/wind_1.png',
				'color': ''
			},{
				'name':'低风',
				'value':'wind_on_2',
				'icon':'./assets/img/wind_2.png',
				'color': ''
			},{
				'name':'中风',
				'value':'wind_on_3',
				'icon':'./assets/img/wind_3.png',
				'color': ''
			},{
				'name':'高风',
				'value':'wind_on_4',
				'icon':'./assets/img/wind_4.png',
				'color': ''
			},{
				'name':'自动风',
				'value':'wind_on_5',
				'icon':'./assets/img/wind_5.png',
				'color': ''
			},{
				'name':'关',
				'value':'',
				'icon':'',
				'color': ''
			}],
			windDe:[
				{
				"name":"上下摆风",
				"value":"windDe_on_1",
				"icon":"./assets/img/windDe_1.png",
				"color": ''
			},{
				"name":"左右摆风",
				"value":"windDe_on_2",
				"icon":"./assets/img/windDe_2.png",
				"color": ''
			},{
				"name":"关",
				"value":"",
				"icon":"",
				"color": ''
			}],
			time:[],
			DBdata: ['power','mode','wind_speed','temperature','indoor_temperature','power_on_timer','power_on_time_value','power_off_timer',  'power_off_time_value','wind_swing_lr','wind_swing_ud','ptc'],
			dataLists: {},
			type_list: ['手动','固定风','自动'],
			content_list: [],
			selected_type: 1,
			selected_content: 2,
			baseData: {},
			windList: [],
			windIndex: 0,
			timeList: [],
			timeIndex: 0,
			timeText: '',
			tabContentShow: 1,
			windTypeSelect: 1,
			windTypeIndex: 1,
			switchFlag: false,
			timeValue: 1,
			params: {},
			accessToken: '',
			openId: ''
        },
		public: { 
            deviceId: '',
            deviceSeries: '',
			openid: '',
			windCache:'',
			windTypeCache:''
        },
		getDataItem(obj){
			let that = this;
			if(obj.value == 'wind'){
				return that.isopen;
			}else{
				if(obj.data == 'off'){
					return false;
				}else{
					return true;
				}
			}
		},
		
		showDialog(str,index){
			let that = this;
			let status = that.dataLists;
			// prompt.showToast({message:str+ ',showDialog,'+index})
			if(this.online == 'false' || !this.online){
				this.isshowclose();
				// prompt.showToast({message: '设备离线状态'})
			}else{
				var i = 0;
				let height = 300;
				that.closeDia = str;
				that.id = index;
				if(str === "open"){
					if(this.dataLists.power == 'off'){
						this.params = {
							power: 'on'
						}
						// this.productList[0].color=this.offColor
						this.productList[0].icon='./assets/img/on_off.png'
						// this.productList[1].color=this.onColor
						// this.productList[2].color=this.onColor
					}else{
						this.params = {
							power: 'off'
						}
						// this.productList[0].color=this.onColor
						this.productList[0].icon='./assets/img/on_off.png'
						// this.productList[1].color=this.offColor
						// this.productList[2].color=this.offColor

					}
					delete status.power;
					this.postDeviceControl(this.params,status);
				}else if(str == 'time') {
					that.popData(str,index);
				}else{
					if(that.isopen){
						if(str === "model"){
							that.popData(str,index);
						}else if(str == 'wind'){
							if(that.dataLists.mode == 'auto' || that.dataLists.mode == 'dry'){
								
								prompt.showToast({
									message: '除湿模式下不可设置风速'
								})
							}else{
								that.issmork = true;
								that.is_wind_dia = true;
								that.Height = "animate_S";
								// that.windPopDefault();
							}
						}else if(str == 'elecHeat'){
							if(that.dataLists.mode == 'auto' || that.dataLists.mode == 'heat'){
								if(this.dataLists.ptc == 'off'){
									this.params = {
										ptc: 'on'
									}
								}else{
									this.params = {
										ptc: 'off'
									}
								}
								delete status.ptc;
								this.postDeviceControl(this.params,status);
							}else{
								prompt.showToast({
									message: '制热模式下可设置'
								})
							}
						}else{
							
							switch (str){
								case 'windDe1':
									if(this.dataLists.wind_swing_ud == 'off'){
										this.params = {
											wind_swing_ud: 'on'
										}
									}else{
										this.params = {
											wind_swing_ud: 'off'
										}
									}
									delete status.wind_swing_ud;
									break;
								case 'windDe2':
									if(this.dataLists.wind_swing_lr == 'off'){
										this.params = {
											wind_swing_lr: 'on'
										}
									}else{
										this.params = {
											wind_swing_lr: 'off'
										}
									}
									delete status.wind_swing_lr;
									break;
								default:
									break;
							}
							this.postDeviceControl(this.params,status);
						}
					}else{
						prompt.showToast({message: '设备关机状态'})
					}
				}
			}
		},
		popData(str,index){
			var that = this;
			that.Height = "animate_S";
			for(let i = 0;i < that.list.length;i++){
				that.list[i].color = "";
			}
			switch(str){
				case "model":
					that.list = that.model;
					for(let i = 0;i < that.list.length;i++){
						that.list[i].icon = "./assets/img/modelimg_" + (i+1) + ".png"
					}
					that.list[that.productList[index].id].icon = "./assets/img/modelimg_on_" + (that.productList[index].id+1) + ".png";
					that.list[that.productList[that.id].id].color = "#3191FD";
					that.isdata = true;
				break;
				case "time":
					that.is_smork = true;
				break;
			}
			that.issmork = true;
		},
		closeDialog(bol){
			this.closeFun();
		},
		selectData(index){ //模式选择
			let that = this;
			let status = that.dataLists;
			let str = "";
			// prompt.showToast({message: that.windCache  + ",this.windIndex "+this.windTypeCache}) 
			if(that.closeDia === 'model'){
				str = "模式|";
			}
			let ismodel = true;
			if(that.closeDia === 'time'){
				if(that.isopen){
					if(index == 0){
						this.params = {
							power_off_timer: 'off',
							power_off_time_value: parseInt(index)*60
						}
					}else{
						this.params = {
							power_off_timer: 'on',
							power_off_time_value: parseInt(index)*60
						}
					}
					delete status.power_off_timer;
					delete status.power_off_time_value;
				}else{
					if(index == 0){
						this.params = {
							power_on_timer: 'off',
							power_on_time_value: parseInt(index)*60
						}
					}else{
						this.params = {
							power_on_timer: 'on',
							power_on_time_value: parseInt(index)*60
						}
					}
					delete status.power_on_timer;
					delete status.power_on_time_value;
				}
			}
			else{
				let wind_speed = ''
				if (this.windTypeCache === 0) { //手动
					if (this.windCache === 0) {
						wind_speed='sleep'
					}
					if (this.windCache === 1) {
						wind_speed='micron'
					}
					if (this.windCache === 2) {
						wind_speed='low'

					}
					if (this.windCache === 3) {
						wind_speed='middle'
					} 
					if (this.windCache === 4) {
						wind_speed='high'
					} 
					if (this.windCache === 5) {
						wind_speed='super_high'
					} 
					if (this.windCache === 6) {
						wind_speed='power'
					}	 
				}
				if (this.windTypeCache === 1||this.windCache==='auto') { //自动
					wind_speed='auto'
				}

				
				switch(index){
					// case 0:
					// 	that.params = {
					// 		mode: 'auto'
					// 	}
					// 	break;
					case 0:
						if(that.deviceModel === "auto"){
							that.params = {
								mode: 'cool'
							}
						}else{
							ismodel = false;
							that.params = {
								mode: 'cool',
								wind_speed: wind_speed
							}
						}
						break;
					case 1:
						if(that.deviceModel === "auto"){
							that.params = {
								mode: 'heat'
							}
						}else{
							ismodel = false;
							that.params = {
								mode: 'heat',
								wind_speed: wind_speed
							}
						}
						break;
					case 2:
						if(that.deviceModel === "auto"){
							that.params = {
								mode: 'fan'
							}
						}else{
							ismodel = false;
							that.params = {
								mode: 'fan',
								wind_speed: wind_speed
							}
						}
						break;
					case 3:
						this.params = {
							mode: 'dry',
							wind_speed:'auto'
						}
						break;
					default:
						break;
				}
				if(ismodel){
					delete status.mode;
				}else{
					delete status.mode;
					delete status.wind_speed;
				}
				
			}
			this.closeFun();
			this.postDeviceControl(this.params,status);
		},
		closeFun(){
			let that = this;
			that.Height = "animate_D";
			setTimeout(function(){
				that.is_smork = false;
				that.isdata = false;
				that.issmork = false;
				that.is_wind_dia = false;
			},400)
		},
		addData(bol){
			let that = this;
			let status = that.dataLists;
			if(that.online == 'false' || !that.online){
				that.isshowclose();
				return false;
			}
			if(bol){
				if(parseInt(this.dataLists.temperature)<30){
					if (that.productList[1].name == '模式|送风') {
						//送风模式不能调温
						prompt.showToast({message: '送风模式下无法设置温度'})
					} else {
						this.params = {
							temperature: parseInt(this.value)+1
						}
						delete status.temperature;
						this.postDeviceControl(this.params,status);
					}
					
				}else{
					prompt.showToast({message: '温度最高为30°C'})
				}
			}else{
				prompt.showToast({message: '设备关机状态'})
			}
		},
		delData(bol){
			let that = this;
			let status = that.dataLists;
			if(that.online == 'false' || !that.online){
				that.isshowclose();
				return false;
			}
			if(bol){
				if(parseInt(this.dataLists.temperature)>17){
					
					if (that.productList[1].name == '模式|送风') {
						//送风模式不能调温
						prompt.showToast({message: '送风模式下无法设置温度'})
					} else {
						//执行调温
						this.params = {
							temperature: parseInt(this.value)-1
						}
						delete status.temperature;
						this.postDeviceControl(this.params,status);
					}
				}else{
					prompt.showToast({message: '温度最低为17°C'})
				}
			}else{
				prompt.showToast({message: '设备关机状态'})
			}
		},
		//向上滑动
		swiperData(e){
			console.log(e)
		},
		//获取第三方登录信息
		getdevicelist(){
            this.isshowLoading = true
			let that = this
			account.authorize({
				type: 'code',
				success: function(data) {
                    let params = {
                        thirdUId: data.code,
                    }
                    api.getUserToken(params).then((res) => {
                        let data_accesstoken = res
                        if (data_accesstoken.code && data_accesstoken.code === 200) {
                            let result_data = (typeof data_accesstoken.data) === "object"?data_accesstoken.data:JSON.parse(data_accesstoken.data);
                            if (parseInt(result_data.code) === 0 && result_data.accessToken) {
                                that.accessToken = result_data.accessToken
								that.openid = result_data.openId
                                that.openId = result_data.openId
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								}
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function (data) {
										
									},
									fail: function (data, code) {
										
									}
								})
								that.LanOnlineGet();
                                that.getDeviceStatus();
                            } else {
								that.isRefreshing = false;
								that.isshowLoading = false;
								that.isfirst = true;
								that.netWorkGet(that.getCode(result_data.code,"获取访问令牌失败"))
                            }
                        } else {
							that.isRefreshing = false;
							that.isshowLoading = false;
							that.isfirst = true;
							that.netWorkGet('获取访问令牌失败,请稍后重试');
                        }
                    }).catch((error) => {
						console.log("获取访问令牌失败,请稍后重试")
						that.isfirst = true;
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.netWorkGet('获取访问令牌失败,请稍后重试')
                    })
				},
				fail: function(data, code) {
					that.isfirst = true;
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('授权失败,请稍后重试')
				}
			})
		},
		/**
		 * 联网获取
		 */
		getdataLan(res){
			let that = this;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.isfirst = true;
			let num = false;
			if(res.code === 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.code) && !parseInt(data.devices[0].status)){
					num = true;
					let obj = data.devices[0].properties;
					that.online = obj.online;
					if(that.online == 'false' || !that.online){
						that.isshowclose();
					}
			        that.dataFormat(obj);
				}else{
					that.initData();
					if(data.msg === ''){
						if(!num){
							let str1 = '';
							if(data.devices[0].status){
								str1 = data.devices[0].status;
								if(str1.toString() === '-6'){
									that.isshowclose();
									return false;
								}
								if(str1.toString() === '-100' && data.devices[0].description.toString() === '3123'){
									// that.netWorkGet('设备离线')
									that.isshowclose();
								}else{
									that.netWorkGet(api.getStatus("get",str1,'获取设备状态失败'))
								}
							}else{
								str1 = data.code;
								that.netWorkGet(api.getCode(str1,'获取设备状态失败'))
							}
							that.isRefreshing = false;
							that.isshowLoading = false;
						}
					}else{
						that.netWorkGet(data.msg)
					}
				}
			}else{
				that.initData();
				if(!num){
					that.isRefreshing = false;
					that.netWorkGet('获取设备状态失败,请稍后重试')
					that.isshowLoading = false;
				}
			}
		},
		/**
		 * 局域网获取
		 */
		getLanData(res){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.online = 'true';
				data.online = 'true';
				that.dataFormat(data);
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceStatus();
			}
		},
        //查询状态
		getDeviceStatus(){
            this.isshowLoading = true;
			let that = this;
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: that.DBdata
				}]
			}
			that.istips = false;
			// that.webSocketdata();
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
			}).catch((error,code) => {
				console.log("授权接口：error"+error+":::code"+code)
				if(error.online){
					that.isfirst = true;
					that.initData();
					if(!num){
						that.isRefreshing = false;
						that.netWorkGet('获取设备状态失败,请稍后重试')
						that.isshowLoading = false;
					}
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceStatus();
				}
			})
        },
		/**
		 * 局域网控制
		 */
		lanControl(res,obj1,status){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			that.isRefreshing = false;
			that.isshowLoading = false;
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				data.online = 'true';
				that.online = "true";
				that.dataFormat(data);
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(obj1, status);
			}
		},
		/**
		 * 广域网控制
		 */
		wlanControl(res){
			let that = this;
			if (res.code && res.code == 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(parseInt(data.code) == 0){
					if(!parseInt(data.devices[0].status)){
						// prompt.showToast({message:"SNH"+JSON.stringify(data),duration:1})
						let isall = false;
						let objdata = {};
						objdata.online = 'true';
						that.online = "true";
						let obj = typeof data.devices[0].props === 'object'? data.devices[0].props:JSON.parse(data.devices[0].props);
						if(obj.power){
							objdata.power = obj.power;
						}else{
							isall = true;
						}
						if(obj.mode){
							objdata.mode = obj.mode;
						}else{
							isall = true;
						}
						if(obj.wind_speed){
							objdata.wind_speed = obj.wind_speed;
						}else{
							isall = true;
						}
						if(obj.temperature){
							objdata.temperature = obj.temperature;
						}else{
							isall = true;
						}
						if(obj.indoor_temperature){
							objdata.indoor_temperature = obj.indoor_temperature;
						}else{
							isall = true;
						}
						if(obj.power_on_timer){
							objdata.power_on_timer = obj.power_on_timer;
						}else{
							isall = true;
						}
						if(obj.power_on_time_value){
							objdata.power_on_time_value = obj.power_on_time_value;
						}else{
							isall = true;
						}
						if(obj.power_off_timer){
							objdata.power_off_timer = obj.power_off_timer;
						}else{
							isall = true;
						}
						if(obj.power_off_time_value){
							objdata.power_off_time_value = obj.power_off_time_value;
						}else{
							isall = true;
						}
						if(obj.wind_swing_lr){
							objdata.wind_swing_lr = obj.wind_swing_lr;
						}else{
							isall = true;
						}
						if(obj.wind_swing_ud){
							objdata.wind_swing_ud = obj.wind_swing_ud;
						}else{
							isall = true;
						}
						if(obj.ptc){
							objdata.ptc = obj.ptc;
						}else{
							isall = true;
						}
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.dataFormat(objdata);
					}else{
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.initData();
						if(data.msg === ''){
							let str1 = '';
							if(data.devices[0].status){
								str1 = data.devices[0].status;
								if(str1.toString() === '-6'){
									that.isshowclose();
									return false;
								}
								if(str1.toString() === '-100' && data.devices[0].description.toString() === '3123'){
									// that.netWorkGet('设备离线')
									that.isshowclose();
								}else{
									that.netWorkGet(api.getStatus("post",str1,'操作设备失败'))
								}
							}else{
								str1 = data.code;
								that.netWorkGet(api.getCode(str1,'操作设备失败'))
							}
						}else{
							that.netWorkGet(data.msg)
						}
					}
				}else{
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.initData();
					let str1 = '';
					if (data.msg === '') {
						str1 = data.code;
						that.netWorkGet(api.getCode(str1, '操作设备失败'));
					}else{
						that.netWorkGet(data.msg);
					}
				}
			}else{
				that.isshowLoading = false;
				that.initData();
				that.isRefreshing = false;
				that.netWorkGet('操作设备失败,请稍后重试')
			}
		},
        //设备控制接口
    postDeviceControl(obj,status){
			// prompt.showToast({message: obj.wind_speed+'设备控制接口'+status})

            this.isshowLoading = true;
			let that = this;
			if(status.online){
				delete status.online
			}
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: obj,
					status:that.listDevice
					// status:status
				}]
			}
			console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				if(res.lanonline){
					that.wlanControl(res);
				}else{
					that.lanControl(res,obj,status)
				}
			}).catch((error) => {
				if(error.online){
					that.initData();
					that.isRefreshing = false;
					that.netWorkGet('操作设备失败,请稍后重试')
					that.isshowLoading = false;
				}else{
					that.isagain = false;
					that.lanOnline = 'false';
					that.postDeviceControl(obj, status);
				}
			})
		},
		//初始化数据
		initData(){
			this.isfirst = true;
			let obj = {
						'power': 'off',
						'mode': 'auto',
						'wind_speed': 'high',
						'temperature':'--',
						'indoor_temperature':'--',
						'power_on_timer':'off',
						'power_on_time_value':'--',
						'power_off_timer':'off',
						'power_off_time_value':'--',
						'wind_swing_lr':'off',
						'wind_swing_ud':'off',
						'ptc':'off'
					}
			this.dataFormat(obj);
		},
		//接口成功数据处理
		dataFormat(data){
			let that = this;
			that.deviceModel = data.mode;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.baseData = JSON.parse(JSON.stringify(data)); //复制一份数据，方便后续判断
			that.listDevice = data;
			that.dataLists = data;
			// prompt.showToast({message: data.wind_speed+'风速接口'+data.mode})
			if (!this.windCache||this.windCache==='') {
				// prompt.showToast({message: data.wind_speed+'风速接口22'+data.mode})
				if (data.wind_speed==='auto') {
					this.windCache = 'auto'
					this.windTypeCache = 1
				}else{
					this.windTypeCache = 0
					if (data.wind_speed === 'sleep') {
						this.windCache = 0
					}
					if (data.wind_speed === 'micron') {
						this.windCache=1
					}
					if (data.wind_speed === 'low') {
						this.windCache=2
					}
					if (data.wind_speed === 'middle') {
						this.windCache=3
					} 
					if (data.wind_speed === 'high') {
						this.windCache=4
					} 
					if (data.wind_speed === 'super_high') {
						this.windCache=5
					} 
					if (data.wind_speed === 'power') {
						this.windCache=6
					}	 
				}
			}
			
			if(that.online == 'true'){
				if(data.power == 'on'){
					
					// that.productList[0].color = that.offColor
					that.productList[0].icon = './assets/img/on_off.png';
					// that.productList[1].color = that.onColor
					// that.productList[2].color = that.onColor

					that.isopen = true;
					that.dataLists = data;
					that.value = data.temperature;
					//初始化风速图标显示
					that.productList[2].textt = that.wind_speedValueToString(data.wind_speed);
					that.humidity = data.indoor_temperature?data.indoor_temperature:'--';
					that.indoor = data.indoor_temperature?data.indoor_temperature:'--';
					that.switchMode(data.mode,'on');
					that.windBgcolor = '#3191FD';
					that.windcolor = '#ffffff';
					if(parseInt(data.wind_speed) == 102){
						that.productList[2].data = 'AUTO';
						that.windIndex = 0;
						that.windTypeIndex = 1;
						that.tabContentShow = 1;
					}else{
						that.productList[2].data = data.wind_speed;
						that.windIndex = that.windList.indexOf(parseInt(data.wind_speed));
						that.windTypeIndex = 0;
						that.tabContentShow = 0;
					}
					that.timeText = '定时关机';
					if(data.wind_swing_ud == 'off'){
						that.productList_in[0].icon = "./assets/img/windDe_1.png";
					}else{
						that.productList_in[0].icon = "./assets/img/windDe_on_1.png";
					}
					if(data.wind_swing_lr == 'off'){
						that.productList_in[1].icon = "./assets/img/windDe_2.png";
					}else{
						that.productList_in[1].icon = "./assets/img/windDe_on_2.png";
					}
					if(data.ptc == 'off'){
						that.productList_in[2].icon = "./assets/img/elecHeat.png";
					}else{
						that.productList_in[2].icon = "./assets/img/elecHeat_on.png";
					}
				}else{

					// that.productList[0].color = that.onColor
					that.productList[0].icon = './assets/img/on_off.png';
					that.productList[1].color = that.offColor
					that.productList[2].color = that.offColor

					that.defaultData(data);
					that.switchMode(data.mode,'off');

					that.timeText = '定时开机';
				}
			}else{
				// this.isshowclose();
				that.defaultData(data);
				that.fixed_time = `定时开：关`;
				that.timeBgcolor = "#ffffff";
				that.timecolor = "#666666";
				// that.productList[3].data = 'off';
				that.productList[1].icon = './assets/img/model_off_1.png';
				
			}
		},

		wind_speedValueToString(value){
			var a = {'sleep':'1档','micron':'2档','low':'3档','middle':'4档','high':'5档','super_high':'6档','power':'7档','auto':'自动'}
			return a[value]

		},
		netWorkGet(str){
			network.getType({
				success: function (data) {
					if(data.type === 'none'){
						prompt.showToast({
							message: str + "，请检查网络",
							duration:1
						}) 
					}else{
						prompt.showToast({
							message: str,
							duration:1
						}) 
					}
				}
			})
		},
		defaultData(data){
			this.isopen = false;
			this.value = '--';
			this.humidity = '--';
			this.indoor = '--';
			this.productList[1].icon = './assets/img/model_off_1.png';
			this.productList[2].data = '--';
			// this.productList[3].name = '定时开';
			this.productList_in[0].icon = './assets/img/windDe_off_1.png';
			this.productList_in[1].icon = './assets/img/windDe_off_2.png';
			this.productList_in[2].icon = './assets/img/elecHeat_off.png';
			this.windBgcolor = '#ffffff';
			this.windcolor = '#666666';
		},
		switchMode(mode,status){
			// prompt.showToast({message: mode + "，选择"+status,}) 
			switch (mode){
				case 'cool':
					this.productList[1].icon = `./assets/img/model_${status}_1.png`;
					this.productList[1].name = '模式|制冷'
					this.productList[1].color = '#627BFF'
					this.productList[2].color = '#627BFF'
					this.productList[1].id = 0;
					this.Color = '#627BFF'
					this.headColor = '#627BFF'
					break;
				case 'heat':
					this.productList[1].icon = `./assets/img/model_${status}_2.png`;
					this.productList[1].name = '模式|制热'
					this.productList[1].color = '#FF9500'
					this.productList[2].color = '#FF9500'
					this.productList[1].id = 1;
					this.Color = '#FF9500'
					this.headColor = '#FF9500'
					break;
				case 'fan':
					this.productList[1].icon = `./assets/img/model_${status}_3.png`;
					this.productList[1].name = '模式|送风'
					this.productList[1].color = '#3CCD55'
					this.productList[2].color = '#3CCD55'
					this.productList[1].id = 2;
					this.Color = '#3CCD55'
					this.headColor = '#3CCD55'
					
					break;
				case 'dry':
					this.productList[1].icon = `./assets/img/model_${status}_4.png`;
					this.productList[1].name = '模式|除湿'
					this.productList[1].color = '#5939CF'
					this.productList[2].color = '#5939CF'
					this.productList[1].id = 3;
					this.Color = '#5939CF'
					this.headColor = '#5939CF'
					break;
				default:
					break;
			}
		},
		windTypeSelect(index){ //风速类型选择
			this.windTypeIndex = index;
			this.tabContentShow = index;
			if(index == 1){
				this.params = {
					wind_speed: 102
				}
			}else{
				this.params = {
					wind_speed: this.baseData.wind_speed
				}
			}
		},
		windSelect(index){ //风速选择
			this.windIndex = index;
			
			// prompt.showToast({message: index + "index,"+this.windIndex}) 

		},
		windCancel(){
			this.closeFun();
		},
		windSure(evt){  //风速确定
			// prompt.showToast({message: this.windTypeIndex + "this.windTypeIndex"}) 
			this.windCache = this.windIndex;
			this.windTypeCache = this.windTypeIndex 
			if(this.windTypeIndex === 0){ //手动

				if (this.windIndex === 0) {
					this.params = {
						wind_speed:'sleep'
					}
					this.productList[2].textt = '1档'
				}
				if (this.windIndex === 1) {
					this.params = {
						wind_speed:'micron'
					}
					this.productList[2].textt = '2档'
				}
				if (this.windIndex === 2) {
					this.params = {
						wind_speed:'low'
					}
					this.productList[2].textt = '3档'

				}
				if (this.windIndex === 3) {
					this.params = {
						wind_speed:'middle'
					}
					this.productList[2].textt = '4档'
				} 
				if (this.windIndex === 4) {
					this.params = {
						wind_speed:'high'
					}
					this.productList[2].textt = '5档'
				} 
				if (this.windIndex === 5) {
					this.params = {
						wind_speed:'super_high'
					}
					this.productList[2].textt = '6档'
				} 
				if (this.windIndex === 6) {
					this.params = {
						wind_speed:'power'
					}
					this.productList[2].textt = '7档'
					
				}	 
				
			}
			if(this.windTypeIndex === 1){ //自动
				this.params = {
					wind_speed:'auto'
				}
				this.productList[2].textt = '自动'
			}


			
			let status = this.dataLists;
			delete status.wind_speed;
            this.postDeviceControl(this.params,status);
            this.closeFun();
		},
		setTimeCancel(evt){
			this.closeFun();
		},
		setTimeSure(evt){
			let that = this;
			let status = that.dataLists;
			if(this.isopen){
				if(evt.detail.flag){
					this.params = {
						power_off_timer: 'on',
						power_off_time_value: parseInt(evt.detail.data)*60
					}
				}else{
					this.params = {
						power_off_timer: 'off',
						power_off_time_value: 0
					}
				}
				delete status.power_off_timer;
				delete status.power_off_time_value;
			}else{
				if(evt.detail.flag){
					this.params = {
						power_on_timer: 'on',
						power_on_time_value: parseInt(evt.detail.data)*60
					}
				}else{
					this.params = {
						power_on_timer: 'off',
						power_on_time_value: 0
					}
				}
				delete status.power_on_timer;
				delete status.power_on_time_value;
			}
			
            this.postDeviceControl(this.params,status);
            this.closeFun();
		},
		isshowclose(){
			let that = this;
			if(that.timeTips != ''){
				that.istips = false;
				clearTimeout(that.timeTips)
			}
			that.istips = true;
			that.timeTips = setTimeout(() => {
				that.istips = false;
			},3000)
		},
		refreshData(e){
			let that = this;
			that.isRefreshing = e.refreshing;
			let timestamp = Date.parse(new Date());
			if(that.isfirst){
				that.isshowLoading = true;
				storage.get({
					key: 'openidToken',
					success: function (data) {
						// prompt.showToast({message:"data"+JSON.stringify(data)})
						if(data === ''){
							that.getdevicelist();
						}else{
							let obj = JSON.parse(data);
							if(parseInt(timestamp) > parseInt(obj.time)){
								that.getdevicelist();
							}else{
								if(obj.openid === that.openid){
									that.openId = obj.openid;
									that.accessToken = obj.accessToken;
									if(!that.isLanInit){
										that.LanOnlineGet();
									}
									that.getDeviceStatus();
								}else{
									that.getdevicelist();
								}
							}
						}
						console.log('handling success')
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			}
			
        },
		gettime(){
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		//websocket
		webSocketdata() {
					let that = this;
					api.createWensocket(that.deviceId).then((ws) => {
						that.ws = ws;
						that.isws = true;
						ws.onopen = function() {
							console.log("websocket连接成功")
						}
						ws.onerror = function(data) {
							// 连接失败
							//失败之后再重启
							that.webSocketdata();
							console.log('websocket连接失败');
						}
						ws.onmessage = function(res) {

							let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
							let objdata = {};
							if(obj.status.online){
								objdata.online = obj.status.online;
								that.online = obj.status.online;
							}else{
								objdata.online = "true";
								that.online = "true";
							}
							if(obj.status.power){
								objdata.power = obj.status.power;
							}
							if(obj.status.mode){
								objdata.mode = obj.status.mode;
							}
							if(obj.status.wind_speed){
								objdata.wind_speed = obj.status.wind_speed;
							}
							if(obj.status.temperature){
								objdata.temperature = obj.status.temperature;
							}
							if(obj.status.indoor_temperature){
								objdata.indoor_temperature = obj.status.indoor_temperature;
							}
							if(obj.status.power_on_timer){
								objdata.power_on_timer = obj.status.power_on_timer;
							}
							if(obj.status.power_on_time_value){
								objdata.power_on_time_value = obj.status.power_on_time_value;
							}
							if(obj.status.power_off_timer){
								objdata.power_off_timer = obj.status.power_off_timer;
							}
							if(obj.status.power_off_time_value){
								objdata.power_off_time_value = obj.status.power_off_time_value;
							}
							if(obj.status.wind_swing_lr){
								objdata.wind_swing_lr = obj.status.wind_swing_lr;
							}
							if(obj.status.wind_swing_ud){
								objdata.wind_swing_ud = obj.status.wind_swing_ud;
							}
							if(obj.status.ptc){
								objdata.ptc = obj.status.ptc;
							}
						}
						ws.onclose = function() {
							// 关闭 websocket
							// 关闭之后再重启
							if(!that.isclosews){
								that.webSocketdata();
							}
							console.log("websocket连接已关闭...")
						};
					});
		},
		onclickFn(e){
			this.isabout = false;
		},
		closeWebsocket(e){
			let that = this;
			that.isclosews = true;
			if(that.ws != ''){
				that.ws.close({
					code: 1000,
					reason: '退出关闭',
					success: function() {
						that.ws = '';
						console.log("关闭websocket成功")
					},
					fail: function(data, code) {
						console.log("关闭websocke失败, code = "+JSON.stringify(code))
					}
				})
			}
		},
		/**
		 * 局域网初始化
		 */
		LanOnlineGet(){
			let that = this;
			net.deviceInit(that.accessToken,that.deviceId).then((res) => {
				that.isLanInit = true;
			}).catch((error) => {
				that.isLanInit = false;
			});
		},
		onHide(){
			let that = this;
			that.istips = false;
			that.closeWebsocket();
		},
		onShow(){
			let that = this;
			that.isclosews = false;
			if(that.ws === '' && that.isws){
				// that.webSocketdata();
			}
		},
		onBackPress () {
			let that = this;
			that.closeWebsocket();
			router.clear();
			this.$app.exit();
		},
		onInit(){
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			let that = this;

			device.getInfo({
				success: function(ret) {
					console.log(`handling success， brand = ${ret.brand}`);
					console.log("屏幕高度："+ret.screenHeight);
					that.deviceHeight = ret.screenHeight;
				}
			})
			// console.log()
			router.clear();
			that.$page.setTitleBar({ text: '中央空调' })
			for(let i=1;i<25;i++){
				that.timeList.push(i);
			}
			that.$on('cancel', function(e){
				that.isabout = false;
			})
			that.$on('closetips', function(e){
				that.istips = false;

			})
			that.$on('openmenu', function(e){
				that.isabout = !that.isabout;
			})	
			that.windList.push('1档','2档','3档','4档','5档','6档','7档');
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function (data) {
					if(data === ''){
						that.getdevicelist();
					}else{
						let obj = JSON.parse(data);
						if(parseInt(timestamp) > parseInt(obj.time)){
							that.getdevicelist();
						}else{
							if(obj.openid === that.openid){
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								that.LanOnlineGet();
								that.getDeviceStatus();
							}else{
								that.getdevicelist();
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		},
		onMenuPress(){
			this.isabout = !this.isabout;
		},
		onCreate () {
			console.log('onCreate perform')
		},
    }
</script>
