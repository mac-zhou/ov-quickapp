<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-logo" src="../Component/MideaLogo/index"></import>
<import name="midea-time" src="../Component/MideaTime/index"></import>
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>

<template>
  <div class="container">
		<midea-head title="暖家" language="{{language}}" onclose-websocket="closeWebsocket" power="{{isopen?'on':'off'}}" isnew="{{false}}" coloron="{{headColor}}"></midea-head>
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="refreshData" refreshing="{{isRefreshing}}">
			<list onscrollbottom="" onscroll="" style="background-color: {{isopen?Color:bgColor}};">
				<list-item type="refresh" class="wrap">
					<midea-logo isopen="{{isopen}}"></midea-logo>
					<div class="nav_data_show">
						<div class="nav_data nav_data2">
							<text class="nav_data_text2" if="{{!language}}" style="color: {{isopen?bgCo:dataColor}};">°C</text>
							<text class="nav_data_text" style="color: {{isopen?bgCo:dataColor}};">{{temp_set}}</text>
							<text class="nav_data_text2" if="{{language}}" style="color: {{isopen?bgCo:dataColor}};">°C</text>
						</div>
					</div>
					<div class="nav_tip_show">
						<text class="nav_data">
							<span class="nav_data_tip" style="color: {{isopen?bgCo:dataColor}};">{{isopen?'设定温度':'已关机'}}</span>
						</text>
					</div>
					<div class="nav_tip_show_1">
						<text class="nav_data">
							<span class="nav_data_tip" style="color: {{isopen?bgCo:dataColor}};">当前水温:{{isopen?cur_temp:'-'}}°C</span>
						</text>
					</div>
					<div class="nav_tip_show_2">
						<text class="nav_data">
							<span class="nav_data_tip" style="color: {{isopen?bgCo:dataColor}};">模式: {{mode}}</span>
						</text>
					</div>
					<div class="nav_btn">
						<image class="{{language?'nav_del_data':'nav_del_data_in'}}" src="{{isopen?'./assets/img/del.png':'./assets/img/del2.png'}}" @click="delData(isopen)"></image>
						<image class="{{language?'nav_del_data_in':'nav_del_data'}}" src="{{isopen?'./assets/img/add.png':'./assets/img/add2.png'}}" @click="addData(isopen)"></image>
					</div>
						<!--用于显示接口返回start  -->
					<!-- <div class="api">
							<text>{{testData}}</text>
					</div> -->
					<!-- 用于显示接口返回end -->
				</list-item>    
			</list>
		</refresh>
			
			<!-- 底部按钮 -->
			<div class="control" @swipe="swiperData({direction:[up]})">
				<div class="tabs">
					<div class="tabs_in" for="productList" @click="showDialog($item.value,$idx)">

						<div class="ctrl" style="background-color:{{isopen?$item.color:'#fff'}}; border-width: {{!$item.isBorder||footBtnIndex=='$inx'?'0':'3px'}};border-style:solid;border-color: {{isopen||$item.name=='开关'?'#d5d5d5':'#f3f3f3'}};">
							<text class="text_in" style="color: {{isopen?'#5D75F6':'#C1C1C1'}}" if="{{$item.textt != ''}}">{{$item.textt}}</text>
							<image class="img" else="{{$item.flagImg}}" src="{{$item.icon}}"></image>
						</div>
						<div class="nav_icon">
							<text class="text" style="color: #000;opacity: {{isopen||$item.name=='开关'?'1':'0.3'}};">
								{{$item.nameNew}}
							</text>
						</div>

					</div>
				</div>
			</div>
			
			<!-- 模式选择弹窗 -->
			<div class="selectDta" if="{{issmork}}" @click="closeDialog()"></div>
			<!-- isdata -->
			<div class="data_select {{Height}}" if="{{isdata}}"> 
				<div class="modeSelect">
					<div class="mSelectLeft">
						<image style="width: 150px;height: 150px" src="./assets/img/modelimg_on_{{modeIndex+1}}.png"></image>
					</div>
					<div class="mSelectRight">
						<block for="model">	
							<div class="nav_add_show item" @click="selectData($idx)">
								<text class="data_text {{modeIndex==$idx?'curColor':''}}">
									<span>{{$item.name}}</span>
								</text>
								<image class="img-icon {{modeIndex==$idx?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>

							</div>
						</block>
					</div>
				</div>
				
				<div class="btn-grounp">
					<text class="btn btn-cancel" @click="windCancel">取消</text>
					<text class="btn btn-sure" @click="modeSure">确定</text>
				</div>
			</div>

			<div class="data_dia" style="top:{{(deviceHeight-1000)/2}}px" if="{{is_smork}}">
                <midea-time language="{{language}}" flag="{{switchFlag}}" list-data="{{timeList}}" time-value="{{timeValue}}" hight-color="#3191FD" default-color="#CCCCCC" selected-index="{{timeIndex}}" text="{{timeText}}" oncancel-evt="setTimeCancel" onsure-evt="setTimeSure"></midea-time>
			</div>
			<div class="wind_dia {{Height}}" if="{{is_wind_dia}}">
				<div class="windtabs">
					<div class="tabbar">
						<div class="tabbar-section" @click="windTypeSelect(0)">
							<text class="txt {{windTypeIndex==0?'curColor':''}}">手动</text>
							<image class="img-icon {{windTypeIndex==0?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
						</div>
						<div class="tabbar-section"  @click="windTypeSelect(1)">
							<text class="txt {{windTypeIndex==1?'curColor':''}}">自动</text>
							<image class="img-icon {{windTypeIndex==1?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
					<div class="tabcontent">
						<div class="tabcontent-section" show="{{tabContentShow === 0}}">
							<list class="list-wind">
								<block for="windList">
									<list-item type="wind-speed" class="wind-item" @click="windSelect($idx)">
										<text class="txt {{windIndex==$idx?'curColor':''}}">{{$item}}</text>
										<image class="img-icon {{windIndex==$idx?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
									</list-item>
								</block>
							</list>
						</div>
						<div class="tabcontent-section" show="{{tabContentShow === 1}}">
							<text class="txt2 curColor">自动风</text>
							<image class="img-icon img-icon2" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
				</div>
				<div class="btn-grounp">
					<text class="btn btn-cancel" @click="windCancel">取消</text>
					<text class="btn btn-sure" @click="windSure">确定</text>
				</div>
			</div>
        <!-- </div> -->
		<midea-loading if="{{isshowLoading}}"></midea-loading>
		<midea-tips if="{{istips}}"></midea-tips>
  </div>
</template>

<style>
    @import "./assets/index.css";
</style>

<script>
/* eslint-disable indent */
import router from '@system.router'
import prompt from '@system.prompt'
import account from '@service.account'
import storage from '@system.storage'
import device from '@system.device'
import api from '../Common/api/api.js'
import network from '@system.network'
import net from '../Common/api/networkAPI.js'
	
  module.exports = {
		private: {
			onColor:'#FFF',
			offColor:'#FFF',
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			ws: '',
			isws: false,
			isclosews: false,
			language:true,
			deviceHeight:0,
			istips: false,
			isabout: false,
			isshowLoading: false,
			config_network: '',
			online:'false',
			id: '',
			isfirst:false,
			dataHeight: 'height: 600px',
			humidity:'--',
			indoor: '--',
			value: '--',
			value1: '---',
			type1:'水温', //当前温度类型
			fixed_time: '',
			bgColor: '#CCCCCC',
			dataColor: '#666666',
			Color: '#FF0000',
			bgCo: '#ffffff',
			headColor:'#627BFF',
			isopen: false,
			issmork: false,
			isdata: false,
			is_smork: false,
			is_wind_dia: false,
			date: true,
			closeDia: '',
			Height: '',
			deviceModel:'',
			timeBgcolor: '#ffffff',
			windBgcolor: '#ffffff',
			timecolor: '#000000',
			windcolor: '#666666',
			time_cishu: 0,
			listDevice: {},
			productList: [
				{
					'name':'开关',
					'nameNew':'开关',
					'value': 'open',
					'data':'开关',
					'icon':'./assets/img/on_off.png',
					'id':0,
					'color': '',
					'flagImg': true,
					'textt':'',
					'isBorder':true
				},
				{
					'name':'模式',
					'nameNew':'模式',
					'value':'model',
					'data': '模式|制冷',
					'icon':'./assets/img/model_off_2.png',
					'id':1,
					'color': '',
					'flagImg': true,
					'textt':'',
					'isBorder':true
				},
				{
					'name':'辅热',
					'nameNew':'辅热',
					'value':'elecHeat',
					'data': '辅热',
					'icon':'./assets/img/elecHeat_off_1.png',
					'id':2,
					'color': '',
					'flagImg': true,
					'textt':'',
					'isBorder':true
				}
			],
			productList_in: [
				{
				'name':'上下摆风',
				'value': 'windDe1',
				'data': '上下摆风',
				'icon':'./assets/img/windDe_1.png',
				'id':'',
				'color': '',
				'flagImg': true
			},{
				'name':'左右摆风',
				'value': 'windDe2',
				'data': '左右摆风',
				'icon':'./assets/img/windDe_2.png',
				'id':'',
				'color': '',
				'flagImg': true
			},{
				'name':'电辅热',
				'value': 'elecHeat',
				'data': 'on',
				'icon':'./assets/img/elecHeat.png',
				'id':'',
				'color': '',
				'flagImg': true
			}],
			list:[],
			model:[
			{
				'name':'制冷',
				'value':'model_on_2',
				'icon':'./assets/img/modelimg_2.png',
				'color': ''
			},{
				'name':'制热',
				'value':'model_on_3',
				'icon':'./assets/img/modelimg_3.png',
				'color': ''
			},{
				'name':'自动',
				'value':'model_on_4',
				'icon':'./assets/img/modelimg_4.png',
				'color': ''
			}],
			wind:[
				{
				'name':'静音风',
				'value':'wind_on_1',
				'icon':'./assets/img/wind_1.png',
				'color': ''
			},{
				'name':'低风',
				'value':'wind_on_2',
				'icon':'./assets/img/wind_2.png',
				'color': ''
			},{
				'name':'中风',
				'value':'wind_on_3',
				'icon':'./assets/img/wind_3.png',
				'color': ''
			},{
				'name':'高风',
				'value':'wind_on_4',
				'icon':'./assets/img/wind_4.png',
				'color': ''
			},{
				'name':'自动风',
				'value':'wind_on_5',
				'icon':'./assets/img/wind_5.png',
				'color': ''
			},{
				'name':'关',
				'value':'',
				'icon':'',
				'color': ''
			}],
			windDe:[
				{
				'name':'上下摆风',
				'value':'windDe_on_1',
				'icon':'./assets/img/windDe_1.png',
				'color': ''
			},{
				'name':'左右摆风',
				'value':'windDe_on_2',
				'icon':'./assets/img/windDe_2.png',
				'color': ''
			},{
				'name':'关',
				'value':'',
				'icon':'',
				'color': ''
			}],
			time:[],
			DBdata: ['pre_heat','power_state','run_mode','wind_speed','temp_set','indoor_temperature','power_on_timer','power_on_time_value','power_off_timer',  'power_off_time_value','wind_swing_lr','wind_swing_ud','ptc'],
			dataLists: {},
			type_list: ['手动','固定风','自动'],
			content_list: [],
			selected_type: 1,
			selected_content: 2,
			baseData: {},
			windList: [],
			windIndex: 0,
			timeList: [],
			timeIndex: 0,
			timeText: '',
			tabContentShow: 1,
			windTypeSelect: 1,
			windTypeIndex: 1,
			switchFlag: false,
			timeValue: 1,
			params: {},
			accessToken: '',
			openId: '',
			testData:'fsdfsdf'
		},
		public: { 
			deviceId: '',
			deviceSeries: '',
			openid: '',
			footBtnIndex:null, //底部按钮选择索引
			modeIndex:0, //风速选择索引
			allBgColorOn: "#627BFF",//全屏背景色
			mode:'--', //模式
			cur_temp:'-', //当前温度值
			temp_set:'--', //设定温度值
			coolTemp:'',
			heatTemp:'',
			autoTemp:'',
			isRefesh:false //是否刷新数据
		},
		getDataItem(obj){
			let that = this;

			if(obj.value == 'wind'){
				return that.isopen;
			}else{
				if(obj.data == 'off'){
					return false;
				}else{
					return true;
				}
			}
		},
		showDialog(str,index){
			let that = this;
			let status = that.dataLists;
			if(this.online == 'false' || !this.online){
				this.isshowclose();
			}else{
				var i = 0;
				let height = 300;
				that.closeDia = str;
				that.id = index;
				that.footBtnIndex = index
				if(str === "open"){
					if(this.dataLists.power_state == 'off'){
						this.params = {
							power_state: 'on'
						}
					}else{
						this.params = {
							power_state: 'off'
						}
					}
					delete status.power_state;
					this.postDeviceControl(this.params,status);
				}else if(str == 'time') {
					that.popData(str,index);
				}else{
					if(that.isopen){
						if(str === "model"){
							that.popData(str,index)
						}else if(str == 'elecHeat'){ //选择辅热
							if (this.dataLists.run_mode == 'heat') {
								if (this.dataLists.pre_heat === 'on') {
									this.params = {
										pre_heat: 'off'
									}
								}else{
									this.params = {
										pre_heat: 'on'
									}
								}
								delete status.pre_heat;
								this.postDeviceControl(this.params,status);
								prompt.showToast({message: '电辅热指令已发送'})

							}else{
								prompt.showToast({message: '当前模式不可设置辅热'})
							}
						}
					}else{
						prompt.showToast({message: '设备关机状态'})
					}
				}
			}
		},
		popData(str,index){
			var that = this;
			that.Height = "animate_S";
			for(let i = 0;i < that.list.length;i++){
				that.list[i].color = "";
			}
			switch(str){
				case "model":
					that.isdata = true;
				break;
				case "time":
					that.is_smork = true;
				break;
			}
			that.issmork = true;
		},
		closeDialog(){
			this.closeFun()
		},
		selectData(index){
			this.modeIndex = index
		},
		modeSure(){
			let that = this;
			let status = that.dataLists;
		
				switch(this.modeIndex){
					case 0:
						if (this.baseData.run_mode!=='cool') {
							that.params = {
								run_mode: 'cool',
								temp_set:this.coolTemp
							}
							if (this.coolTemp) {
								that.params = {
									run_mode: 'cool',
									temp_set:this.coolTemp
								}
							}else{
								that.params = {
									run_mode: 'cool',
								}
								this.isRefesh = true
							}
						}else{
							this.closeFun()
							return
						}
						
						break;
					case 1:
						if (this.baseData.run_mode!=='heat') {
							that.params = {
								run_mode: 'heat',
								temp_set:this.heatTemp
								// "controltype": "1",
								// "power_state": "on",
								// "run_mode": "heat",
								// "temp_set": "28",
								// "pre_heat": "not_used"
							}
							if(this.heatTemp){
								that.params = {
									run_mode: 'heat',
									temp_set:this.heatTemp
								}
							}else{
								that.params = {
									run_mode: 'heat'
								}
								this.isRefesh = true
							}

						}else{
							this.closeFun()
							return
						}
						
						break;
					case 2:
						if (this.baseData.run_mode!=='auto') {
							
							if (this.autoTemp) {
								that.params = {
									run_mode: 'auto',
									temp_set:this.autoTemp	
								}
							} else {
								that.params = {
									run_mode: 'auto',
								}
								this.isRefesh = true
							}
						}else{
							this.closeFun()
							return
						}
						break;
					default:
						break;
				}
				
	
			this.closeFun();
			this.postDeviceControl(this.params,status);
		},
		closeFun(){
			let that = this;
			that.Height = "animate_D";
			setTimeout(function(){
				that.is_smork = false;
				that.isdata = false;
				that.issmork = false;
				that.is_wind_dia = false;
			},400)
		},
		addData(bol){
			let that = this
			let status = that.dataLists
			if(that.online == 'false' || !that.online){
				that.isshowclose()
				return false
			}
			if(bol){
				let result = parseInt(this.temp_set)
				if (this.baseData.run_mode === 'heat') { //制热模式水温范围 25-55
					if (result<this.baseData.heat_max_set_temp) { //this.baseData.heat_max_set_temp
						this.params = {
							temp_set: String(result+1),
							run_mode:this.baseData.run_mode
						}
					} else {
						prompt.showToast({message: '制热最高温度'+this.baseData.heat_max_set_temp+'度'})
						return
					}
				}
				if (this.baseData.run_mode === 'cool') { //制冷模式水温范围 5-25
					if (result<this.baseData.cool_max_set_temp) { //this.baseData.cool_max_set_temp
						this.params = {
							temp_set: result+1
						}
					} else {
						prompt.showToast({message: '制冷最高温度'+this.baseData.cool_max_set_temp+'度'})
						return
					}
				}
				if (this.baseData.run_mode === 'auto') { //自动模式水温范围 5-25
					if (result<this.baseData.auto_max_set_temp) { //this.baseData.auto_max_set_temp
						this.params = {
							temp_set: result+1
						}
					} else {
						prompt.showToast({message: '自动最高温度'+this.baseData.auto_max_set_temp+'度'})
						return
					}
				}
				delete status.temp_set
				this.postDeviceControl(this.params,status)				
			}else{
				prompt.showToast({message: '设备关机状态'})
			}
		},
		delData(bol){
			let that = this
			let status = that.dataLists
			if(that.online == 'false' || !that.online){
				that.isshowclose()
				return false
			}
			if(bol){
				let result = parseInt(this.temp_set)
				if (this.baseData.run_mode === 'heat') { //制热模式水温范围 25-55
					if (result>this.baseData.heat_min_set_temp) { //this.baseData.heat_min_set_temp
						this.params = {
							temp_set: result-1,
							run_mode:this.baseData.run_mode
						}
					} else {
						prompt.showToast({message: '制热最低温度'+this.baseData.heat_min_set_temp+'度'})
						return
					}
				}
				if (this.baseData.run_mode === 'cool') { //制冷模式水温范围 5-25
					if (result>this.baseData.cool_min_set_temp) { //this.baseData.cool_min_set_temp
						this.params = {
							temp_set: result-1
						}
					} else {
						prompt.showToast({message: '制冷最低温度'+this.baseData.cool_min_set_temp+'度'})
						return
					}
				}
				if (this.baseData.run_mode === 'auto') { //自动模式水温范围 5-25
					if (result>this.baseData.auto_min_set_temp) { //this.baseData.auto_min_set_temp
						this.params = {
							temp_set: result-1
						}
					} else {
						prompt.showToast({message: '自动最低温度'+this.baseData.auto_min_set_temp+'度'})
						return
					}
				}
			
				delete status.temp_set
				this.postDeviceControl(this.params,status)
				// this.getDeviceStatus()
			}else{
				prompt.showToast({message: '设备关机状态'})
			}
		},
		swiperData(e){
			console.log(e)
		},
		getdevicelist(){
      this.isshowLoading = true
			let that = this
			account.authorize({
				type: 'code',
				success: function(data) {
                    let params = {
                        thirdUId: data.code,
                    }
                    api.getUserToken(params).then((res) => {
                        let data_accesstoken = res
                        if (data_accesstoken.code && data_accesstoken.code === 200) {
                            let result_data = (typeof data_accesstoken.data) === "object"?data_accesstoken.data:JSON.parse(data_accesstoken.data);
                            if (parseInt(result_data.code) === 0 && result_data.accessToken) {
                                that.accessToken = result_data.accessToken
								that.openid = result_data.openId
                                that.openId = result_data.openId
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								}
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function (data) {
									},
									fail: function (data, code) {
									}
								})
								that.LanOnlineGet();
                                that.getDeviceStatus();
                            } else {
								that.isRefreshing = false;
								that.isshowLoading = false;
								that.isfirst = true;
								that.netWorkGet(that.getCode(result_data.code,"获取访问令牌失败"))
                            }
                        } else {
							that.isRefreshing = false
							that.isshowLoading = false
							that.isfirst = true
							that.netWorkGet('获取访问令牌失败,请稍后重试')
                        }
                    }).catch((error) => {
						console.log("获取访问令牌失败,请稍后重试")
						that.isfirst = true;
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.netWorkGet('获取访问令牌失败,请稍后重试')
                    })
				},
				fail: function(data, code) {
					that.isfirst = true;
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('授权失败,请稍后重试')
				}
			})
		},
		getdataLan(res){
			let that = this;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.isfirst = true;
			let num = false;
			if(res.code === 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.code) && !parseInt(data.devices[0].status)){
					num = true;
					let obj = data.devices[0].properties;
					that.online = obj.online;
					if(that.online == 'false' || !that.online){
						that.isshowclose()
					}
					that.dataFormat(obj)
				}else{
					that.initData()
					if(data.msg === ''){
						if(!num){
							let str1 = ''
							if(data.devices[0].status){
								str1 = data.devices[0].status
								if(str1.toString() === '-6'){
									that.isshowclose()
									return false
								}
								if(str1.toString() === '-100' && data.devices[0].description.toString() === '3123'){
									that.isshowclose()
								}else{
									that.netWorkGet(api.getStatus("get",str1,'获取设备状态失败'))
								}
							}else{
								str1 = data.code
								that.netWorkGet(api.getCode(str1,'获取设备状态失败'))
							}
							that.isRefreshing = false
							that.isshowLoading = false
						}
					}else{
						that.netWorkGet(data.msg)
					}
				}
			}else{
				that.initData()
				if(!num){
					that.isRefreshing = false;
					that.netWorkGet('获取设备状态失败,请稍后重试')
					that.isshowLoading = false;
				}
			}
		},
		getLanData(res){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.online = 'true';
				data.online = 'true';
				that.dataFormat(data);
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceStatus();
			}
		},
		getDeviceStatus(){
      this.isshowLoading = true
			let that = this
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: that.DBdata
				}]
			}
			that.istips = false
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true'
			}else{
				that.lanOnline = 'false'
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				if(res.lanonline){
					that.getdataLan(res)
				}else{
					that.getLanData(res)
				}
			}).catch((error,code) => {
				console.log("授权接口：error"+error+":::code"+code)
				if(error.online){
					that.isfirst = true;
					that.initData();
					if(!num){
						that.isRefreshing = false;
						that.netWorkGet('获取设备状态失败,请稍后重试')
						that.isshowLoading = false;
					}
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceStatus();
				}
			})
        },
		lanControl(res,obj1,status){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			that.isRefreshing = false;
			that.isshowLoading = false;
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				data.online = 'true';
				that.online = "true";
				that.dataFormat(data);
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(obj1, status);
			}
		},
		wlanControl(res){
			let that = this;
			if (res.code && res.code == 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(parseInt(data.code) == 0){
					if(!parseInt(data.devices[0].status)){
						let isall = false;
						let objdata = {};
						objdata.online = 'true';
						that.online = "true";
						let obj = typeof data.devices[0].props === 'object'? data.devices[0].props:JSON.parse(data.devices[0].props);
						objdata = {...obj}
						
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.dataFormat(objdata);
					}else{
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.initData();
						if(data.msg === ''){
							let str1 = '';
							if(data.devices[0].status){
								str1 = data.devices[0].status;
								if(str1.toString() === '-6'){
									that.isshowclose();
									return false;
								}
								if(str1.toString() === '-100' && data.devices[0].description.toString() === '3123'){
									that.isshowclose();
								}else{
									that.netWorkGet(api.getStatus("post",str1,'操作设备失败'))
								}
							}else{
								str1 = data.code;
								that.netWorkGet(api.getCode(str1,'操作设备失败'))
							}
						}else{
							that.netWorkGet(data.msg)
						}
					}
				}else{
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.initData();
					let str1 = '';
					if (data.msg === '') {
						str1 = data.code;
						that.netWorkGet(api.getCode(str1, '操作设备失败'));
					}else{
						that.netWorkGet(data.msg);
					}
				}
			}else{
				that.isshowLoading = false;
				that.initData();
				that.isRefreshing = false;
				that.netWorkGet('操作设备失败,请稍后重试')
			}
		},
		postDeviceControl(obj,status){
			console.log(JSON.stringify(obj),'接口入参');
			
			this.isshowLoading = true;
			let that = this;
			if(status.online){
				delete status.online
			}
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: obj,
					status:that.listDevice
				}]
			}
			console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				if(res.lanonline){
					that.wlanControl(res);
				}else{
					that.lanControl(res,obj,status)
				}
			}).catch((error) => {
				if(error.online){
					that.initData();
					that.isRefreshing = false;
					that.netWorkGet('操作设备失败,请稍后重试')
					that.isshowLoading = false;
				}else{
					that.isagain = false;
					that.lanOnline = 'false';
					that.postDeviceControl(obj, status);
				}
			})
		},
		initData(){
			this.isfirst = true;
			let obj = {
						'power_state': 'off',
						'run_mode': 'cool'
					}
			this.dataFormat(obj);
		},
		/*接口调用*/
		dataFormat(data){
			let that = this;
			that.deviceModel = data.run_mode;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.baseData = JSON.parse(JSON.stringify(data)); 
			that.listDevice = data;
			that.dataLists = data;
			that.testData = JSON.stringify(data) //显示接口返回用
			console.log('返回成功参数',that.testData);
			
			if(that.online == 'true'){
				if(data.power_state == 'on'){
					that.isopen = true;
					// that.temp_set = data.temp_set //设定温度
					// that.cur_temp = data.cur_temp?data.cur_temp:'--'; //当前温度
					if (data.temp_type == 'water_temperature') {
						that.type1 = '水温'
					}
					if (data.temp_type == 'air_temperature') {
						that.type1 = '气温'
					}
					if (that.isRefesh) { //没有缓存时刷新获取线控器的温度值
						that.refreshData()
					}else{
						that.temp_set = data.temp_set //设定温度
						that.cur_temp = data.cur_temp?data.cur_temp:'--'; //当前温度
						if (data.run_mode === 'cool') {
							that.mode = '制冷'
							that.allBgColorOn = '#267AFF'
							that.modeIndex = 0
							that.coolTemp = data.temp_set //缓存温度
						}else if(data.run_mode === 'heat'){
							that.mode = '制热'
							that.allBgColorOn = '#FFA800'
							that.modeIndex = 1
							that.heatTemp = data.temp_set
						}else{
							that.mode = '自动'
							that.allBgColorOn = '#267AFF'
							that.modeIndex = 2
							that.autoTemp = data.temp_set
						}
						that.switchMode(data.run_mode,'on');
					}
					that.isRefesh = false
					if (data.pre_heat === 'on') { //辅热
						that.productList[2].icon = './assets/img/elecHeat_on.png';
						that.productList[2].color = that.allBgColorOn;
						that.productList[2].isBorder = false;
					}else{
						that.productList[2].icon = './assets/img/elecHeat_on_1.png';
						that.productList[2].color = '#fff';
						that.productList[2].isBorder = true;
					}
					
				}else{
					that.defaultData(data)
					that.switchMode(data.run_mode,'off')
					if (!data.temp_set) {
						that.refreshData() //强制刷新
						// that.isRefesh = true //开机刷新会改变原来的模式
					}
				}
			}else{
				that.defaultData(data)
				that.isRefesh = true //开机后失败需要重新刷新
			}
		},
	
		netWorkGet(str){
			network.getType({
				success: function (data) {
					if(data.type === 'none'){
						prompt.showToast({
							message: str + "，请检查网络",
							duration:1
						}) 
					}else{
						prompt.showToast({
							message: str,
							duration:1
						}) 
					}
				}
			})
		},
		defaultData(){
			this.isopen = false
			this.temp_set = '--'
			this.cur_temp = '-'
			this.mode = '--'
			this.productList[1].color = this.offColor
			this.productList[2].color = this.offColor

			this.productList[1].icon = './assets/img/model_off_1.png'
			this.productList[2].icon = './assets/img/elecHeat_off_1.png'
		
			this.windBgcolor = '#ffffff'
			this.windcolor = '#666666'
		},
		switchMode(run_mode,status){
			// prompt.showToast({message: run_mode+','+status,}) 
			if (status==='on') {
				this.productList[1].isBorder = false;
			}else{
				this.productList[1].isBorder = true
			}
			switch (run_mode){
				case 'cool':
					this.productList[1].icon = `./assets/img/model_${status}_1.png`
					this.productList[1].name = '模式|制冷'
					this.productList[1].color = this.allBgColorOn
					this.productList[1].id = 0
					// this.Color = 'linear-gradient(to bottom, #627BFF, #4E71F7)'
					this.Color = this.allBgColorOn
					this.headColor = this.allBgColorOn
					break
				case 'heat':
					this.productList[1].icon = `./assets/img/model_${status}_2.png`
					this.productList[1].name = '模式|制热'
					this.productList[1].color = this.allBgColorOn
					this.productList[1].id = 1
					// this.Color = 'linear-gradient(to bottom, #FFA800, #FF9500)'
					this.Color = this.allBgColorOn
					this.headColor = this.allBgColorOn
					break
				case 'auto':
					this.productList[1].icon = `./assets/img/model_${status}_3.png`
					this.productList[1].name = '模式|自动'
					this.productList[1].color = this.allBgColorOn
					this.productList[1].id = 2
					// this.Color = 'linear-gradient(to bottom, #4CD964, #3CCD55)'
					this.Color = this.allBgColorOn
					this.headColor = this.allBgColorOn
					break
				default:
					break
			}
		},
		windTypeSelect(index){
			this.windTypeIndex = index
			this.tabContentShow = index
			if(index == 1){
				this.params = {
					wind_speed: 102
				}
			}else{
				this.params = {
					wind_speed: this.baseData.wind_speed
				}
			}
		},
		windSelect(index){
			this.windIndex = index
		},
		windCancel(){
			this.closeFun()
		},
		windSure(){
			if(this.windTypeIndex === 0){

				if (this.windIndex === 0) {
					this.params = {
						wind_speed:'sleep'
					}
				}
				if (this.windIndex === 1) {
					this.params = {
						wind_speed:'micron'
					}
				}
				if (this.windIndex === 2) {
					this.params = {
						wind_speed:'low'
					}
				}
			}
			if(this.windTypeIndex === 1){
				this.params = {
					wind_speed:'auto'
				}
			}
			let status = this.dataLists
			delete status.wind_speed
            this.postDeviceControl(this.params,status)
            this.closeFun()
		},
		setTimeCancel(){
			this.closeFun()
		},
		setTimeSure(evt){
			let that = this
			let status = that.dataLists
			if(this.isopen){
				if(evt.detail.flag){
					this.params = {
						power_off_timer: 'on',
						power_off_time_value: parseInt(evt.detail.data)*60
					}
				}else{
					this.params = {
						power_off_timer: 'off',
						power_off_time_value: 0
					}
				}
				delete status.power_off_timer
				delete status.power_off_time_value
			}else{
				if(evt.detail.flag){
					this.params = {
						power_on_timer: 'on',
						power_on_time_value: parseInt(evt.detail.data)*60
					}
				}else{
					this.params = {
						power_on_timer: 'off',
						power_on_time_value: 0
					}
				}
				delete status.power_on_timer
				delete status.power_on_time_value
			}
			
            this.postDeviceControl(this.params,status)
            this.closeFun()
		},
		isshowclose(){
			let that = this
			if(that.timeTips != ''){
				that.istips = false;
				clearTimeout(that.timeTips)
			}
			that.istips = true
			that.timeTips = setTimeout(() => {
				that.istips = false
			},3000)
		},
		refreshData(e){
			console.log('下拉刷新');
			let that = this
			if(that.isfirst){
				that.regetdata();
			}
			
        },
		regetdata(){
			let that = this;
			that.isRefreshing = true
			let timestamp = Date.parse(new Date())
			that.isshowLoading = true;
			storage.get({
				key: 'openidToken',
				success: function (data) {
					if(data === ''){
						that.getdevicelist()
					}else{
						let obj = JSON.parse(data)
						if(parseInt(timestamp) > parseInt(obj.time)){
							that.getdevicelist()
						}else{
							if(obj.openid === that.openid){
								that.openId = obj.openid
								that.accessToken = obj.accessToken
								if(!that.isLanInit){
									that.LanOnlineGet()
								}
								that.getDeviceStatus()
							}else{
								that.getdevicelist()
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		},
		gettime(){
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		webSocketdata() {
					let that = this;
					api.createWensocket(that.deviceId).then((ws) => {
						that.ws = ws;
						that.isws = true;
						ws.onopen = function() {
							console.log("websocket连接成功")
						}
						ws.onerror = function(data) {
							that.webSocketdata();
							console.log('websocket连接失败');
						}
						ws.onmessage = function(res) {

							let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
							let objdata = {};
							if(obj.status.online){
								objdata.online = obj.status.online;
								that.online = obj.status.online;
							}else{
								objdata.online = "true";
								that.online = "true";
							}
							if(obj.status.power_state){
								objdata.power_state = obj.status.power_state;
							}
							if(obj.status.pre_heat){
								objdata.pre_heat = obj.status.pre_heat;
							}
							if(obj.status.run_mode){
								objdata.run_mode = obj.status.run_mode;
							}
							if(obj.status.wind_speed){
								objdata.wind_speed = obj.status.wind_speed;
							}
							if(obj.status.temp_set){
								objdata.temp_set = obj.status.temp_set;
							}
							if(obj.status.indoor_temperature){
								objdata.indoor_temperature = obj.status.indoor_temperature;
							}
							if(obj.status.power_on_timer){
								objdata.power_on_timer = obj.status.power_on_timer;
							}
							if(obj.status.power_on_time_value){
								objdata.power_on_time_value = obj.status.power_on_time_value;
							}
							if(obj.status.power_off_timer){
								objdata.power_off_timer = obj.status.power_off_timer;
							}
							if(obj.status.power_off_time_value){
								objdata.power_off_time_value = obj.status.power_off_time_value;
							}
							if(obj.status.wind_swing_lr){
								objdata.wind_swing_lr = obj.status.wind_swing_lr;
							}
							if(obj.status.wind_swing_ud){
								objdata.wind_swing_ud = obj.status.wind_swing_ud;
							}
							if(obj.status.ptc){
								objdata.ptc = obj.status.ptc;
							}
						}
						ws.onclose = function() {
							if(!that.isclosews){
								that.webSocketdata();
							}
							console.log("websocket连接已关闭...")
						};
					});
		},
		onclickFn(){
			this.isabout = false;
		},
		closeWebsocket(){
			let that = this;
			that.isclosews = true;
			if(that.ws != ''){
				that.ws.close({
					code: 1000,
					reason: '退出关闭',
					success: function() {
						that.ws = '';
						console.log("关闭websocket成功")
					},
					fail: function(data, code) {
						console.log("关闭websocke失败, code = "+JSON.stringify(code))
					}
				})
			}
		},
		LanOnlineGet(){
			let that = this;
			net.deviceInit(that.accessToken,that.deviceId).then((res) => {
				that.isLanInit = true;
			}).catch((error) => {
				that.isLanInit = false;
			});
		},
		onHide(){
			let that = this;
			that.istips = false;
			that.closeWebsocket();
		},
		onShow(){
			let that = this;
			that.isclosews = false;
			if(that.ws === '' && that.isws){
				// that.webSocketdata();
			}
		},
		onBackPress () {
			let that = this;
			that.closeWebsocket();
			router.clear();
			this.$app.exit();
		},
		onInit(){
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			let that = this;

			device.getInfo({
				success: function(ret) {
					console.log(`handling success， brand = ${ret.brand}`);
					console.log("屏幕高度："+ret.screenHeight);
					that.deviceHeight = ret.screenHeight;
				}
			})
			router.clear();
			that.$page.setTitleBar({ text: '中央空调' })
			for(let i=1;i<25;i++){
				that.timeList.push(i);
			}
			that.$on('cancel', function(e){
				that.isabout = false
			})
			that.$on('closetips', function(e){
				that.istips = false;
				that.regetdata();
			})
			that.$on('openmenu', function(e){
				that.isabout = !that.isabout;
			})	
			that.windList.push('1档','2档','3档','4档','5档','6档','7档');
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function (data) {
					if(data === ''){
						that.getdevicelist();
					}else{
						let obj = JSON.parse(data);
						if(parseInt(timestamp) > parseInt(obj.time)){
							that.getdevicelist();
						}else{
							if(obj.openid === that.openid){
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								that.LanOnlineGet();
								that.getDeviceStatus();
							}else{
								that.getdevicelist();
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		},
		onMenuPress(){
			this.isabout = !this.isabout;
		},
		onCreate () {
			console.log('onCreate perform')
		},
  }
</script>
