<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-title" src="../Component/MideaTitle/index"></import>

<import name="midea-set" src="./setLan/index.ux"></import>
<template>
    <div class="container">
		<midea-title title="配网帮助" language="{{language}}" back="{{isback}}"></midea-title>
		<list class="nav_tops">
			<list-item type="listItem" class="nav_tops_list">
				<div class="nav_divce" if="{{is_device}}">
					<image class="{{img === ''?'nav_divce_img_l':'nav_divce_img'}}" src="{{img}}" alt="./assets/alt.png"></image>
				</div>
				<text class="nav_tops_title" if="{{is_device}}">
					<span>操作指引</span>
				</text>
				<text class="nav_tops_text">
					{{main_mode_summary}}
				</text>
			</list-item>
		</list>
		<div class="nav_tops_btn" if="{{is_device}}">
			<div class="nav_tops_btn_radio" @click="selectData()">
				<text class="nav_tops_btn_radio_text" if="{{!language}}">
					<span>已完成上述操作</span>
				</text>
				<image src="{{checked?'./assets/checked_off.png':'./assets/checked_on.png'}}" class="nav_tops_btn_radio_btn"></image>
				<text class="nav_tops_btn_radio_text" if="{{language}}">
					<span>已完成上述操作</span>
				</text>
			</div>
			<text if="{{isdone}}" class="nav_tops_btn_text" style="background-color: {{checked? '#CCCCCC':'#21D9E5'}};" @click="nextPage()">下一步</text>
		</div>
		<midea-loading if="{{isloading}}"></midea-loading>
		<!-- <midea-set if="{{issetlan}}" onback="goback()" onclose="closedia()"></midea-set> -->
    </div>
</template>

<style lang="less" scoped>
    @import "./assets/index.less";
</style>

<script>
	// import IOT from '@service.iot';
    import router from '@system.router';
    import prompt from '@system.prompt';
	import fetch from '@system.fetch';
	// import account from '@service.account';
	import storage from '@system.storage';
	// import barcode from '@system.barcode';
	import api from '../Common/api/api.js';
	import net from '../Common/api/networkAPI.js';
    module.exports = {
        private: {
			issetlan:false,
			abc:'',
			isall:false,
			isap_lan:'fasle',
			firsType:'',
			timeNum:[],//空的配网指引集
			isnonenum:[],//已经搜索的配网指引集
			suportType:[0,1],//支持的配网方式（0：ap,1：快连）
			againData:false,
			isnone:false,
			language:true,
			isback: true,
			isloading: false,
			isdone: true,
			title:'配网帮助',
			deviceImg: '',
			img: '',
			deviceCode: '',
			issecondary: false,
			ssidDevice: '',
			main_mode_summary: '',
			secondary_mode_summary: '',
			btndisabled: true,
			checked:true,
			isap:"true",
			num: -1,
			is_device:true,
			deviceType:'',
			// type:["ac","ca","b0","db","e2","ea","fa","fc","fd"]//支持的设备
			type:["ac","ca","b0","db","e2","ea","fa","fc","fd","e1","e3","b8","b6"]//支持的设备
        },
		public: {
			iot_call_from: '',
			iot_wifi_ssid: "",
			iot_wifi_password: "",
			iot_url:"",
			iot_device_ssid:"",
			iot_wifi_secretType: "",
			iot_config_type:"",
			iot_category: '',
			iot_series:'',
			iot_apLan:''
		},
		onInit() {
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			this.$page.setTitleBar({
				text: this.title
			})
			let that = this;
			let num = -1;
			let mode = '';
			console.log("app传过来的sn8："+that.iot_series);
			console.log("app传过来的wifi："+that.iot_wifi_ssid);
			console.log("app传过来的密码："+that.iot_wifi_password);
			if(that.iot_url != ""){
				console.log("二维码url："+that.iot_url)
				console.log("二维码"+api.getUrlCan(that.iot_url,"cd"));
				if(api.getUrlCan(that.iot_url,"cd") || api.getUrlCan(that.iot_url,"v").toString() == '3'){
					net.getInfoByQrCode(that.iot_url).then((res) => {
						console.log("二维码信息"+JSON.stringify(res))
						let str = (typeof res) == 'object'?res:JSON.parse(res);
						if(parseInt(str.code) == 0){
							let data = (typeof str.message) == 'object'?str.message:JSON.parse(str.message);
							console.log("二维码信息来这里了"+JSON.stringify(str.message))
							if(data.mode != '' || parseInt(data.mode) == 0){
								if(parseInt(data.mode) > 5){
									that.iot_config_type = 0;
								}else{
									that.iot_config_type = data.mode;
								}
							}else{
								that.getWifiList();
								return false;
							}
							if(data.sn8 != ""){
								that.deviceCode = data.sn8;
							}else{
								that.getWifiList();
								return false;
							}
							if(data.deviceType != ''){
								if(data.deviceType.length == 2){
									that.ssidDevice = data.deviceType
								}else{
									that.ssidDevice = data.deviceType.substring(data.deviceType.length-2,data.deviceType.length)
								}
							}else{
								that.getWifiList();
								return false;
							}
							that.firsType = that.iot_config_type;
							// console.log("mode:"+that.iot_config_type+":::::sn8:"+that.deviceCode+"::::::;ssidDevice:"+that.ssidDevice)
							that.getConfigDeviceInfo();
						}else{
							that.getWifiList();
							// that.getout();
						}
					}).catch((error) => {
						that.getWifiList();
						console.log("出错了"+JSON.stringify(error))
					})
				}else{
					that.getWifiList();
					
					// that.firsType = that.iot_config_type;
					// that.getConfigDeviceInfo();
				}
				
				// console.log(that)
			}else{
				console.log("从app传过来的iot_category值："+that.iot_category)
				api.hostData.type.forEach(function(item,i){
					console.log(that.deviceType)
					if(item === that.getDeviceType()){
						num = i;
					}
				})
				if(num === -1){
					that.is_device = false;
					that.getout();
					return false
				}else{
					that.is_device = true;
					if(that.iot_call_from === "AP_SCAN"){
						that.iot_wifi_password = that.iot_wifi_password?that.iot_wifi_password:'';
						router.push ({
							uri: "config_network/apNetWork",
							params: {
								iot_call_from: that.iot_call_from,
								iot_wifi_ssid: that.iot_wifi_ssid,
								iot_wifi_password: that.iot_wifi_password,
								iot_url:that.iot_url,
								iot_device_ssid:that.iot_device_ssid,
								iot_wifi_secretType: that.iot_wifi_secretType,
								iot_config_type:that.iot_config_type,
								is_ap:"false"
							}
						})
					}else{
						if(that.iot_call_from === "MANUAL_SELECT"){
							console.log("sn8码来了："+that.iot_series)
							that.ssidDevice = that.iot_category.substring(that.iot_category.length-2,that.iot_category.length).toLowerCase();
							that.deviceCode = that.iot_series;
							that.iot_config_type = '0';
							that.firsType = that.iot_config_type;
							that.getConfigDeviceInfo();
						}else{
							that.getWifiList();
						}
					}
				}
			}
			
			// prompt.showToast({message:'iot_series:' + this.iot_series,duration:1})
		},
		onShow() {
			console.log("sssss");
			console.log(this.abc)
			this.getWifiInfo();
		},
		onHide(){
			this.abc = "aaa";
		},
		setwifi(){
			net.setWifi();
		},
		goback(e){
			// this.issetlan = false;
			this.clearData();
			router.clear();
			router.back();
			// prompt.showToast({
			// 	message:JSON.stringify(e)
			// })
		},
		closedia(){
			this.issetlan = false;
		},
		/**
		 * 获取已连接的wifi信息
		 */
		getWifiInfo(){
			net.getwifiinfo().then((res) => {
				console.log(JSON.stringify(res))
			}).catch((error) => {
				
			})
		},
		/**
		 * 退出界面
		 */
		getout(){
			let that = this;
			prompt.showDialog({
						title: '提示',
						message: "该品类暂不支持，敬请期待",
						buttons: [{
						text: '确定',
						color: '#33dd44'
					}],
					success: function (data) {
						that.clearData()
						router.back()
					},
					cancel: function () {
						that.clearData()
						router.back()
						console.log('handling cancel')
					},
					fail: function (data, code) {
						that.clearData()
						router.back()
						console.log(`handling fail, code = ${code}`)
					}
				})
		},
		//获取设备类型
		getDeviceType(){
			let that = this;
			if(that.iot_call_from === "MANUAL_SELECT"){
				that.deviceType = this.iot_category.substring(this.iot_category.length-2,this.iot_category.length).toLowerCase();
			}else if(that.iot_call_from === "AP_SCAN"){
				that.deviceType = that.iot_device_ssid.substring(6,8).toLowerCase();
			}else{
				console.log(that.iot_call_from)
				let type = api.getDeviceInformation(that.iot_url);
				let ssid = api.getUrlCan(that.iot_url,'SSID');
				if(type || ssid){
					let str = type.substring(type.length-2,type.length).toLowerCase() || ssid.substring(6,8);
					that.deviceType = str;
				}
			}
			return that.deviceType;
		},
		selectData(e){
			let that = this;
			that.checked = !that.checked;
		},
		nextPage(){
			let that = this;
			let isap = 'false';
			if(that.isap_lan == 'true'){
				that.isap = "false";
			}else{
				that.isap = "true";
			}
			that.issetlan = true;
			that.iot_wifi_password = that.iot_wifi_password?that.iot_wifi_password:'';
			if(that.ssidDevice.toString() == '00' || that.ssidDevice.toUpperCase() == 'AB'){
				that.ssidDevice = 'AC'
			}
			let params = {
						iot_wifi_ssid: that.iot_wifi_ssid,
						iot_wifi_password: that.iot_wifi_password,
						iot_url:that.iot_url,
						ssidDevice: that.ssidDevice,
						iot_device_ssid:that.iot_device_ssid,
						iot_wifi_secretType: that.iot_wifi_secretType,
						iot_config_type:that.iot_config_type,
						is_ap:that.isap
					}
			console.log("跳转到配网页面的信息:"+JSON.stringify(params))
			if(!that.checked){
				router.push ({
					uri: "config_network/apNetWork",
					params: params
				})
			}
		},
		/**
		 * 查找没找过的方式
		 */
		getArrDifference(arr1, arr2) {
			return arr1.concat(arr2).filter(function(v, i, arr) {
				return arr.indexOf(v) === arr.lastIndexOf(v);
			});
		},
		/**
		 * json中是否存在
		 */
		getItem(arr,n,v) {
			for (var i = 0; i < arr.length; i++){
				if (arr[i][n]==v){
					return i;
				}
			}
		},
		getConfigDeviceInfo(){
			let that = this;
			
			let num = -1
			api.hostData.type.forEach(function(item,i){
				console.log("deviceType:"+that.deviceType)
				if(item === that.ssidDevice.toLowerCase()){
					num = i;
				}
			})
			if(num === -1){
				that.is_device = false;
				that.getout();
				return false
			}
			that.isloading = true;
			
			if(parseInt(that.iot_config_type) == -1){
				that.iot_config_type = 0;
				that.firsType = that.iot_config_type;
			}
				// 
				
				if(that.suportType.indexOf(parseInt(that.iot_config_type)) == -1){
					that.isloading = false;
					prompt.showDialog({
							title: '提示',
							message: "暂只支持ap以及快连方式配网",
							buttons: [{
							text: '确定',
							color: '#33dd44'
						}],
						success: function (data) {
							that.clearData()
							router.back()
						},
						cancel: function () {
							that.clearData()
							router.back()
							console.log('handling cancel')
						},
						fail: function (data, code) {
							that.clearData()
							router.back()
							console.log(`handling fail, code = ${code}`)
						}
					})
					return false;
				}else{
					if(that.deviceCode.length < 8 && that.deviceCode != ''){
						that.deviceCode = ("0000000000000000000000" + that.deviceCode).slice(-8);
					}
					console.log("设备sn8码："+that.deviceCode);
					if(that.iot_apLan != '' ){
						storage.get({
							key:"secondaryMode",
							success: function (resp) {
								if(resp === ''){
									that.getDataLanAll();
								}else{
									let obj = JSON.parse(resp);
									that.img = obj.secondaryModeImg;
									that.title = obj.name;
									that.main_mode_summary = obj.secondaryModeSummary;
									that.iot_config_type = obj.auxiMode;
									that.isloading = false;
									that.isap_lan = 'false';
									that.clearData();
								}
							}
						})
					}else{
						that.getDataLanAll();
					}
					
				}
				
		},
		getDataLanAll(){
			let that = this;
			let arry = [];
			arry[0] = that.ssidDevice.toUpperCase();
			if(that.ssidDevice.toString() == '00' || that.ssidDevice.toUpperCase() == 'AB'){
				arry[0] = 'AC';
			}
			let params = {
				types: arry,
				mode: parseInt(that.iot_config_type),
				// code:that.deviceCode
			}
			console.log("配网指引参数："+JSON.stringify(params));
			console.log("asdadasddddddddddd+++++++=")
			api.getCenterWorkHelp(params).then((res) => {
				if(that.isnonenum.indexOf(parseInt(that.iot_config_type)) == -1){
					that.isnonenum.push(parseInt(that.iot_config_type));
				}
				console.log("还没查询的："+JSON.stringify(that.getArrDifference(that.suportType,that.isnonenum)))
				if(res.data.list){
					let data = (typeof res.data.list) == 'object'?res.data.list:JSON.parse(res.data.list);
					if(data.length === 0){
						if(that.timeNum.indexOf(parseInt(that.iot_config_type)) == -1){
							that.timeNum.push(parseInt(that.iot_config_type));
						}
						if(that.getArrDifference(that.suportType,that.timeNum).length > 0){
							that.iot_config_type = that.getArrDifference(that.suportType,that.timeNum)[0];
							that.getConfigDeviceInfo();
							return false
						}else{
							prompt.showDialog({
									title: '提示',
									message: "找不到该设备配网信息，请检查设备激活二维码是否正确",
									buttons: [{
									text: '确定',
									color: '#33dd44'
								}],
								success: function (data) {
									that.clearData()
									router.back()
								},
								cancel: function () {
									that.clearData()
									router.back()
									console.log('handling cancel')
								},
								fail: function (data, code) {
									that.clearData()
									router.back()
									console.log(`handling fail, code = ${code}`)
								}
							})
							return false
						}
					}else{
						console.log("打印list："+JSON.stringify(data))
						if(that.deviceCode === '' || that.againData){
							that.setSecondMode(data,0);
						}else{
							if(that.getItem(data,"code",that.deviceCode) > -1){
								that.num = that.getItem(data,"code",that.deviceCode);
							}else{
								if(that.iot_config_type.toString() == "0"){
									that.isap_lan = "true";
								}else{
									that.isap_lan = "false";
								}
								if(that.getArrDifference(that.suportType,that.isnonenum).length > 0){
									that.iot_config_type = that.getArrDifference(that.suportType,that.isnonenum)[0];
									that.getConfigDeviceInfo();
									return false;
								}else{
									if(that.getArrDifference(that.suportType,that.timeNum).length > 0){
										if(that.getArrDifference(that.suportType,that.timeNum).indexOf(parseInt(that.firsType)) > -1){
											that.iot_config_type = that.firsType;
										}else{
											that.iot_config_type = that.getArrDifference(that.suportType,that.timeNum)[0];
										}
										if(that.isall){
											that.againData = true;
										}
										that.getConfigDeviceInfo();
										that.isall = true;
										return false;
									}else{
										prompt.showDialog({
												title: '提示',
												message: "找不到该设备配网信息，请检查设备激活二维码是否正确",
												buttons: [{
												text: '确定',
												color: '#33dd44'
											}],
											success: function (data) {
												that.clearData();
												router.back()
											},
											cancel: function () {
												that.clearData();
												router.back()
												console.log('handling cancel')
											},
											fail: function (data, code) {
												that.clearData();
												router.back()
												console.log(`handling fail, code = ${code}`)
											}
										})
										return false;
									}
								}
							}
							that.setSecondMode(data,that.num);
						}
					}
				}else{
					if(that.timeNum.indexOf(parseInt(that.iot_config_type)) == -1){
						that.timeNum.push(parseInt(that.iot_config_type));
					}
					console.log("已经出现空值的："+JSON.stringify(that.timeNum))
					console.log("不出现空值的:"+JSON.stringify(that.getArrDifference(that.suportType,that.timeNum)))
					if(that.getArrDifference(that.suportType,that.timeNum).length > 0){
						that.iot_config_type = that.getArrDifference(that.suportType,that.timeNum)[0];
						that.getConfigDeviceInfo();
						return false;
					}else{
						prompt.showDialog({
								title: '提示',
								message: "找不到该设备配网信息，请检查设备激活二维码是否正确",
								buttons: [{
								text: '确定',
								color: '#33dd44'
							}],
							success: function (data) {
								that.clearData()
								router.back()
							},
							cancel: function () {
								that.clearData()
								router.back()
								console.log('handling cancel')
							},
							fail: function (data, code) {
								that.clearData()
								router.back()
								console.log(`handling fail, code = ${code}`)
							}
						})
						that.isloading = false;
						return false
					}
				}
			}).catch((error) => {
				that.isloading = false;
				console.log(error);
			})
		},
		//保存辅助配网指引
		setSecondMode(data,num){
			let obj = {
				name:'',
				secondaryModeImg:'',
				secondaryModeSummary:'',
				auxiMode:''
			};
			let that = this;
			console.log("ahsuiduiasyd"+JSON.stringify(data))
			console.log("配网方式："+that.iot_config_type)
			that.img = data[num].mainModeImg;
			that.title = data[num].name;
			that.main_mode_summary = data[num].mainModeSummary;
			that.isloading = false;
			if(that.iot_config_type.toString() == "1" && data[num].auxiMode.toString() == '0' && data[num].secondaryModeImg != '' && data[num].secondaryModeSummary != ''){
				that.isap_lan = "false";
				obj.name = data[num].name;
				obj.secondaryModeImg = data[num].secondaryModeImg;
				obj.secondaryModeSummary = data[num].secondaryModeSummary;
				obj.auxiMode = data[num].auxiMode;
				console.log("aa=============="+JSON.stringify(obj))
				storage.set({
					key: 'secondaryMode',
					value: JSON.stringify(obj),
					success: function (data) {
						
					},
					fail: function (data, code) {
						
					}
				})
			}else{
				that.isap_lan = "true";
			}
		},
		getWifiList(){
			// this.isloading = true;
			let that = this;
			console.log("选择方式"+that.iot_call_from);
			let mode = "";
			if(that.iot_url != ''){
				mode = api.getUrlCan(that.iot_url,'mode');
				console.log(mode)
				if(mode && mode != ''){
					let str = mode.toString();
					mode = str.substring(str.length-1,str.length);
					that.iot_config_type = str.substring(str.length-1,str.length);
				}else{
					that.iot_config_type = '0';
				}
				if(api.getUrlCan(that.iot_url,"tsn") || api.getUrlCan(that.iot_url,"sn") || api.getUrlCan(that.iot_url,"type")){
					if(api.getUrlCan(that.iot_url,"tsn")){
						that.deviceCode = api.getUrlCan(that.iot_url,"tsn").substring(9,17);
					}else if(api.getUrlCan(that.iot_url,"type")){
						that.deviceCode = api.getUrlCan(that.iot_url,"type").substring(9,17);
					}else{
						that.deviceCode = api.getUrlCan(that.iot_url,"sn").substring(9,17);
					}
				}
			}
			if(that.iot_device_ssid != '' && that.iot_device_ssid != 'null'){
				that.ssidDevice = that.iot_device_ssid.substring(6,8).toLowerCase();
				that.firsType = that.iot_config_type;
				that.getConfigDeviceInfo();
			}else{
				let type = api.getDeviceInformation(that.iot_url);
				let ssid = api.getUrlCan(that.iot_url,'SSID');
				if(type || ssid){
					let str = type.substring(type.length-2,type.length).toLowerCase() || ssid.substring(6,8);
					that.ssidDevice = str;
					that.firsType = that.iot_config_type;
					that.getConfigDeviceInfo();
				}else{
					if(that.iot_call_from === "MANUAL_SELECT"){
						that.firsType = that.iot_config_type;
						that.getConfigDeviceInfo();
					}else{
						prompt.showDialog({
								title: '提示',
								message: "设备不存在，请检查二维码是否正确",
								buttons: [{
								text: '确定',
								color: '#33dd44'
							}],
							success: function (data) {
								that.clearData()
								router.back()
							},
							cancel: function () {
								that.clearData()
								router.back()
								console.log('handling cancel')
							},
							fail: function (data, code) {
								that.clearData()
								router.back()
								console.log(`handling fail, code = ${code}`)
							}
						})
					}
				}
			}
		},
		//清除保存的辅助配网指引
		clearData(){
			storage.delete({
			    key: 'secondaryMode',
			    success: function(data) {
				    console.log('handling success')
				},
				fail: function(data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		},
		onBackPress(){
			this.clearData();
			router.clear();
			router.back();
		},
		onDestroy(){
//             this.$page.finish();
//          	this.$app.exit();
        }
    }
</script>
