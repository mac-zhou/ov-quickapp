<!-- 组件引入 -->
<import name="midea-head" src="../../Component/MideaHead/index"></import>
<!-- <import name="midea-about" src="../Component/MideaAbout/index"></import> -->
<import name="midea-tips" src="../../Component/MideaTips/index"></import>
<import name="midea-loading" src="../../Component/MideaLoading/index"></import>
<template>
	<div class="container">
		<midea-head title="蒸汽炉R6 " language="{{language}}" onclose-websocket="closeWebsocket" isnew="{{bgColor}}" power="{{power}}"></midea-head>
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="scrollbottom" refreshing="{{isRefreshing}}">
			<list onscroll="" style="background-color: {{power === 'on'?'#F9CB3D':'#cccccc'}};" class="b0_nav" id="list">
				<!-- 列表元素，属性type值相同时，需要确保渲染后的视图布局也完全相同 -->
				<list-item type="listItem" class="b0_nav_list">
					<!-- <div class="{{language?'b0_nav_list_lock':'b0_nav_list_lock_l'}}" @click="childLock()">
						<image src="{{power === 'on'?'./assets/img/child-lock-on-':'./assets/img/child-lock-off-'}}{{lock === 'on'?'on.png':'off.png'}}" class="b0_nav_list_lock_img"></image>
					</div> -->
					<div class="{{language?'b0_nav_list_lock':'b0_nav_list_lock_l'}}" @click="isMeiju()">
						<image src="{{power === 'on'?'./assets/img/loadingMeiju.png':'./assets/img/meijuicon.png'}}" class="b0_nav_list_lock_img"></image>
					</div>
					<text class="b0_nav_list_usemeiju">使用美居</text>
					<div class="b0_nav_list_time" if="{{power === 'on' && work_status != 'work_finish' && work_status != 'standby'}}">
						<text class="b0_nav_list_data" style="color: {{power === 'on'?'#ffffff':'#666666'}};font-size:{{showMinTag?'330px':'260px'}}">{{power === 'on'?timeData(hour,minutes):'--'}}</text>
						<text if="{{showMinTag}}" class="b0_nav_list_tag">{{tagText}}</text>
					</div>
					<text class="b0_nav_list_about" if="{{power === 'on' && work_status != 'work_finish' && work_status != 'standby'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">大约剩余</text>
					<text class="b0_nav_list_done" if="{{power === 'on' && work_status === 'work_finish'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">已完成</text>
					<text class="b0_nav_list_status" if="{{power === 'on' && work_status != 'standby'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">温度 {{tempShow(temperature)}} | {{statusData(work_status)}}</text>
					<text class="b0_nav_list_mode" if="{{power === 'on' && work_status != 'standby'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">{{modeShow(mode)}}</text>

					<text class="b0_nav_list_done" if="{{power === 'on' && work_status === 'standby'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">待机中</text>
					<text class="b0_nav_list_doneText" if="{{power === 'on' && work_status === 'standby'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">请选择下方功能</text>
					<text class="b0_nav_list_done" if="{{power === 'off'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">已关机</text>
					<text class="b0_nav_list_doneText" if="{{power === 'off'}}" style="color: {{power === 'on'?'#ffffff':'#666666'}};">点击下方开关</text>
				</list-item>
			</list>
		</refresh>
		<div class="b0_contrl" if="{{work_status != 'work' && work_status != 'work_finish'}}">
			<div class="b0_contrl_btn" @click="powerOpen()">
				<image src="./assets/img/off.png" class="b0_contrl_btn_img"></image>
				<text class="b0_contrl_btn_text">开关</text>
			</div>

			<div class="b0_contrl_btn" if="{{$item.isShow}}" @click="showAlert($item)" for="{{modeList}}">
				<image src="./assets/img/{{$item.iconSrc}}" class="b0_contrl_btn_img"></image>
				<text class="b0_contrl_btn_text">{{$item.name}}</text>
			</div>
			<!-- <div class="b0_contrl_btn" @click="showAlert()">
				<image src="./assets/img/doing.png" class="b0_contrl_btn_img"></image>
				<text class="b0_contrl_btn_text">热风对流</text>
			</div> -->
			<!-- <div class="b0_contrl_btn" @click="showAlert()">
				<image src="./assets/img/doing.png" class="b0_contrl_btn_img"></image>
				<text class="b0_contrl_btn_text">启动</text>
			</div> -->
		</div>
		<div class="b0_ctr" if="{{power === 'on' && start}}">
			<div class="b0_contrl_btn" @click="stopDevice()">
				<image src="./assets/img/stop.png" class="b0_contrl_btn_img"></image>
				<text class="b0_ctr_text">取消</text>
			</div>
		</div>
		
		<div class="b0_ctr" if="{{power === 'on' && work_status === 'work_finish'}}">
			<div class="b0_contrl_btn" @click="stopDevice()">
				<image src="./assets/img/confirm.png" class="b0_contrl_btn_img"></image>
				<text class="b0_ctr_text">确认</text>
			</div>
		</div>
		<div class="b0_alert" show="{{isset}}" @click="cancel()">
			<div class="b0_alert_nav" show="{{isset}}">
				<div class="b0_alert_nav_list">
					<text class="b0_alert_nav_list_title">加热设置</text>
					<div class="b0_alert_nav_list_item" @click="doingAnimation('time')">
						<text if="{{language}}" class="b0_alert_nav_list_item_title">加热时长</text>
						<div class="b0_alert_nav_list_item_status{{language?'':'_l'}}">
							<text if="{{language}}" class="b0_alert_nav_list_item_status_data">{{setHour >= 0?setHour:'--'}}小时{{min >= 0?min:'--'}}分</text>
							<image class="b0_alert_nav_list_item_status_img" src="./assets/img/arow_down.png"></image>
							<text if="{{!language}}" class="b0_alert_nav_list_item_status_data">{{setHour >= 0? setHour:'--'}}小时{{min >= 0?min:'--'}}分</text>
						</div>
						<text if="{{!language}}" class="b0_alert_nav_list_item_title">加热时长</text>
					</div>
					<div class="b0_alert_nav_list_select">
						<list class="b0_alert_nav_list_select_list {{doanimat}}" if="{{language}}" id="listMin">
							<!-- 列表元素，属性type值相同时，需要确保渲染后的视图布局也完全相同 -->
							<list-item type="list_Item" class="b0_alert_nav_list_select_list_item" @click="selectData($item.data,'setHour')" for="{{setTimeArr}}">
								<text class="b0_alert_nav_list_select_list_item_data" style="color:{{setHour === $item.data?'#F9CB3D':'#CCCCCC'}}">{{$item.data}}小时</text>
								<image src="./assets/img/select.png" show="{{ setHour === $item.data}}" class="b0_alert_nav_list_select_list_item_img"></image>
							</list-item>
						</list>
						<list class="b0_alert_nav_list_select_list {{doanimat}}" id="listSec">
							<list-item type="list_Item" class="b0_alert_nav_list_select_list_item" @click="selectData($item.data,'min')" for="{{getHourMin(60)}}">
								<text class="b0_alert_nav_list_select_list_item_data" if="{{language}}" style="color:{{min === $item.data?'#F9CB3D':'#CCCCCC'}}">{{$item.data}}</text>
								<image src="./assets/img/select.png" show="{{min === $item.data}}" class="b0_alert_nav_list_select_list_item_img"></image>
								<text class="b0_alert_nav_list_select_list_item_data" if="{{!language}}" style="color:{{min === $item.data?'#F9CB3D':'#CCCCCC'}}">{{$item.data}}</text>
							</list-item>
						</list>
						<list class="b0_alert_nav_list_select_list {{doanimat}}" if="{{!language}}" id="listMin">
							<list-item type="list_Item" class="b0_alert_nav_list_select_list_item" @click="selectData($item.data,'setHour')" for="{{setTimeArr}}">
								<image src="./assets/img/select.png" show="{{setHour === $item.data}}" class="b0_alert_nav_list_select_list_item_img"></image>
								<text class="b0_alert_nav_list_select_list_item_data" style="color:{{setHour === $item.data?'#F9CB3D':'#CCCCCC'}}">{{$item.data}}小时</text>
							</list-item>
						</list>
					</div>
					<div if="{{hasTempSetting}}" class="b0_alert_nav_list_item" @click="doingAnimation('temperature')">
						<text if="{{language}}" class="b0_alert_nav_list_item_title">温度</text>
						<div class="b0_alert_nav_list_item_status{{language?'':'_l'}}">
							<text if="{{language}}" class="b0_alert_nav_list_item_status_data">{{temperature?temperature:'--'}}℃</text>
							<image class="b0_alert_nav_list_item_status_img" src="./assets/img/arow_down.png"></image>
							<text if="{{!language}}" class="b0_alert_nav_list_item_status_data">{{temperature?temperature:'--'}}℃</text>
						</div>
						<text if="{{!language}}" class="b0_alert_nav_list_item_title">温度</text>
					</div>
					<div if="{{hasTempSetting}}" class="b0_alert_nav_list_select">
						<list class="b0_alert_nav_list_select_firelist {{doneanimat}}" id="listFire">
							<list-item type="list_Item" class="b0_alert_nav_list_select_list_item" @click="selectData($item.data,'temperature')" for="{{setTempArr}}">
								<text class="b0_alert_nav_list_select_list_item_data" if="{{language}}" style="color:{{temperature == $item.data?'#F9CB3D':'#CCCCCC'}}">{{$item.data}}℃</text>
								<image src="./assets/img/select.png" show="{{temperature == $item.data}}" class="b0_alert_nav_list_select_list_item_img"></image>
								<text class="b0_alert_nav_list_select_list_item_data" if="{{!language}}" style="color:{{temperature == $item.data?'#F9CB3D':'#CCCCCC'}}">{{$item.data}}℃</text>
							</list-item>
						</list>
					</div>
					<div class="b0_alert_nav_list_btn">
						<div class="b0_alert_nav_list_btn_1" if="{{language}}" @click="cancel()">
							<text class="b0_alert_nav_list_btn_1_text">取消</text>
						</div>
						<div class="b0_alert_nav_list_btn_1" @click="startDevice()">
							<text class="b0_alert_nav_list_btn_1_txt">启动</text>
						</div>
						<div class="b0_alert_nav_list_btn_1" if="{{!language}}" @click="cancel()">
							<text class="b0_alert_nav_list_btn_1_text">取消</text>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- 组件 -->
		<!-- <midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about> -->
		<midea-loading if="{{isshowLoading}}"></midea-loading>
		<midea-tips if="{{istips}}"></midea-tips>
	</div>
</template>
<script>
	import api from '../../Common/api/api.js';
	import prompt from '@system.prompt';
	import router from '@system.router';
	import fetch from '@system.fetch';
	import account from '@service.account';
	import storage from '@system.storage';
	import barcode from '@system.barcode';
	// import IOT from '@service.iot';
	import pkg from '@system.package';
	import network from '@system.network';
	import net from '../../Common/api/networkAPI.js';
	/*
	温度选择
	*/
	function getSetting(){
		console.log(arguments.length,JSON.stringify(arguments));


		var arr=[], b = [];
		for(var i=0;3*i< arguments.length;i++){

			let start = arguments[i*3];
			let end = arguments[i*3+1];
			let step = arguments[i*3+2];
			for(var j=0;start+j*step <= end;j++){
				let value = start+step*j;
				let obj = {
					id: value,
					data: value
				}
				arr.push(obj);
			}
			
		}
		return b.concat(arr);
	}

	function getHourSetting(num) {
			let that = this;
			let arrary = [];
			for (let i = 0; i < num; i++) {
				let obj = {
					id: i,
					data: i
				}
				arrary.push(obj);
			}
			return arrary;
	}

	export default {
		private: {
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			ws: '',
			isws: false,
			isclosews: false,
			pause_data: false,
			headtimeout: '',
			timeout: '',
			isshowLoading: false,
			istips: false,
			bgColor: true,
			start: false,
			pause: false,
			isset: false,
			isabout: false,
			language: true,
			deviceHeight: 0,
			doanimat: 'doneanimation',
			doneanimat: '',
			ismeiju: false,
			code: '', //授权码
			accessToken: '', //token
			setHour:0,
			min: 0,
			sec: 0,
			fire: 0,
			isfirst: false,
			openId: '',
			lock: 'off',
			power: "off",
			hour: 0,
			minutes: 0,
			second: 0,
			isdone:false,
			fire_power: 0,
			temperature: 0,
			online: 'false',
			isworking:true,
			timeoutInter: "",
			work_status: 'cloud',
			door_open: 'off',
			iswarm:true,
			mode:'microwave',
			num:0,
			listDevice:{},
			B0list: ['lock', 'power', 'hour','minutes', 'second', 'temperature','work_status','mode'],
			listdata: {
				lock: 'off',
				power: "off",
				hour: 0,
				minutes: 0,
				second: 0,
				fire_power: 0,
				online: 'false',
				work_status: 'cloud',
				mode:'microwave',
				temperature: 0,
				door_open:'on'
			},

			modeList:[
				{ isShow:true, work_mode: 'pure_steam',name:'纯蒸',iconSrc:'steam@3x.png',timeArr:getHourSetting(2),tempArr:getSetting(35,50,1,55,100,5)},
				{ isShow:true, work_mode: 'scale_clean',name:'清洁',iconSrc:'clean@3x.png'},
				{ isShow:true, isNoTemp: true, work_mode: 'dry',name:'烘干',iconSrc:'dry_hg.png',timeArr:getHourSetting(1)},
				{ isShow:true, work_mode: 'zymosis',name:'发酵',iconSrc:'fermentation@3x.png',timeArr:getHourSetting(12),tempArr:getSetting(35,45,1)},
				{ isShow:false, work_mode: 'auto_menu',name:'自动菜单',iconSrc:'fermentation@3x.png',timeArr:getHourSetting(12),tempArr:getSetting(35,45,1)},

			],
			modeItem:{},
			setTempArr:getSetting(100,250,5),
			setTimeArr:getHourSetting(2),
			showMinTag:false,
			tagText: "分",
			modeName: 0,
			modeText: '--',
			hasTempSetting: true,
		},
		public: {
			deviceSeries: '',
			deviceId: '',
			openid: ''
		},

		/*接收页面内跳转传过来的值 */
		protected: {
			deviceSeries: '', 
			deviceId: '',
			openid: ''
		},
		//控制操作函数
		// 开关
		powerOpen() {
			let params;
			let that = this;
			if (that.online === 'true') {
				if (that.lock === 'off') {
					if(that.work_status != 'three'){
						if (that.power === 'on') {
							params = {
								work_status: 'save_power',
							}
						} else {
							params = {
								work_status: 'start',
							}
						}
						let status = ['work_status'];
						that.ctrDevice(params,status,false);
					}else{
						prompt.showToast({
							message: "设备正在启动中,请稍后"
						})
					}
				} else {
					prompt.showToast({
						message: "童锁打开状态,请关闭童锁在进行操作"
					})
				}
			} else {
				that.isshowclose();
// 				that.istips = true;
// 				setTimeout(function() {
// 					that.istips = false;
// 				}, 3000)
			}
		},
		//首次启动
		startDevice() {
			let that = this;
			let params;
			if(that.setHour=='--'){
				that.setHour = 0;
			}
			if(that.min=='--'){
				that.min = 0;
			}
			if(that.modeItem.work_mode=='dry' || that.modeItem.work_mode == 'zymosis'){
				if(parseInt(that.setHour)<=0 && parseInt(that.min)<5){
					prompt.showToast({
						message: "该模式下，时间选择不能低于5分钟哦"
					})
					return;
				}
			}
			if(parseInt(that.min)===0 && parseInt(that.setHour) === 0){
				prompt.showToast({
					message: "请选择加热时长"
				})
				return;
			}
			if (parseInt(that.min) >= 0 && parseInt(that.temperature) > 0) {
				this.isset = false;
				
				params = {
							work_status: 'work',
							work_mode: that.modeItem.work_mode,
							work_minute: that.min,
							work_hour: that.setHour,
							temperature: that.temperature
						}
				let status = ['lock', 'work_minute', 'work_hour', 'work_status','work_mode','temperature'];
				that.ctrDevice(params,status,true);
			}else {
				if(!that.hasTempSetting){
					this.isset = false;
					params = {
							// work_status: 'work',
							work_mode: that.modeItem.work_mode,
							work_minute: that.min,
							work_hour: that.setHour,
						}
					let status = ['lock', 'work_minute', 'work_hour','work_mode'];
					that.ctrDevice(params,status,true);
					return;
				}
				prompt.showToast({
					message: "请选择加热时长与温度"
				})
			}
			
		},
		//暂停
		pauseDevice() {
			let params = {
				work_status: 'pause'
			}
			let status = ['work_status'];
			// this.pause_data = true;
			// clearTimeout(this.timeout);
			if (this.lock === 'off') {
				this.ctrDevice(params,status,false);
			} else {
				prompt.showToast({
					message: "童锁打开状态,请关闭童锁在进行操作"
				})
			}
		},
		//停止&&取消
		stopDevice() {
			let params = {
				work_status: 'standby'
			}
			let status = ['work_status'];
			if (this.lock === 'off') {
				this.ctrDevice(params,status,false);
			} else {
				prompt.showToast({
					message: "童锁打开状态,请关闭童锁在进行操作"
				})
			}

		},
		//操作童锁
		childLock() {
			let that = this;
			let params;
			if (that.online === 'true') {
				if(that.work_status != 'work' && that.work_status != 'three'){
					if (that.lock === 'on') {
						params = {
							lock: 'off',
						}
					} else {
						params = {
							lock: 'on',
						}
					}
					let status = ['lock'];
					that.ctrDevice(params,status,false);
				}else{
					prompt.showToast({
						message: "程序运行中不能操作童锁"
					})
				}
			} else {
				that.isshowclose();
// 				that.istips = true;
// 				setTimeout(function() {
// 					that.istips = false;
// 				}, 3000)
			}
		},
		//火力过滤
		firpower(str) {
			if (parseInt(str) > 0) {
				return str
			} else {
				return '-- '
			}
		},
		tempShow(str){
			if (parseInt(str) > 0) {
				return str + '℃';
			} else {
				return '-- '
			}
		},
		modeShow(mode){
			let that = this;
			let modeArr = that.modeList;
			that.modeText = '--';
			for(var i=0; i< modeArr.length; i++){
				if(mode == modeArr[i].work_mode){
					that.modeText = modeArr[i].name;
				}
			}
			return that.modeText;
		},
		//工作状态过滤
		statusData(str) {
			let data = '待机中';
			switch (str) {
				case 'cancel':
					data = '待机中';
					break;
				case 'work':
					data = '运行中';
					break;
				case 'pause':
					data = '暂停中';
					break;
				case 'save_power':
					data = '省电';
					break;
				case 'work_finish':
					data = '已完成';
					break;
				case 'order':
					data = '预约中';
					break;
				case 'heat':
					data = '预热中';
					break;
				case 'three':
					data = '爱心3秒';
					break;
				case 'reaction':
					data = '菜单感应中';
					break;
				case 'cloud':
					data = '云菜谱段结束';
					break;
			}
			return data;
		},
		//判断是否安装美居
		isMeiju() {
			let that = this;
			let str1 = "确定打开美居？（仅支持美居5.2及以上版本）";
			let str2 = "您还没安装美居app，是否确定下载安装?";
			pkg.hasInstalled({
				package: 'com.midea.ai.appliances',
				success: function(res) {
					prompt.showDialog({
						title: '提示',
						message: res.result?str1:str2,
						buttons: [
							{
								text: res.result?'直接打开':'去下载',
								color: '#33dd44'
							}
						],
						success: function(data) {
							if (res.result) {
								router.push({ uri: 'meiju://com.midea.meiju/main' });
							} else {
								pkg.install({
									package: 'com.midea.ai.appliances',
									success: function(resp) {
									},
									fail: function(resp, code) {
									}
								});
							}
						},
						cancel: function() {
						},
						fail: function(data, code) {
						}
					});
				},
				fail: function(res, code) {
				}
			});
		},

		getHourMin(num) {
			let that = this;
			let arrary = [];
			for (let i = 0; i < num; i++) {
				let obj = {
					id: i,
					data: i
				}
				arrary.push(obj);
			}
			return arrary;
		},
		// 分钟
		getSecMin(num) {
			let that = this;
			let arrary = [];
			for (let i = 0; i < num; i++) {
				let obj = {
					id: i,
					data: i
				}
				arrary.push(obj);
			}
			return arrary;
		},
		//跳转到选定item
		setItem(id, num) {
			this.$element(id).scrollTo({
				index: 10
			})
		},
		//暂停&&工作
		startOrpause() {
			if (this.power === 'on') {
				if (this.listdata.work_status === 'work') {
					this.start = true;
					this.pause = false;
				} else if (this.listdata.work_status === 'pause') {
					this.start = false;
					this.pause = true;
				} else {
					this.start = false;
					this.pause = false;
				}
			} else {
				this.start = false;
				this.pause = false;
			}
		},
		//数据处理
		dataCan() {
			let that = this;
			if(that.timeoutInter != ''){
				clearInterval(that.timeoutInter)
			}
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.isfirst = true;
			that.pause_data = false;
			that.work_status = that.listdata.work_status;
			that.fire_power = that.listdata.fire_power;
			that.temperature = that.listdata.temperature;
			that.hour = that.listdata.work_hour;
			that.sec = that.listdata.work_second;
			that.second = that.listdata.work_second;
			that.minutes = that.listdata.work_minute;
			that.mode = that.listdata.work_mode;
			that.lock = that.listdata.lock;
			that.door_open = that.listdata.door_open;
			let error_code = that.listdata.error_code;
			if(error_code){
				prompt.showToast({
					message: "设备故障了"
				})
				return;
			}
			if(this.listdata.work_status === 'save_power'){
				that.power = 'off';
			}else{
				that.power = 'on';
			}
			if(this.listdata.work_status === 'save_power' || this.listdata.work_status === 'standby' || this.listdata.work_status === 'work_finish'){
				that.showMinTag = false;
			}
			// that.power = that.listdata.power;
			that.online = that.listdata.online;
			that.startOrpause();
			if(that.power === 'on'){
				that.headTime();
				// if(that.work_status === 'work' || that.work_status === 'work_finish' || that.work_status === 'standby' || that.work_status === 'save_power' || that.work_status === 'order' || that.work_status === 'heat' || that.work_status === 'three'){
				// 	that.headTime();
				// }
			}
			
		},
		//选择
		selectData(data, str) {
			console.log(data,str);
			let that = this;
			switch (str) {
				case 'setHour': //分钟处理
					that.setHour = data;
					if (data === 0) {
						if (that.min === 0 || that.min === '--') {
							that.min = 1;
						}
					} else {
						if (that.min === '--') {
							that.min = 0;
						}
					}
					break;
				case 'min': //分钟处理
					that.min = data;
					if (data === 0) {
						if (that.sec === 0 || that.sec === '--') {
							that.sec = 1;
						}
					} else {
						if (that.sec === '--') {
							that.sec = 0;
						}
					}
					break;
				// case 'sec': //秒钟处理
				// 	if (data === 0 && that.min === 0) {

				// 	} else {
				// 		that.sec = data;
				// 		if (data === 0) {
				// 			if (that.min === 0 || that.min === '--') {
				// 				that.min = 1
				// 			}
				// 		} else {
				// 			if (that.min === 0 || that.min === '--') {
				// 				that.min = 0;
				// 			}
				// 		}
				// 	}
				// 	break;
				case 'fire': //火力处理
					that.fire = data;
					break;
				case 'temperature': //温度处理
					that.temperature = data;
					break;
			}
		},
		// 执行收起动画
		doingAnimation(str) {
			let that = this;
			switch (str) {
				case 'time':
					if (that.doanimat != 'doneanimation') {
						that.doanimat = 'doneanimation';
						that.doneanimat = 'doanimation';
					}
					break;
				case 'fire':
					if (that.doneanimat != 'doneanimation') {
						that.doanimat = 'doanimation';
						that.doneanimat = 'doneanimation';
					}
					break;
				case 'temperature':
					if (that.doneanimat != 'doneanimation') {
						that.doanimat = 'doanimation';
						that.doneanimat = 'doneanimation';
					}
					break;
			}
		},
		// 取消
		cancel() {
			this.isset = false;
			this.modeItem = {};
			this.dataCan();
		},
		//时间过滤器
		timeData(str1, str2) {
			let that = this;
			that.showMinTag = false;
			let num1 = '';
			let num2 = '';
			if(parseInt(str1) == 0 && parseInt(str2) > 0){
				that.showMinTag = true;
				that.tagText = "分";
				return str2;
			}
			if (parseInt(str1) > 0 || parseInt(str2) > 0) {
			
				if (parseInt(str1) < 10) {
					num1 = "0" + str1;
				} else {
					num1 = str1;
				}
				if (parseInt(str2) < 10) {
					num2 = "0" + str2;
				} else {
					num2 = str2;
				}
				return num1.toString() + ":" + num2.toString();
			} else {
				if(parseInt(that.sec)){
					that.showMinTag = true;
					that.tagText = "秒";
					return that.sec;
				}else{
					return "--";
				}
			}
		},
		//倒计时
		setTimeout_data() {
			let that = this;
			that.timeout = setTimeout(function() {
				let time = parseInt(that.min) * 60 + parseInt(that.sec) - 1;
				if (!that.pause_data && that.listdata.work_status === 'work') {
					that.listdata.work_minute = parseInt(time / 60);
					that.listdata.work_second = time % 60;
					that.dataCan();
				}
			}, 1000)
		},
		//显示弹框
		showAlert(item) {
			let that = this;
			that.modeItem = item;
			that.setTempArr = that.modeItem.tempArr;
			that.setTimeArr = that.modeItem.timeArr;
			that.doanimat = '';
			that.doneanimat = '';
			that.hasTempSetting = item.isNoTemp?false:true;
			if(item.work_mode=='scale_clean'){ //如果是清洁模式，直接启动
				let params = {
							work_status: 'work',
							work_mode: item.work_mode,
							work_minute: 15,
						}
				let status = ['lock', 'work_minute', 'work_hour', 'work_status','work_mode','temperature'];
				that.ctrDevice(params,status,true);
				return;
			}
			

			if (that.online === 'true') {
				if (that.lock === 'off') {
					if (that.power === 'on') {
						if(that.work_status != 'three'){
							that.isset = true;
							if (parseInt(that.listdata.work_minute) === 0 && parseInt(that.listdata.work_hour) === 0) {
								that.setHour = "--"
								that.min = "--";
								that.sec = "--";
							} else {
								that.setHour = parseInt(that.listdata.work_hour);
								that.min = parseInt(that.listdata.work_minute);
								that.sec = parseInt(that.listdata.work_second);
								if(that.timeout === ''){
									// that.setTimeout_data();
								}
							}
							if (parseInt(that.listdata.fire_power) > 0) {
								that.fire = that.listdata.fire_power;
							} else {
								that.fire = '--';
							}
							if (parseInt(that.listdata.temperature) > 0) {
								that.temperature = that.listdata.temperature;
							} else {
								that.temperature = '--';
							}
							that.dataCan();
							that.doanimat = "";
							that.doingAnimation();
						}else{
							prompt.showToast({
								message: "设备正在启动中,请稍后"
							})
						}
					} else {
						prompt.showToast({
							message: "设备关机状态,不能操作"
						})
					}
				} else {
					prompt.showToast({
						message: "童锁打开状态,请关闭童锁在进行操作"
					})
				}

			} else {
				that.isshowclose();
			}
			
		},
		//显示离线提醒
		isshowclose() {
			let that = this;
			that.istips = true;

			// if(that.timeTips != ''){
			// 	that.istips = false;
			// 	clearTimeout(that.timeTips)
			// }
			// if(that.iswarm){
			// 	that.istips = true;
			// 	// that.timeTips = setTimeout(function() {
			// 	// 	that.istips = false;
			// 	// }, 3000)
			// }
		},
		//获取后一天的时间戳
		gettime() {
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		//网络检查
		netWorkGet(str) {
			if(this.iswarm){
				network.getType({
					success: function(data) {
						if (data.type === 'none') {
							prompt.showToast({
								message: str + "，请检查网络",
								duration: 1
							})
						} else {
							prompt.showToast({
								message: str,
								duration: 1
							})
						}
					}
				})
			}
		},
		//获取授权信息
		getAuthor() {
			let that = this;
			account.authorize({
				type: 'code',
				success: function(data) {
					that.code = data.code;
					that.getToken(data.code);
				},
				fail: function(data, code) {
					that.dataCan();
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('授权失败,请稍后重试')
				}
			})
		},
		//获取token 
		getToken(code) {
			let that = this;
			let params = {
				thirdUId: code,
			}
			that.pause_data = true;
			api.getUserToken(params).then((res) => {
				let data_accesstoken = res;
				if (data_accesstoken.code && data_accesstoken.code === 200) {
					let result_data = typeof data_accesstoken.data === 'object'?data_accesstoken.data:JSON.parse(data_accesstoken.data);
					if (!parseInt(result_data.code)) {
						that.openId = result_data.openId;
						that.accessToken = result_data.accessToken;
						let obj = {
							openid: that.openId,
							accessToken: that.accessToken,
							time: that.gettime()
						}
						storage.set({
							key: 'openidToken',
							value: JSON.stringify(obj),
							success: function(data) {

							},
							fail: function(data, code) {

							}
						})
						that.LanOnlineGet();
						that.getDeviceList();
					} else {
						that.dataCan();
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.netWorkGet(api.getCode(result_data.code, "获取访问令牌失败"))
					}
				} else {
					that.dataCan();
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('获取访问令牌失败,请稍后重试')
				}
			}).catch((error,code) => {
				console.log("授权接口：error"+error+":::code"+code)
				that.dataCan();
				that.isRefreshing = false;
				that.isshowLoading = false;
				that.netWorkGet('获取访问令牌失败,请稍后重试')
			})
		},
		/**
		 * 联网获取
		 */
		getdataLan(res){
			let that = this;
			that.isshowLoading = false;
			that.isRefreshing = false;
			that.isfirst = true;
			let data = (typeof res.data) === "object" ? res.data : JSON.parse(res.data);
			if (parseInt(data.code) == 0) {
				let obj =  typeof data.devices[0].properties === 'object'?data.devices[0].properties:JSON.parse(data.devices[0].properties);
				that.listdata = obj;
				that.listDevice = obj;
				that.online = that.listdata.online;
				if (that.online != 'true') {
					that.isshowclose();
				}
				if (!parseInt(data.code)) {
					// let obj =  typeof data.devices[0].properties === 'object'?data.devices[0].properties:JSON.parse(data.devices[0].properties);
					// that.listdata = obj;
					// that.listDevice = obj;
					// that.online = that.listdata.online;
					// if (that.online != 'true') {
					// 	that.isshowclose();
					// }
				} else {
					that.isworking = true;
					if (data.msg === '') {
						let str1 = '';
						if (data.devices[0].status) {
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if (str1.toString() != '-100') {
								that.netWorkGet(api.getStatus("get",str1, '获取设备状态失败'))
							} else {
								if(str1.toString() === '-100' && data.devices[0].description.toString() === '3123'){
									that.isshowclose();
								}else{
									that.netWorkGet(api.getStatus("get",str1,'获取设备状态失败'))
								}
							}
						} else {
							str1 = data.code;
							that.netWorkGet(api.getCode(str1, '获取设备状态失败'))
						}
					} else {
						that.netWorkGet(data.msg)
					}
				}
			} else {
				that.netWorkGet('获取设备状态失败,请稍后重试')
			}
		},
		/**
		 * 局域网获取
		 */
		getLanData(res){
			let that = this;
			that.istips = false;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log(obj.code)
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.listdata = data;
				that.listDevice = data;
				that.online = that.listdata.online;
				// that.listDevice.online = 'true';
				// that.listdata.online = 'true';
				if (that.online != 'true') {
					that.isshowclose();
				}
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceList();
			}
		},
		//获取设备列表
		getDeviceList() {
			console.log("查询设备状态");
			let that = this;
			that.pause_data = true;
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: that.B0list
				}]
			}
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				that.isshowLoading = false;
				that.isRefreshing = false;
				that.isfirst = true;
				if(that.timeout != ''){
					clearTimeout(that.timeout)
				}
				if(that.headtimeout != ''){
					clearTimeout(that.headtimeout)
				}
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
				that.dataCan();
			}).catch((error) => {
				if(error.online){
					if(that.timeout != ''){
						clearTimeout(that.timeout)
					}
					if(that.headtimeout != ''){
						clearTimeout(that.headtimeout)
					}
					that.isworking = true;
					if(that.iswarm){
						that.dataCan();
					}
					that.netWorkGet('获取设备状态失败,请稍后重试');
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.isfirst = true;
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceList();
				}
				console.log("跑这里就是不对了"+JSON.stringify(error))
			})
		},
		//控制家电
		ctrDevice(obj,status,bol) {
			let that = this;
			if(that.door_open=='on'){
				prompt.showToast({
					message: "主人，你的炉子门开了，清先关上门哦"
				})
				return;
			}
			that.isshowLoading = true;
			let status_params = that.listDevice;
			if(bol){
				status_params.work_status = 'work';
			}
			if (status_params.online) {
				delete status_params.online
			}
			if(!that.hasTempSetting){
				delete obj.temperature;
			}
			let params = {
				'openId': that.openId,
				'devices': [{
					"deviceId": that.deviceId,
					"properties": obj,
					"status": status_params
				}]
			}
			that.pause_data = true;
			that.timeout = '';
			console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			// prompt.showToast({
			// 			message: JSON.stringify(params) +'：11下发参数'
			// 		})
			console.log('下发参数'+JSON.stringify(params));
			api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				// prompt.showToast({
				// 		message: JSON.stringify(res) +'：获取控制返回的值'
				// 	})
				that.isagain = true;
				if(that.timeout != ''){
					clearTimeout(that.timeout)
				}
				if(that.headtimeout != ''){
					clearTimeout(that.headtimeout)
				}
				that.isfirst = true;
				if(res.lanonline){
					// prompt.showToast({
					// 	message: '广域网：'+JSON.stringify(res) 
					// })
					console.log('广域网：'+JSON.stringify(res) );
					// that.wlanControl(res);
					
				
				}else{
					// prompt.showToast({
					// 	message: '局域网：'+JSON.stringify(res) 
					// })
					console.log('局域网：'+JSON.stringify(res) );
					// that.lanControl(res,obj,status,bol)
				}
				that.getDeviceList();
				// that.dataCan();

			}).catch((error) => {
				if(error.online){
					if(that.timeout != ''){
						clearTimeout(that.timeout)
					}
					if(that.headtimeout != ''){
						clearTimeout(that.headtimeout)
					}
					that.dataCan();
					that.netWorkGet('获取设备状态失败,请稍后重试');
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.isfirst = true;
				}else{
					that.isagain = false;
					that.lanOnline = 'false';
					that.ctrDevice(obj, status,bol);
					// that.netWorkGet('获取设备状态失败,请稍后重试');
				}
			})
		},
		/**
		 * 局域网控制
		 */
		lanControl(res,obj1,status,bol){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.listdata = data;
				that.listDevice = data;
				that.online = 'true';
				that.listDevice.online = 'true';
				that.listdata.online = 'true';
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.ctrDevice(obj1,status,bol);
				// that.netWorkGet('获取设备状态失败,请稍后重试');
			}
		},
		/**
		 * 广域网控制
		 */
		wlanControl(res){
			let that = this;
			let bind_res_data = typeof res.data === 'object' ? res.data : JSON.parse(res.data);

			if (parseInt(bind_res_data.code) == 0 || parseInt(bind_res_data.code) == 200) {
				if(parseInt(bind_res_data.code) == 0){
					if (!parseInt(bind_res_data.devices[0].status)) {
						that.listdata.online = 'true';
						that.online = 'true';
						let isall = false;
						let obj = typeof bind_res_data.devices[0].props === 'object' ? bind_res_data.devices[0].props : JSON.parse(
							bind_res_data.devices[0].props);
						if (obj.save_power) {
							that.listdata.power = obj.save_power
						} else {
							isall = true;
						}
						if (obj.lock) {
							that.listdata.lock = obj.lock
						} else {
							isall = true;
						}
						if (obj.work_minute.toString()) {
							that.listdata.work_minute = obj.work_minute
						} else {
							isall = true;
						}
						if (obj.work_hour.toString()) {
							that.listdata.work_hour = obj.work_hour
						} else {
							isall = true;
						}
						if (obj.work_second.toString()) {
							that.listdata.work_second = obj.work_second
						} else {
							isall = true;
						}
						if (obj.fire_power) {
							that.listdata.fire_power = obj.fire_power
						} else {
							isall = true;
						}
						if (obj.work_status) {
							that.listdata.work_status = obj.work_status
						} else {
							isall = true;
						}
						if (obj.temperature) {
							that.listdata.temperature = obj.temperature
						} else {
							isall = true;
						}
						if (obj.door_open) {
							that.listdata.door_open = obj.door_open;
						} else {
							isall = true;
						}
						that.listDevice = obj;
						// if (isall) {
						// 	that.isshowLoading = true;
						// 	that.getDeviceList();
						// } else {
						// 	that.isRefreshing = false;
						// 	that.isshowLoading = false;
						// }
						that.isRefreshing = false;
						that.isshowLoading = false;
					} else {
						that.isRefreshing = false;
						that.isshowLoading = false;
						if (bind_res_data.msg === '') {
							let str1 = '';
							if (bind_res_data.devices[0].status) {
								str1 = bind_res_data.devices[0].status;
								if(str1.toString() === '-6'){
									that.isshowclose();
									return false;
								}
								if (str1.toString() != '-100') {
									that.netWorkGet(api.getStatus("post",str1, '操作设备失败'))
								} else {
									if(str1.toString() === '-100' && bind_res_data.devices[0].description.toString() === '3123'){
										that.isshowclose();
									}else{
										that.netWorkGet(api.getStatus("post",str1,'操作设备失败'))
									}
								}
							} else {
								str1 = bind_res_data.code;
								that.netWorkGet(api.getCode(str1, '操作设备失败'))
							}
							// $this.netWorkGet('操作设备失败')
						} else {
							that.netWorkGet(bind_res_data.msg)
						}
					}
				}else{
					that.isRefreshing = false;
					that.isshowLoading = false;
					if (bind_res_data.msg === '') {
						let str1 = '';
						str1 = bind_res_data.code;
						that.netWorkGet(api.getCode(str1, '操作设备失败'))
					} else {
						that.netWorkGet(bind_res_data.msg)
					}
				}
				
			} else {
				that.isRefreshing = false;
				that.isshowLoading = false;
				that.netWorkGet('操作设备失败,请稍后重试')
			}
		},
		//下拉刷新
		scrollbottom(e) {
			let that = this;
			that.isRefreshing = e.refreshing;
			let timestamp = Date.parse(new Date());
			if (that.isfirst) {
				storage.get({
					key: 'openidToken',
					success: function(data) {
						that.isshowLoading = true;
						if(that.isworking){
							that.iswarm = true;
							if (data === '') {
								that.getAuthor();
							} else {
								let obj = JSON.parse(data);
								if (parseInt(timestamp) > parseInt(obj.time)) {
									that.getAuthor();
								} else {
									if (obj.openid === that.openid) {
										that.openId = obj.openid;
										that.accessToken = obj.accessToken;
										if(!that.isLanInit){
											that.LanOnlineGet();
										}
										that.getDeviceList();
									} else {
										that.getAuthor();
									}
								}
							}
						}else{
							prompt.showToast({
								message: "爱心"+(3-that.num)+"秒后再重试"
							})
						}
					},
					fail: function(data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			}
		},
		/**
		 * 局域网初始化
		 */
		LanOnlineGet(){
			let that = this;
			net.deviceInit(that.accessToken,that.deviceId).then((res) => {
				that.isLanInit = true;
			}).catch((error) => {
				that.isLanInit = false;
			});
		},
		//倒计时
		headTime(){
			let that = this;
			let str = 6000;
			if(that.lanOnline == 'true'){
				str = 6000;
			}else{
				str = 10000;
			}
			that.timeoutInter = setInterval(function(){
				that.iswarm = false;
				console.log(111);
				let timestamp = Date.parse(new Date());
					storage.get({
						key: 'openidToken',
						success: function(data) {
							if (data === '') {
								that.getAuthor();
							} else {
								let obj = JSON.parse(data);
								if (parseInt(timestamp) > parseInt(obj.time)) {
									that.getAuthor();
								} else {
									if (obj.openid === that.openid) {
										that.openId = obj.openid;
										that.accessToken = obj.accessToken;
										if(!that.isLanInit){
											that.LanOnlineGet();
										}
										that.getDeviceList();
									} else {
										that.getAuthor();
									}
								}
							}
						},
						fail: function(data, code) {
							console.log(`handling fail, code = ${code}`)
						}
					})
			},str)
		},
		//websocket
		webSocketdata() {
			let that = this;
			api.createWensocket(that.deviceId).then((ws) => {
				that.ws = ws;
				that.isws = true;
				ws.onopen = function() {
					console.log("websocket连接成功")
				}
				ws.onerror = function(data) {
					// 连接失败
					//失败之后再重启
					that.webSocketdata();
					console.log('websocket连接失败:'+JSON.stringify(data))
				}
				ws.onmessage = function(res) {
					if(that.timeout != ''){
						clearTimeout(that.timeout)
					}
					that.pause_data = true;
					let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
					if(obj.status.online){
						that.online = obj.status.online;
						that.listdata.online = obj.status.online;
					}else{
						that.online = 'true';
						that.listdata.online = 'true';
					}
					if (obj.status.power) {
						that.listdata.power = obj.status.power
					}
					if (obj.status.lock) {
						that.listdata.lock = obj.status.lock
					}
					if (obj.status.hour) {
						that.listdata.minutes = obj.status.minutes
					}else{
						that.listdata.minutes = 0;
					}
					if (obj.status.minutes) {
						that.listdata.minutes = obj.status.minutes
					}else{
						that.listdata.minutes = 0;
					}
					if (obj.status.second) {
						that.listdata.second = obj.status.second
					}else{
						that.listdata.second = 0;
					}
					if (obj.status.fire_power) {
						that.listdata.fire_power = obj.status.fire_power
					}
					if (obj.status.temperature) {
						that.listdata.temperature = obj.status.temperature
					}
					if (obj.status.work_status) {
						that.listdata.work_status = obj.status.work_status
					}
					if (obj.status.door_open) {
						that.listdata.door_open = obj.status.door_open;
					}
					if (obj.status.error_code) {
						that.listdata.error_code = obj.status.error_code;
					}
					that.dataCan();
				}
				ws.onclose = function() {
					// 关闭 websocket
					// 关闭之后再重启
					if(!that.isclosews){
						that.webSocketdata();
					}
					console.log("websocket连接已关闭...")
				};
			});
		},
		onclickFn(e){
			this.isabout = false;
		},
		closeWebsocket(){
			let that = this;
			that.isclosews = true;
			if(that.timeoutInter != ''){
				clearInterval(that.timeoutInter);
			}
			if(that.ws != ''){
				that.ws.close({
					code: 1000,
					reason: '退出关闭',
					success: function() {
						that.ws = '';
						console.log("关闭websocket成功")
					},
					fail: function(data, code) {
						console.log("关闭websocke失败, code = "+JSON.stringify(code))
					}
				})
			}
		},
		onHide(){
			let that = this;
			that.istips = false;
			that.closeWebsocket();
		},
		onShow(){
			let that = this;
			that.isclosews = false;
			if(that.timeoutInter != ''){
				clearInterval(that.timeoutInter);
			}
			if(that.online === 'true'){
				that.headTime();

				// if(that.work_status === 'work' || that.work_status === 'work_finish' || that.work_status === 'standby' || that.work_status === 'save_power' || that.work_status === 'order' || that.work_status === 'heat' || that.work_status === 'three'){
				// 	that.headTime();
				// }
			}
			// that.headTime();
			if(that.ws === '' && that.isws){
				// that.webSocketdata();
			}
		},
		onInit() {
			// this.dataCan()
			console.log(this.deviceSeries+' '+this.deviceId+' '+this.openid+'' +'get');
			this.getSecMin();
			let that = this;
			api.getlanguage().then((res) => {
				if (res === 'ug') {
					that.language = false;
				} else {
					that.language = true;
				}
			})
			// this.deviceHeight = this.$app.options.env.deviceHeight;
			router.clear();
			// this.isMeiju();
			//组件控制
			that.$on('cancel', function(e){
				that.isabout = false;
				// prompt.showToast({message:"shdf" + e})
			})
			that.$on('closetips', function(e){
				that.istips = false;
				// prompt.showToast({message:"shdf" + e})
			})
			that.$on('openmenu', function(e){
				that.isabout = !that.isabout;
			})
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function(data) {
					that.isshowLoading = true;
					console.log("token过期:"+JSON.stringify(data))
					if (data === '') {
						that.getAuthor();
					} else {
						let obj = JSON.parse(data);
						if (parseInt(timestamp) > parseInt(obj.time)) {
							that.getAuthor();
						} else {
							if (obj.openid === that.openid) {
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								that.LanOnlineGet();
								// net.startScanDeviceWifi(that.deviceId);
								that.getDeviceList();
							} else {
								that.getAuthor();
							}
						}
					}
				},
				fail: function(data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		// that.headTime();
		},
		onBackPress() {
			let that = this;
			that.closeWebsocket();
			router.clear();
			this.$app.exit();
		}
	}
</script>
<style lang='less'>
	@import "./assets/index.less";
</style>
