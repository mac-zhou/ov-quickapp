<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-about" src="../Component/MideaAbout/index"></import>
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>
<import name="midea-foot" src="../Component/MideaFoot/index"></import>
<import name="midea-selectbottom" src="../Component/MideaSelectDiaBottom/index"></import>
<template>
    <div class="container">
		<midea-head title="吸尘器" language="{{language}}" power="{{online == 'true'?'on':'off'}}"></midea-head>
		<refresh offset="{{isoffset}}" onrefresh="scrollbottom" refreshing="{{isRefreshing}}">
			<list onscrollbottom="" id="list" class="B8_list" style="background-color: {{online == 'true'?'#3191FD':'#CCCCCC'}};">
				<list-item class="B8_nav" type="listItem">
					<div class="{{language?'E1_nav_list_lock':'E1_nav_list_lock_l'}}" @click="downMeiju()">
						<image src="{{online == 'true'?'./assets/img/loadingMeiju.png':'./assets/img/meijuicon.png'}}" class="E1_nav_list_lock_img"></image>
					</div>
					<text class="E1_nav_list_usemeiju">使用美居</text>
					<text class="B8_nav_status" style="color: {{online == 'true'?'#ffffff':'#666666'}};">{{online == 'true'?statusTy(work_status,isdirection):'离线中'}}</text>
					<text if="{{hide}}" class="B8_nav_battery" style="color: {{online == 'true'?'#ffffff':'#666666'}};">电量：56%</text>
					<div class="B8_nav_data" if="{{hide}}">
						<div class="B8_nav_data_left">
							<text class="B8_nav_data_left_data" style="color: {{online == 'true'?'#ffffff':'#666666'}};">2</text>
							<text class="B8_nav_data_left_text" style="color: {{online == 'true'?'#ffffff':'#666666'}};">已清扫面积</text> -->
						</div>
						<div class="B8_nav_data_text">
							<text class="B8_nav_data_left_dan" style="color: {{online == 'true'?'#ffffff':'#666666'}};">m²</text>
						</div>
						<div class="B8_nav_data_center"></div>
						<div class="B8_nav_data_left">
							<text class="B8_nav_data_left_data" style="color: {{online == 'true'?'#ffffff':'#666666'}};">124</text>
							<text class="B8_nav_data_left_text" style="color: {{online == 'true'?'#ffffff':'#666666'}};">已清扫时间</text>
						</div>
						<div class="B8_nav_data_text">
							<text class="B8_nav_data_left_dan" style="color: {{online == 'true'?'#ffffff':'#666666'}};">分</text>
						</div>
					</div>
					<div class="B8_nav_control">
						<div class="B8_nav_control_btn" @touchcancel="doneDirection('can')" @touchend="doneDirection('cel')" @touchstart="moveDirection('left')">
							<image src="{{isdirection == 'left'?'./assets/img/left_off.png':'./assets/img/left_on.png'}}" class="B8_nav_control_btn_img {{isdirection == 'left'?'add_AnimationLeft':''}}"></image>
							<text class="B8_nav_control_btn_text" style="color: {{online == 'true'?leftColor:'#666666'}};">左转</text>
						</div>
						<div class="B8_nav_control_btn" @touchcancel="doneDirection('can')" @touchend="doneDirection('cel')" @touchstart="moveDirection('forward')">
							<image src="{{isdirection == 'forward'?'./assets/img/line_off.png':'./assets/img/line_on.png'}}" class="B8_nav_control_btn_img"></image>
							<text class="B8_nav_control_btn_text" style="color: {{online == 'true'?forwardColor:'#666666'}};">向前</text>
						</div>
						<div class="B8_nav_control_btn" @touchcancel="doneDirection('can')" @touchend="doneDirection('cel')" @touchstart="moveDirection('right')">
							<image src="{{isdirection == 'right'?'./assets/img/right_off.png':'./assets/img/right_on.png'}}" class="B8_nav_control_btn_img {{isdirection == 'right'?'add_Animation':''}}"></image>
							<text class="B8_nav_control_btn_text" style="color: {{online == 'true'?rightColor:'#666666'}};">右转</text>
						</div>
					</div>
				</list-item>
			</list>
		</refresh>
		<midea-selectbottom onclose-dia="closedialog" isform="isform" onselect-num="selectdata" if="{{isshow}}" isshow="{{isshow}}" showline="{{lineNum}}" datalist="{{selectlist}}" isselecticon="{{isselectpic}}"></midea-selectbottom>
		<midea-foot onclick-btn="clickEvent" onclick-alert="showalert" type='1' list-first="{{btnlist}}"></midea-foot>
		<midea-loading if="{{isloading}}"></midea-loading>
		<midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about>
		<midea-tips if="{{istips}}"></midea-tips>
    </div>
</template>
<script>
import api from '../Common/api/api.js';
import router from '@system.router';
import prompt from '@system.prompt';
import fetch from '@system.fetch';
import account from '@service.account';
import storage from '@system.storage';
// import push from '@service.push';
import pkg from '@system.package';
import network from '@system.network';
import net from '../Common/api/networkAPI.js';
import error from './assets/errordata.js';

module.exports = {
	private: {
		isagain:true,
		lanOnline:'false',
		isLanInit:false,
		timeTips:'',
		hide:false,
		isoffset:'-1000px',
		isRefreshing:false,
		language: false,
		isfirst: false,
		isselectpic: false,
		isform:false,
		iswarm: true,
		isyellow:true,
		isshow:false,
		lineNum:3,
		isabout: false,
		istips: false,
		isloading: false,
		isdirection:'none',
		deviceHeight:0,
		selectlist:[{
			name:'弓形模式',
			select:false,
			data:'arc',
			icon:'./assets/img/arc_select_off.png'
		},{
			name:'沿边模式',
			select:false,
			data:'edge',
			icon:'./assets/img/edge_select_off.png'
		},{
			name:'区域模式',
			select:false,
			data:'area',
			icon:'./assets/img/area_select_off.png'
		}],
		leftColor:'#ffffff',
		forwardColor:'#ffffff',
		rightColor:'#ffffff',
		openId: '',
		accessToken: '',
		btnlist:[{
			name:'启动清扫',
			data:'stop',
			textColor:'#666666',
			pic:'./assets/img/work_on.png',
			clickAlert:false
		},{
			name:'弓形模式',
			data:"arc",
			textColor:'#666666',
			pic:'./assets/img/arc_on.png',
			clickAlert:true
		},{
			name:'回充',
			data:"charging",
			textColor:'#666666',
			pic:'./assets/img/charge_on.png',
			clickAlert:false
		}],
		B8list:["work_status","work_mode","move_direction",'failure_low_no_dust_box'],
		B8data:{
			online:"false",
			work_status:'stop',
			work_mode:'none',
			move_direction:'none'
		},
		online:"false",
		work_status:'stop',
		work_mode:'none',
		move_direction:'none',
	},
	public: {
		deviceSeries: '',
		deviceId: '',
		openid: ''
	},
	moveBtn(e){
		prompt.showToast({
			message:JSON.stringify(e)
		})
	},
	isshowclose() {
		let that = this;
		if(that.timeTips != ''){
			that.istips = false;
			clearTimeout(that.timeTips)
		}
		if (that.iswarm) {
			that.istips = true;
			that.timeTips = setTimeout(() => {
				that.istips = false;
			}, 3000);
		}
	},
	onclickFn(e) {
		this.isabout = false;
	},
	closedialog(){
		let that = this;
		that.isshow = false;
	},
	modeTy(mode){
		let that = this;
		let str = '';
		switch(mode){
			case 'none':
				str = "无操作";
			break;
			case 'random':
				str = "随机模式";
			break;
			case 'arc':
				str = "弓形模式";
			break;
			case 'edge':
				str = "沿边模式";
			break;
			case 'emphases':
				str = "重点模式";
			break;
			case 'screw':
				str = "螺旋模式";
			break;
			case 'auto':
				str = "自动模式";
			break;
			case 'bed':
				str = "床底清扫";
			break;
			case 'wide_screw':
				str = "宽阔地方螺旋";
			break;
			case 'area':
				str = "区域清扫";
			break;
			case 'deep':
				str = "深度清扫";
			break;
			default:
				str = "其他|模式";
		}
		return str;
	},
	statusTy(status,isdirection){
		let that = this;
		let str = '';
		let string = status;
		if(status == 'work' && isdirection != 'none'){
			string = isdirection;
		}
		switch(string){
			case 'charge':
				str = '回充中';
			break;
			case 'work':
				str = '清扫中';
			break;
			case 'stop':
				str = '待机中';
			break;
			case 'charging':
				str = '充电中';
			break;
			case 'charging_on_dock':
				str = '充电中';
			break;
			case 'charge_finish':
				str = '直流充电完成';
			break;
			case 'work_finish':
				str = '清扫完成';
			break;
			case 'reserve_task_finished':
				str = '预约任务完成';
			break;
			case 'charging_with_wire':
				str = '直流充电中';
			break;
			case 'error':
				str = '错误';
			break;
			case 'set':
				str = '设置中';
			break;
			case 'left':
				str = '左转中';
			break;
			case 'right':
				str = '右转中';
			break;
			case 'forward':
				str = '向前中';
			break;
			default:
				str = '--';
		}
		return str;
	},
	getColor(str){
		let that = this;
		switch(str){
			case 'left':
				that.leftColor = '#D5D5D5';
				that.forwardColor = '#ffffff';
				that.rightColor = '#ffffff';
			break;
			case 'right':
				that.leftColor = '#ffffff';
				that.forwardColor = '#ffffff';
				that.rightColor = '#D5D5D5';
			break;
			case 'forward':
				that.leftColor = '#ffffff';
				that.forwardColor = '#D5D5D5';
				that.rightColor = '#ffffff';
			break;
			case 'none':
				that.leftColor = '#ffffff';
				that.forwardColor = '#ffffff';
				that.rightColor = '#ffffff';
			break;
		}
	},
	showalert(){
		let that = this;
		if(that.online === 'false'){
			that.isshowclose();
			return false;
		}
		if(that.work_status == 'charge'){
			prompt.showToast({
				message:"设备回充中，请稍后..."
			})
			return false;
		}
		that.isshow = true;
		let num = 100;
		that.selectlistInit();
		that.selectlist.forEach(function(item,i){
			if(that.selectlist[i].data == that.work_mode){
				num = i;
			}
		})
		if(num != 100){
			that.selectlist[num].icon = './assets/img/'+that.work_mode+'_select_on.png';
			that.selectlist[num].select = true;
		}
// 		prompt.showToast({
// 			message:JSON.stringify(that.selectlist)
// 		})
	},
	downMeiju() {
		let that = this;
		let str1 = "确定打开美居？（仅支持美居5.2及以上版本）";
		let str2 = "您还没安装美居app，是否确定下载安装?";
		pkg.hasInstalled({
			package: 'com.midea.ai.appliances',
			success: function(res) {
				prompt.showDialog({
					title: '提示',
					message: res.result?str1:str2,
					buttons: [
						{
							text: res.result?'直接打开':'去下载',
							color: '#33dd44'
						}
					],
					success: function(data) {
						if (res.result) {
							router.push({ uri: 'meiju://com.midea.meiju/main' });
						} else {
							pkg.install({
								package: 'com.midea.ai.appliances',
								success: function(resp) {
									console.log(`handling success: ${resp.result}`);
								},
								fail: function(resp, code) {
									console.log(`handling fail, code = ${code}`);
								}
							});
						}
					},
					cancel: function() {
						console.log('handling cancel');
					},
					fail: function(data, code) {
						console.log(`handling fail, code = ${code}`);
					}
				});
				
				console.log(`handling success: ${res.result}`);
			},
			fail: function(res, code) {
				console.log(`handling fail, code = ${code}`);
			}
		});
	},
	scrollbottom(e) {
		let that = this;
		that.isRefreshing = e.refreshing;
		let timestamp = Date.parse(new Date());
		if (that.isfirst) {
			storage.get({
				key: 'openidToken',
				success: function(data) {
					that.isloading = true;
					that.iswarm = true;
					if (data === '') {
						that.getdevicelist();
					} else {
						let obj = JSON.parse(data);
						if (parseInt(timestamp) > parseInt(obj.time)) {
							that.getdevicelist();
						} else {
							if (obj.openid === that.openid) {
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								if(!that.isLanInit){
									that.LanOnlineGet();
								}
								that.getDeviceStatus(that.openId);
							} else {
								that.getdevicelist();
							}
						}
					}
					console.log('handling success');
				},
				fail: function(data, code) {
					console.log(`handling fail, code = ${code}`);
				}
			});
		}
	},
	clickEvent(e){
		let that = this;
		let params = {};
		let status;
		if(that.online === 'false'){
			that.isshowclose();
			return false;
		}
		if(e.detail.params === "启动清扫"){
			if(that.work_status == 'charge'){
				prompt.showToast({
					message:"设备回充中，请稍后"
				})
				return false;
			}
			params = {
				work_status:'work',
				work_mode:that.work_mode == 'none'?'arc':that.work_mode,
				move_direction:'none',
			}
			that.B8data.work_status = params.work_status;
			that.B8data.move_direction = params.move_direction;
			that.B8data.work_mode = params.work_mode;
			status = ['work_status'];
		}else if(e.detail.params === '停止清扫' || e.detail.params === '取消回充'){
			params = {
				work_status:'stop',
				move_direction:'none',
				// work_mode:'none',
			}
			that.B8data.work_status = params.work_status;
			that.B8data.work_mode = params.work_mode;
			that.B8data.move_direction = params.move_direction;
			status = ['work_status','move_direction','work_mode'];
		}else if(e.detail.params === '回充'){
			if(that.work_status == 'charging' || that.work_status == 'charging_on_dock' || that.work_status == 'charging_with_wire'){
				prompt.showToast({
					message:"设备充电中，请稍后"
				})
				return false;
			}
			if(that.work_status == 'charge_finish'){
				prompt.showToast({
					message:"设备充电已完成"
				})
				return false;
			}
			params = {
				move_direction:'none',
				work_status:'charge'
			}
			that.B8data.work_status = params.work_status;
			status = ['work_status'];
		}
		that.isloading = true;
		that.postDeviceControl(params,status)
	},
	selectdata(e){
		let that = this;
		let params = {
			work_status:'work',
			work_mode:that.selectlist[e.detail.id].data,
			move_direction:'none'
		};
		that.isloading = true;
		let status;
		that.B8data.work_mode = params.work_mode;
		that.B8data.work_status = params.work_status;
		that.B8data.move_direction = params.move_direction;
		status = ['work_mode','work_status','move_direction'];
		that.postDeviceControl(params,status)
	},
	moveDirection(str){
		let that = this;
		if(that.online === 'false'){
			that.isshowclose();
			return false;
		}
		if(that.work_status == 'charge'){
			prompt.showToast({
				message:"设备回充中，请稍后"
			})
			return false;
		}
		if(that.work_status == 'charging' || that.work_status == 'charging_on_dock' || that.work_status == 'charging_with_wire'){
			prompt.showToast({
				message:"设备充电中，请稍后"
			})
			return false;
		}
		if(that.work_status == 'charge_finish'){
			prompt.showToast({
				message:"充电已完成，请启动清扫后再调整方向"
			})
			return false;
		}
		let params = {};
		let status;
		params = {
			work_status:'work',
			work_mode:'none',
			move_direction:str
		}
		
		that.B8data.work_status = params.work_status;
		that.B8data.work_mode = params.work_mode;
		that.B8data.move_direction = params.move_direction;
		status = ['work_mode','move_direction','work_status'];
		that.postDeviceControl(params,status)
// 		if(that.isdirection === 'none'){
// 			that.postDeviceControl(params,status)
// 		}else{
// 			that.doneDirection();
// 		}
	},
	doneDirection(str){
		let that = this;
		if(that.online === 'false'){
			that.isshowclose();
			return false;
		}
		if(that.work_status == 'charge' || that.work_status == 'charging'|| that.work_status == 'charge_finish' || that.work_status == 'charging_on_dock' || that.work_status == 'charging_with_wire'){
			return false;
		}
		let params = {};
		let status;
		if(str == 'cel'){
			that.isloading = true;
		}
		// that.isloading = true;
		params = {
			work_status:'stop',
			work_mode:'none',
			move_direction:'none'
		}
		// that.isdirection = 'none';
		// that.getColor(that.isdirection);
		that.B8data.work_status = params.work_status;
		that.B8data.work_mode = params.work_mode;
		that.B8data.move_direction = params.move_direction;
		status = ['work_mode','move_direction','work_status'];
		that.postDeviceControl(params,status)
	},
	//获取第三方登录信息
	getdevicelist() {
		let that = this;
		account.authorize({
			type: 'code',
			success: function(data) {
				let params = {
					thirdUId: data.code
				};
				api.getUserToken(params).then(res => {
						let data_accesstoken = res;
						if (data_accesstoken.code && data_accesstoken.code === 200) {
							let result_data = typeof data_accesstoken.data === 'object'? data_accesstoken.data: JSON.parse(data_accesstoken.data);
							if (!parseInt(result_data.code)) {
								that.openId = result_data.openId;
								that.openid = result_data.openId;
								that.accessToken = result_data.accessToken;
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								};
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function(data) {},
									fail: function(data, code) {}
								});
								that.LanOnlineGet();
								that.getDeviceStatus(that.openId);
							} else {
								that.initData();
								that.isRefreshing = false;
								that.isloading = false;
								that.netWorkGet(that.getCode(result_data.code, '获取访问令牌失败'));
								that.isfirst = true;
							}
						} else {
							that.initData();
							that.isRefreshing = false;
							that.isloading = false;
							that.netWorkGet('获取访问令牌失败');
							that.isfirst = true;
						}
					})
					.catch(error => {
						that.initData();
						that.isRefreshing = false;
						that.isloading = false;
						that.netWorkGet('获取访问令牌失败');
						that.isfirst = true;
					});
			},
			fail: function(data, code) {
				that.initData();
				that.netWorkGet('授权失败,请稍后重试');
				that.isloading = false;
				that.isRefreshing = false;
				that.isfirst = true;
			}
		});
	},
	/**
	 * 局域网获取
	 */
	getLanData(res){
		let that = this;
		that.istips = false;
		let obj = (typeof res) == 'object'?res:JSON.parse(res);
		if(parseInt(obj.code) == 0){
			let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
			that.B8data = data;
			that.B8data.online = "true";
			that.online = "true";
			that.work_status = data.work_status;
			that.work_mode = data.work_mode;
			that.move_direction = data.move_direction;
			if(that.work_status == 'work' && that.work_mode == 'none'){
				that.isdirection = that.move_direction;
			}else{
				that.isdirection = 'none';
			}
		}else{
			that.isagain = false;
			that.lanOnline = "false";
			that.getDeviceStatus(that.openId);
		}
		that.initData();
	},
	/**
	 * 联网获取
	 */
	getdataLan(res){
		let that = this;
		if (res.code === 200) {
			let data = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
			if (!parseInt(data.code) && !parseInt(data.devices[0].status)) {
				let obj = data.devices[0].properties;
				that.B8data = obj;
				that.online = obj.online;
				that.work_status = obj.work_status;
				that.work_mode = obj.work_mode;
				that.move_direction = obj.move_direction;
				if(that.work_status == 'work' && that.work_mode == 'none'){
					that.isdirection = that.move_direction;
				}else{
					that.isdirection = 'none';
				}
				if (that.online != 'true') {
					that.isshowclose();
				}
			} else {
				that.isstop = true;
				if (data.msg === '') {
					let str1 = '';
					if (data.devices[0].status) {
						str1 = data.devices[0].status;
						if (str1.toString() === '-6') {
							that.isshowclose();
							return false;
						}
						if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
							that.isshowclose();
						} else {
							that.netWorkGet(api.getStatus('get', str1, '获取设备状态失败'));
						}
					} else {
						str1 = data.code;
						that.netWorkGet(api.getCode(str1, '获取设备状态失败'));
					}
				} else {
					that.netWorkGet(data.msg);
				}
			}
		} else {
			
			that.isstop = true;
			that.netWorkGet('获取设备状态失败,请稍后重试');
		}
		that.initData();
	},
	//查询状态
	getDeviceStatus(opid) {
		let that = this;
		let params = {
			openId: opid,
			devices: [
				{
					deviceId: that.deviceId,
					properties: that.B8list
				}
			]
		};
		if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
			that.lanOnline = 'true';
		}else{
			that.lanOnline = 'false';
		}
		api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then(res => {
			that.isagain = true;
			that.isfirst = true;
			that.isRefreshing = false;
			that.isloading = false;
			if(res.lanonline){
				that.getdataLan(res);
			}else{
				that.getLanData(res);
			}
		})
		.catch(error => {
			if(error.online){
				that.initData();
				that.isstop = true;
				that.netWorkGet('获取设备状态失败,请稍后重试');
				that.isfirst = true;
				that.isRefreshing = false;
				that.isloading = false;
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceStatus(that.openId);
			}
		});
	},
	/**
	 * 局域网控制
	 */
	lanControl(res,obj1,status){
		let that = this;
		let obj = (typeof res) == 'object'?res:JSON.parse(res);
		console.log("局域网："+JSON.stringify(res))
		if(parseInt(obj.code) == 0){
			that.isRefreshing = false;
			that.isloading = false;
			let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
			that.work_status = data.work_status;
			that.work_mode = data.work_mode;
			that.move_direction = data.move_direction;
			if(that.work_status == 'work' && that.work_mode == 'none'){
				that.isdirection = that.move_direction;
			}else{
				that.isdirection = 'none';
			}
			that.online = "true";
			that.B8data = data;
			that.B8data.online = "true";
		}else{
			that.isagain = false;
			that.lanOnline = 'false';
			that.postDeviceControl(obj1, status);
		}
		that.initData();
	},
	/**
	 * 广域网控制
	 */
	wlanControl(res){
		let that = this;
		if (res.code === 200) {
			let data = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
			if(parseInt(data.code) == 0){
				if (!parseInt(data.devices[0].status)) {
					that.getDeviceStatus(that.openId);
					return false;
					let obj = typeof data.devices[0].props === 'object' ? data.devices[0].props : JSON.parse(data.devices[0].props);;
					let isall = false;
					if(obj.work_status){
						that.work_status = obj.work_status;
					}else{
						isall = true;
					}
					if(obj.work_mode){
						that.work_mode = obj.work_mode;
					}else{
						isall = true;
					}
					if(obj.move_direction){
						that.move_direction = obj.move_direction;
						if(that.work_status == 'work' && that.work_mode == 'none'){
							that.isdirection = that.move_direction;
						}else{
							that.isdirection = 'none';
						}
					}else{
						isall = true;
					}
					that.B8data = obj;
					if(isall){
						that.getDeviceStatus(that.openId);
					}else{
						that.isRefreshing = false;
						that.isloading = false;
					}
					
				} else {
					that.isRefreshing = false;
					that.isloading = false;
					that.isstop = true;
					if (data.msg === '') {
						let str1 = '';
						if (data.devices[0].status) {
							str1 = data.devices[0].status;
							if (str1.toString() === '-6') {
								that.isshowclose();
								return false;
							}
							if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
								// that.netWorkGet('设备离线')
								that.isshowclose();
							} else {
								that.netWorkGet(api.getStatus('post', str1, '操作设备失败'));
							}
						} else {
							str1 = data.code;
							that.netWorkGet(api.getCode(str1, '操作设备失败'));
						}
					} else {
						that.netWorkGet(data.msg);
					}
				}
			}else{
				that.isRefreshing = false;
				that.isloading = false;
				that.isstop = true;
				if (data.msg === '') {
					let str1 = '';
					str1 = data.code;
					that.netWorkGet(api.getCode(str1, '操作设备失败'));
				} else {
					that.netWorkGet(data.msg);
				}
			}
			
		} else {
			that.isRefreshing = false;
			that.isloading = false;
			that.netWorkGet('操作设备失败,请稍后重试');
		}
		that.initData();
	},
	postDeviceControl(obj, status) {
		let that = this;
		let params = {
			openId: that.openId,
			devices: [
				{
					deviceId: that.deviceId,
					properties: obj,
					status: that.B8data
				}
			]
		};
		console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
		if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
			that.lanOnline = 'true';
		}else{
			that.lanOnline = 'false';
		}
		api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then(res => {
			that.isagain = true;
			if(res.lanonline){
				that.wlanControl(res);
			}else{
				that.lanControl(res,obj,status)
			}
			// that.initData();
		})
		.catch((error) => {
			if(error.online){
				that.initData();
				that.isRefreshing = false;
				that.isstop = true;
				that.netWorkGet('操作设备失败,请稍后重试');
				that.isloading = false;
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(obj, status);
			}
		});
	},
	initData(){
		
		let that = this;
		console.log("拿到的数据："+JSON.stringify(that.B8data));
		if(error.B8error(that.B8data)){
			console.log("错误信息："+error.B8error(that.B8data))
		}
		let status = '';
		let mode = 'on';
		let str = '';
		let textColor1 = '#666666';
		let textColor2 = '#666666';
		let textColor3 = '#666666';
		if(that.work_status === 'work'){
			status = './assets/img/stop_on.png';
		}else if(that.work_status === 'charge'){
			status = './assets/img/work_off.png';
			mode = 'off';
			textColor1 = "#D5D5D5";
			textColor2 = "#D5D5D5";
		}else{
			status = './assets/img/work_on.png';
		}
		if(that.work_status == 'charging' || that.work_status == 'charge_finish' || that.work_status == 'charging_on_dock' || that.work_status == 'charging_with_wire'){
			str = './assets/img/charge_off.png';
			textColor3 = "#D5D5D5";
		}else if(that.work_status == 'charge'){
			str = './assets/img/stop_on.png';
		}else{
			str = './assets/img/charge_on.png';
		}
		let pic = './assets/img/none_off.png';
		if(that.modeSelect(that.work_mode)){
			pic = './assets/img/'+that.work_mode+'_'+mode+'.png';
		}else{
			pic = './assets/img/other_'+mode+'.png';
		}
// 		if(that.move_direction == 'none'){
// 			that.isdirection = false;
// 		}else{
// 			that.isdirection = true;
// 		}
		// that.btnlist = [];
		that.btnlist = [{
			name:that.work_status === 'work'?'停止清扫':'启动清扫',
			data:that.work_status,
			textColor:textColor1,
			pic:status,
			clickAlert:false
		},{
			name:that.modeTy(that.work_mode),
			data:that.modedataTy(that.work_mode),
			textColor:textColor2,
			pic:pic,
			clickAlert:true
		},{
			name:that.work_status == 'charge'?'取消回充':'回充',
			data:that.work_status,
			textColor:textColor3,
			pic:str,
			clickAlert:false
		}]
		that.getColor(that.isdirection);
	},
	modedataTy(mode){
		let that = this;
		let str = '';
		switch(mode){
			case 'random':
				str = "随机";
			break;
			case 'arc':
				str = "弓形";
			break;
			case 'edge':
				str = "沿边";
			break;
			case 'emphases':
				str = "重点";
			break;
			case 'screw':
				str = "螺旋";
			break;
			case 'auto':
				str = "自动";
			break;
			case 'bed':
				str = "床底";
			break;
			case 'wide_screw':
				str = "螺旋";
			break;
			case 'area':
				str = "区域";
			break;
			case 'deep':
				str = "深度";
			break;
			case 'none':
				str = "--";
			break;
			default:
				str = "其他";
		}
		return str;
	},
	selectlistInit(){
		let that = this;
		that.selectlist= [{
			name:'弓形模式',
			select:false,
			data:'arc',
			icon:'./assets/img/arc_select_off.png'
		},{
			name:'沿边模式',
			select:false,
			data:'edge',
			icon:'./assets/img/edge_select_off.png'
		},{
			name:'区域模式',
			select:false,
			data:'area',
			icon:'./assets/img/area_select_off.png'
		}]
	},
	modeSelect(mode){
		let that = this;
		let str = '';
		let arry = ['arc','edge','area','none'];
		let src = false;
		if(arry.includes(mode)){
			src = true;
		}
		return src;
	},
	netWorkGet(str) {
		if (this.iswarm) {
			network.getType({
				success: function(data) {
					if (data.type === 'none') {
						prompt.showToast({
							message: str + '请检查网络',
							duration: 1
						});
					} else {
						prompt.showToast({
							message: str,
							duration: 1
						});
					}
				}
			});
		}
	},
	/**
	 * 局域网初始化
	 */
	LanOnlineGet(){
		let that = this;
		net.deviceInit(that.accessToken,that.deviceId).then((res) => {
			that.isLanInit = true;
		}).catch((error) => {
			that.isLanInit = false;
		});
	},
	gettime() {
		let timestamp = Date.parse(new Date());
		return parseInt(timestamp) + 3600000;
	},
	onMenuPress() {
		this.isabout = !this.isabout;
	},
	closeWebsocket(e) {
		let that = this;
		that.isclosews = true;
		if (that.timeoutInter != '') {
			clearInterval(that.timeoutInter);
		}
	},
	onHide() {
		let that = this;
		that.istips = false;
		that.closeWebsocket();
	},
	onShow() {
		let that = this;
		that.isclosews = false;
		if (that.ws === '' && that.isws) {
			// that.webSocketdata();
		}
	},
	onInit() {
		api.getlanguage().then(res => {
			if (res === 'ug') {
				this.language = false;
			} else {
				this.language = true;
			}
		});
		let that = this;
		// that.deviceHeight = that.$app.options.env.deviceHeight;
		router.clear();
		that.$on('cancel', function(e) {
			that.isabout = false;
		});
		that.$on('closetips', function(e) {
			that.istips = false;
		});
		that.$on('openmenu', function(e) {
			that.isabout = !that.isabout;
		});
		let timestamp = Date.parse(new Date());
		storage.get({
			key: 'openidToken',
			success: function(data) {
				that.isloading = true;
				if (data === '') {
					that.getdevicelist();
				} else {
					let obj = JSON.parse(data);
					if (parseInt(timestamp) > parseInt(obj.time)) {
						that.getdevicelist();
					} else {
						if (obj.openid === that.openid) {
							that.openId = obj.openid;
							that.accessToken = obj.accessToken;
							that.LanOnlineGet();
							that.getDeviceStatus(that.openId);
						} else {
							that.getdevicelist();
						}
					}
				}
				console.log('handling success');
			},
			fail: function(data, code) {
				console.log(`handling fail, code = ${code}`);
			}
		});
	},
	onCreate() {},
	onBackPress() {
		router.clear();
		this.$app.exit();
	}
};
</script>

<style lang='less'>
	@import "./assets/index.less";
</style>