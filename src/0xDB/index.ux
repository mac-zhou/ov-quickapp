<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<!-- <import name="midea-about" src="../Component/MideaAbout/index"></import> -->
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>
<template>
    <div class="container">
		<midea-head title="洗衣机" onclose-websocket="closeWebsocket" language="{{language}}" power="{{col}}"></midea-head>
        <!-- <div class="nav_ac" style="background-color: {{col == 'on'?Color:bgColor}};"> -->
			<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="scrollbottom" refreshing="{{isRefreshing}}">
				<list onscrollbottom="" onscroll="" class="main-nav" id="listdeviceNav" style="background-color: {{col == 'on'?Color:bgColor}};">
					<list-item type="deviceNav" class="main-nav-nav">
						<div class="nav_clock" style="justify-content:{{language?'flex-end':'flex-start'}}">
							<image src="{{col === 'on'?'./assets/img/loadingMeiju.png':'./assets/img/meijuicon.png'}}" @click="downMeiju()" class="child-lock-image"></image>
						</div>
						<text class="child-lock-text" style="color: {{col === 'on'?'#ffffff':'#666666'}};">使用美居</text>
						<div class="nav_time_show" if="{{col === 'on' && running_status != 'standby'}}">
							<text class="nav_time_data" style="color: {{col === 'on'?'#ffffff':'#666666'}};">
								<span>{{remain_time?remain_time:'--'}}</span>
							</text>
						</div>
						<text class="nav_time_show_text" if="{{col === 'on' && running_status != 'standby'}}" style="color: {{col === 'on'?'#ffffff':'#666666'}};">
							<span>大约需要</span>
						</text>
						<text if="{{col === 'on' && running_status === 'standby'}}" class="nav_time_cancel" style="color: {{col === 'on'?'#ffffff':'#666666'}};">待机中</text>
						<text if="{{col === 'on' && running_status === 'standby'}}" class="nav_time_canceltext" style="color: {{col === 'on'?'#ffffff':'#666666'}};">请选择下方功能</text>
						<text if="{{col != 'on'}}" class="nav_time_cancel" style="color: {{col === 'on'?'#ffffff':'#666666'}};">已关机</text>
						<text if="{{col != 'on'}}" class="nav_time_canceltext" style="color: {{col === 'on'?'#ffffff':'#666666'}};">点击下方开关</text>
					</list-item>
				</list>
			</refresh>
			<text class="nav_time_text" if="{{col === 'on' && running_status != 'standby'}}" style="color: {{col === 'on'?'#ffffff':'#666666'}};left: {{parseInt(remain_time)>99?'850px':'750px'}};">
				<span>分</span>
			</text>
            <div class="nav_control_btn" if="{{stopData + col != 'starton' && stopData + col != 'pauseon'}}">
                <div class="nav_List_1">
                    <div class="nav_listDetails" @click="openData1()">
                        <image class="nav_img" src="./assets/img/off.png"></image>
                        <text class="nav_control_text">开关</text>
                    </div>
					<div class="nav_listDetails" @click="openData('cotton')">
                        <image class="nav_img" src="{{(col + program) === 'oncotton'?'./assets/img/cotton_on.png':'./assets/img/cotton_off.png'}}"></image>
                        <text class="nav_control_text" style="color: {{(col + program) === 'oncotton'?'#000000':'#cccccc'}};">棉麻洗</text>
                    </div>
					<div class="nav_listDetails" @click="openData('mixed_wash')">
                        <image class="nav_img" src="{{(col + program) === 'onmixed_wash'?'./assets/img/max_on.png':'./assets/img/max_off.png'}}"></image>
                        <text class="nav_control_text" style="color: {{(col + program) === 'onmixed_wash'?'#000000':'#cccccc'}};">混合洗</text>
                    </div>
					<div class="nav_listDetails" @click="openData('fast_wash')">
                        <image class="nav_img" src="{{(col + program) === 'onfast_wash'?'./assets/img/fast_on.png':'./assets/img/fast_off.png'}}"></image>
                        <text class="nav_control_text" style="color: {{(col + program) === 'onfast_wash'?'#000000':'#cccccc'}};">快洗</text>
                    </div>
                </div>
            </div>
        <!-- </div> -->
		<div class="nav_start_stop" if="{{stopData + col === 'starton'}}">
			<image class="nav_start" src="./assets/img/pause.png" @click="pauseDevice"></image>
			<text class="nav_start_text">暂停</text>
		</div>
		<div class="nav_stop_start" if="{{stopData + col === 'pauseon'}}">
			<div class="nav_stop1" @click="stopDevice">
				<image class="{{language?'nav_stop_img':'l_nav_stop_img'}}" src="./assets/img/stop.png"></image>
				<text class="{{language?'nav_stop_text':'l_nav_stop_text'}}">关机</text>
			</div>
			<div class="nav_stop1" @click="startDevice">
				<image class="{{language?'nav_stop_img1':'l_nav_stop_img1'}}" src="./assets/img/start.png"></image>
				<text class="{{language?'nav_stop_text1':'l_nav_stop_text1'}}">继续</text>
			</div>
		</div>
		<midea-loading if="{{isloading}}"></midea-loading>
		<!-- <midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about> -->
		<midea-tips if="{{istips}}"></midea-tips>
    </div>
</template>

<style>
    @import "./assets/index.css";
	@import "./assets/language.css";
</style>

<script>
	import api from '../Common/api/api.js';
    import router from '@system.router';
    import prompt from '@system.prompt';
    import fetch from '@system.fetch';
    import account from '@service.account';
    import storage from '@system.storage'
	// import IOT from '@service.iot';
	import push from '@service.push';
	import pkg from '@system.package';
	import network from '@system.network'
	import net from '../Common/api/networkAPI.js';
    module.exports = {
        private: {
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			ws: '',
			isws: false,
			isclosews: false,
			language: true,
			stopData:"pause",
			col:'off',
			istips: false,
			isabout: false,
			online: 'false',
			isstop: false,
			isfirst: false,
			isopen_:"water_level",
			isloading: false,
			accessToken: '',
			openId: '',
			code: '',
			showDialog: false,
            is_up: true,
            isopen: true,
            bgColor: '#CCCCCC',
            Color: "#3191FD",
			id: 0,
			iswarm: true,
			timeoutInter: '',
			water_1:'',
			water_2:'',
			water_3:'',
			water_4:'',
			water_5:'',
			obj1: [],
			obj2: [],
            clock: {
                onicon: './assets/img/clock_on.png',
                officon: "./assets/img/clock_off.png",
                icon: './assets/img/clock.png',
                name: 'clock'
            },
            controlNavList: [{
                name: '快净',
                value: '',
                src: ""
            }],
			power: "off",
			program: "cotton",
			control_status: "pause",
			running_status: "pause",
			remain_time: 15,
			dataLists:{
				power: "off",
				program: "cotton",
				control_status: "pause",
				running_status: "pause",
				remain_time: 15
			},
			DBdata:["power","control_status","running_status","program","remain_time"],
            pro_list: [{
                name: "水位",
                bol: true,
                value: "low",
                data: 1,
            }, {
                name: "水温",
                bol: false,
                value: "60",
                data: 4,
            }, {
                name: "脱水速度",
                bol: false,
                value: "0",
                data: 0,
            }, {
                name: "洗涤次数",
                bol: false,
                value: "5",
                data: 5,
            }, {
                name: "脱水时间",
                bol: false,
                value: "10",
                data: 1,
            }],
            list_1: [],
            list_2: [],
            datalist: [],
			listDevice:{},
			time: [],
			water:[{
				"name": "低水位",
                "value": "low",
                "icon": "",
                "color": ''
			},{
				"name": "中水位",
                "value": "middle",
                "icon": "",
                "color": ''
			},{
				"name": "高水位",
                "value": "high",
                "icon": "",
                "color": ''
			},{
				"name": "自动",
                "value": "auto",
                "icon": "",
                "color": ''
			}],
			water_T:[{
				"name": "冷水",
                "value": "0",
                "icon": "",
                "color": ''
			},{
				"name": "20℃",
                "value": "20",
                "icon": "",
                "color": ''
			},{
				"name": "30℃",
                "value": "30",
                "icon": "",
                "color": ''
			},{
				"name": "40℃",
                "value": "40",
                "icon": "",
                "color": ''
			},{
				"name": "60℃",
                "value": "60",
                "icon": "",
                "color": ''
			},{
				"name": "95℃",
                "value": "95",
                "icon": "",
                "color": ''
			}],
			water_s:[{
				"name": "0",
                "value": "0",
                "icon": "",
                "color": ''
			},{
				"name": "600",
                "value": "600",
                "icon": "",
                "color": ''
			},{
				"name": "800",
                "value": "800",
                "icon": "",
                "color": ''
			},{
				"name": "1000",
                "value": "1000",
                "icon": "",
                "color": ''
			},{
				"name": "1400",
                "value": "1400",
                "icon": "",
                "color": ''
			}],
			water_num:[{
				"name": "0",
                "value": "0",
                "icon": "",
                "color": ''
			},{
				"name": "1",
                "value": "1",
                "icon": "",
                "color": ''
			},{
				"name": "2",
                "value": "2",
                "icon": "",
                "color": ''
			},{
				"name": "3",
                "value": "3",
                "icon": "",
                "color": ''
			},{
				"name": "4",
                "value": "4",
                "icon": "",
                "color": ''
			},{
				"name": "智能",
                "value": "5",
                "icon": "",
                "color": ''
			}],
			water_time:[{
				"name": "0",
                "value": 0,
                "icon": "",
                "color": ''
			},{
				"name": "10分钟",
                "value": 10,
                "icon": "",
                "color": ''
			},{
				"name": "20分钟",
                "value": 20,
                "icon": "",
                "color": ''
			},{
				"name": "30分钟",
                "value": 30,
                "icon": "",
                "color": ''
			},{
				"name": "40分钟",
                "value": "",
                "icon": "",
                "color": ''
			},{
				"name": "50分钟",
                "value": 50,
                "icon": "",
                "color": ''
			},{
				"name": "60分钟",
                "value": 60,
                "icon": "",
                "color": ''
			}]
		},
		public: {
			deviceSeries: '',
			deviceId: '',
			openid: ''
		},
		isshowclose(){
			let that = this;
			if(that.timeTips != ''){
				that.istips = false;
				clearTimeout(that.timeTips)
			}
			if(that.iswarm){
				that.istips = true;
				that.timeTips = setTimeout(() => {
					that.istips = false;
				},3000)
			}
		},
		onclickFn(e){
			this.isabout = false;
		},
		downMeiju(){
			let that = this;
			let str1 = "确定打开美居？（仅支持美居5.2及以上版本）";
			let str2 = "您还没安装美居app，是否确定下载安装?";
			pkg.hasInstalled({
				package: 'com.midea.ai.appliances',
				success: function(res) {
					prompt.showDialog({
						title: '提示',
						message: res.result?str1:str2,
						buttons: [
							{
								text: res.result?'直接打开':'去下载',
								color: '#33dd44'
							}
						],
						success: function(data) {
							if (res.result) {
								router.push({ uri: 'meiju://com.midea.meiju/main' });
							} else {
								pkg.install({
									package: 'com.midea.ai.appliances',
									success: function(resp) {
										console.log(`handling success: ${resp.result}`);
									},
									fail: function(resp, code) {
										console.log(`handling fail, code = ${code}`);
									}
								});
							}
						},
						cancel: function() {
							console.log('handling cancel');
						},
						fail: function(data, code) {
							console.log(`handling fail, code = ${code}`);
						}
					});
					
					console.log(`handling success: ${res.result}`);
				},
				fail: function(res, code) {
					console.log(`handling fail, code = ${code}`);
				}
			});
		},
		lockDevice(){
			let params;
			if(this.dataLists.lock === 'off'){
				params = {
					lock: 'on'
				}
			}else{
				params = {
					lock: 'off'
				}
			}
			let status = this.dataLists;
			delete status.lock;
			this.postDeviceControl(params,status);
		},
		pauseDevice(){
			let params = {
				control_status: 'pause'
			}
			let status = this.dataLists;
			// status.control_status = 'pause';
			status.running_status = 'pause';
			delete status.control_status;
			this.postDeviceControl(params,status);
		},
		startDevice(){
			let params = {
				control_status: 'start'
			}
			let status = this.dataLists;
			status.running_status = 'start';
			delete status.control_status;
			this.postDeviceControl(params,status);
		},
		stopDevice(){
			this.isstop = true;
			let that = this;
			that.isloading = true;
			let params;
			params = {
				power: "off"
			}
			let status = that.dataLists;
			status.power = 'off';
			delete status.running_status;
			that.postDeviceControl(params,status);
		},
		open_Data(){
			let that = this;
			if(that.dataLists.power === 'on' && that.dataLists.online === 'true'){
					that.showDialog = true;
					that.water_1 = that.dataLists.water_level;
					that.water_2 = that.dataLists.temperature;
					that.water_3 = that.dataLists.dehydration_speed;
					that.water_4 = that.dataLists.soak_count;
					that.water_5 = that.dataLists.dehydration_time;
			}else if(that.dataLists.online === 'false'){
				this.isshowclose();
			}else{
				prompt.showToast({message:"设备关机状态,不能操作"})
			}
		},
		levelFilter(str){
			if(str){
				switch(str){
					case 'auto':
						return '自动';
					break;
					case 'low':
						return '低水位';
					break;
					case 'middle':
						return '中水位';
					break;
					case 'high':
						return '高水位';
					break;
					default:
						return '--';
				}
			}else{
				return '--';
			}
		},
		temFilter(str){
			let that = this;
			if(str){
				switch(str){
					case '0':
						return '冷水';
					break;
					case 'invalid':
						return '--';
					break;
					default:
						return str + '℃';
				}
			}else{
				return '--';
			}
		},
		speedFilter(str){
			let that = this;
			if(str){
				switch(str){
					case '0':
						return '免脱水';
					break;
					case 'invalid':
						return '--';
					break;
					default:
						return str + '转'
				}
			}else{
				return '--';
			}
		},
		countFilter(str){
			let that = this;
			if(str){
				switch(str){
					case '5':
						return '智能';
					break;
					case 'invalid':
						return '--';
					break;
					default:
						return str + '次'
				}
			}else{
				return '--';
			}
		},
		timeFilter(str){
			let that = this;
			if(str){
				switch(str){
					case 'invalid':
						return '--';
					break;
					default:
						return str + '分钟'
				}
			}else{
				return '--';
			}
		},
		scrollbottom(e){
			let that = this;
			that.isRefreshing = e.refreshing;
			let timestamp = Date.parse(new Date());
			if(that.isfirst){
				storage.get({
					key: 'openidToken',
					success: function (data) {
						that.isloading = true;
						that.iswarm = true;
						if(data === ''){
							that.getdevicelist();
						}else{
							let obj = JSON.parse(data);
							if(parseInt(timestamp) > parseInt(obj.time)){
								that.getdevicelist();
							}else{
								if(obj.openid === that.openid){
									that.openId = obj.openid;
									that.accessToken = obj.accessToken;
									if(!that.isLanInit){
										that.LanOnlineGet();
									}
									that.getDeviceStatus(that.openId);
								}else{
									that.getdevicelist();
								}
							}
						}
						console.log('handling success')
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			}
		},
		timeGetData(){
			let that = this;
			that.timeoutInter = setInterval(function(){
				that.iswarm = false;
				let timestamp = Date.parse(new Date());
				storage.get({
					key: 'openidToken',
					success: function (data) {
						if(data === ''){
							that.getdevicelist();
						}else{
							let obj = JSON.parse(data);
							if(parseInt(timestamp) > parseInt(obj.time)){
								that.getdevicelist();
							}else{
								if(obj.openid === that.openid){
									that.openId = obj.openid;
									that.accessToken = obj.accessToken;
									if(!that.isLanInit){
										that.LanOnlineGet();
									}
									that.getDeviceStatus(that.openId);
								}else{
									that.getdevicelist();
								}
							}
						}
						console.log('handling success')
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			},3000)
		},
		closeDialog(){
			this.showDialog = false;
		},
		confirm(){
			this.isloading = true;
			this.showDialog = false;
			let params = {
				program: 'mixed_wash',
				water_level: this.water_1,
				temperature: this.water_2,
				dehydration_speed: this.water_3,
				soak_count: this.water_4,
				dehydration_time: this.water_5,
				control_status: 'start'
			}
			let status = this.dataLists;
			delete status.soak_count;
			this.postDeviceControl(params,status);
		},
		openData1(){
			let that = this;
			that.isloading = true;
			let params;
			let status = that.dataLists;
			if(that.dataLists.power === "on"){
				params = {
					power: "off"
				}
				status.power = 'off';
			}else{
				params = {
					power: "on"
				}
				delete status.control_status
			}
			delete status.running_status;
			delete status.power;
			that.postDeviceControl(params,status);
		},
		openData(str){
			let that = this;
			console.log("that.col:"+that.col+":::::::::::::that.online:"+that.online)
			if(that.col == 'on' && that.online == 'true'){
				that.isloading = true;
				let params = {
					program: str,
					control_status: "start"
				}
				let status = that.dataLists;
				delete status.program;
				delete status.control_status;
				that.postDeviceControl(params,status);
			}else if(that.online === 'false'){
				this.isshowclose();
				// prompt.showToast({message:"设备离线状态"})
			}else{
				prompt.showToast({message:"设备关机状态,不能操作"})
			}
		},
		close_device(){
			for(let i = 0; i < this.list_2.length;i++){
				this.list_2[i].value = false;
				this.list_2[i].src = "./assets/img/" + this.list_2[i].data + "_off.png";
			}
			for(let n = 0; n < this.list_1.length;n++){
				if(n > 0){
					this.list_1[n].value = false;
					this.list_1[n].src = "./assets/img/" + this.list_1[n].data + "_off.png";
				}
			}
		},
		closeOpen(str,obj,data) {
			let that = this;
			that.isopen_ = str;
			let id = 90;
			obj.forEach(function(item,i){
				if(item === data){
					id = i;
					setTimeout(function(){
						that.$element(str).scrollTo({index:id});
					},200)
				}
			})
		},
		changedata(obj,n){
			let that = this;
			switch(obj){
				case 0:
					return that.water[n].name;
				break;
				case 1:
					return that.water_T[n].name;
				break;
				case 2:
					return that.water_s[n].name;
				break;
				case 3:
					return that.water_num[n].name;
				break;
				case 4:
					return that.water_time[n].name;
				break;
			}
			return obj
		},
		selectData(id,str){
			let that = this;
			switch(id){
				case 0:
					that.water_1 = str;
				break;
				case 1:
					that.water_2 = str;
				break;
				case 2:
					that.water_3 = str;
				break;
				case 3:
					that.water_4 = str;
				break;
				case 4:
					that.water_5 = str;
				break;
			}
		},
		//获取第三方登录信息
		getdevicelist(){
			let that = this;
			// that.isloading = true;
			account.authorize({
				type: 'code',
				success: function(data) {
					let params = {
						thirdUId: data.code,
					}
					api.getUserToken(params).then((res) => {
						let data_accesstoken = res;
						if (data_accesstoken.code && data_accesstoken.code === 200) {
							let result_data = (typeof data_accesstoken.data) === "object"?data_accesstoken.data:JSON.parse(data_accesstoken.data);
							if (!parseInt(result_data.code)) {
								that.openId = result_data.openId;
								that.accessToken = result_data.accessToken;
								// that.isloading = true;
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								}
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function (data) {
										
									},
									fail: function (data, code) {
										
									}
								})
								that.LanOnlineGet();
								that.getDeviceStatus(that.openId);
							} else {
								that.initData();
								that.isRefreshing = false;
								that.isloading = false;
								that.netWorkGet(that.getCode(result_data.code,"获取访问令牌失败"))
								// that.netWorkGet('获取访问令牌失败')
								that.isfirst = true;
							}
						} else {
							that.initData();
							that.isRefreshing = false;
							that.isloading = false;
							that.netWorkGet('获取访问令牌失败')
							that.isfirst = true;
						}
					}).catch((error) => {
						that.initData();
						that.isRefreshing = false;
						that.isloading = false;
						that.netWorkGet('获取访问令牌失败')
						that.isfirst = true;
					})
					
				},
				fail: function(data, code) {
					that.initData();
					console.log("授权接口：data"+data+":::code"+code)
					that.netWorkGet('授权失败,请稍后重试');
					that.isRefreshing = false;
					that.isloading = false;
					that.isfirst = true;
// 					prompt.showToast({
// 						message: 'authorize:' + code
// 					})
				}
			})
		},
		/**
		 * 局域网获取
		 */
		getLanData(res){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.stopData = data.running_status;
				that.running_status = data.running_status;
				that.col = data.power;
				that.online = "true";
				that.remain_time = data.remain_time;
				that.program = data.program;
				that.dataLists = data;
				that.listDevice = data;
				that.dataLists.online = "true";
				that.listDevice.online = "true";
				if(that.timeoutInter != ''){
					clearInterval(that.timeoutInter);
				}
				if(data.running_status === 'start' || data.running_status === 'pause'){
					that.isstop = false;
					if(data.running_status === 'start'){
						that.timeGetData();
					}
				}else if(data.running_status === 'fault'){
					prompt.showToast({
						message:'设备运行出错，请检查洗衣机是否故障'
					})
				}
				console.log("开关："+that.col)
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceStatus(that.openId);
			}
		},
		/**
		 * 联网获取
		 */
		getdataLan(res){
			let that = this;
			if(res.code === 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.code) && !parseInt(data.devices[0].status)){
					let obj = data.devices[0].properties;
					that.stopData = obj.running_status;
					that.running_status = obj.running_status;
					that.col = obj.power;
					that.online = obj.online;
					that.remain_time = obj.remain_time;
					that.program = obj.program;
					that.dataLists = obj;
					that.listDevice = obj;
					if(that.timeoutInter != ''){
						clearInterval(that.timeoutInter);
					}
					if (that.online != 'true') {
						that.isshowclose()
					}
					if(obj.running_status === 'start' || obj.running_status === 'pause'){
						that.isstop = false;
						if(obj.running_status === 'start'){
							that.timeGetData();
						}
					}else if(obj.running_status === 'fault'){
						prompt.showToast({
							message:'设备运行出错，请检查洗衣机是否故障'
						})
					}
					
				}else{
					that.initData();
					that.isstop = true;
					if(data.msg === ''){
						let str1 = '';
						if(data.devices[0].status){
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if(str1.toString() === '-100' && res_data.devices[0].description.toString() === '3123'){
								// that.netWorkGet('设备离线')
								that.isshowclose();
							}else{
								that.netWorkGet(api.getStatus("get",str1,'获取设备状态失败'))
							}
							// that.netWorkGet(api.getStatus(str1,'获取设备状态失败'))
						}else{
							str1 = data.code;
							that.netWorkGet(api.getCode(str1,'获取设备状态失败'))
						}
						// that.netWorkGet('获取设备状态失败')
					}else{
						that.netWorkGet(data.msg)
					}
					// that.netWorkGet(data.msg)
				}
			}else{
				that.initData();
				that.isstop = true;
				that.netWorkGet('获取设备状态失败,请稍后重试')
			}
		},
		//查询状态
		getDeviceStatus(opid){
			let that = this;
			let params = {
				openId: opid,
				devices: [{
					deviceId: that.deviceId,
					properties: that.DBdata
				}]
			}
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isfirst = true;
				that.isloading = false;
				that.isRefreshing = false;
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
			}).catch((error) => {
				if(error.online){
					that.initData();
					that.isstop = true;
					that.netWorkGet('获取设备状态失败,请稍后重试')
					that.isfirst = true;
					that.isRefreshing = false;
					that.isloading = false;
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceStatus(that.openId);
				}
			})
		},
		dataget(obj){
			that.dataLists = obj;
		},
		/**
		 * 局域网控制
		 */
		lanControl(res,obj1,status){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			if(parseInt(obj.code) == 0){
				that.isRefreshing = false;
				that.isloading = false;
				that.isstop = true;
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.stopData = data.running_status;
				that.running_status = data.running_status;
				that.col = data.power;
				that.online = "true";
				that.remain_time = data.remain_time;
				that.program = data.program;
				that.dataLists = data;
				that.listDevice = data;
				that.dataLists.online = "true";
				that.listDevice.online = "true";
				if(that.timeoutInter != ''){
					clearInterval(that.timeoutInter);
				}
				if(data.running_status === 'start' || data.running_status === 'pause'){
					that.isstop = false;
					if(data.running_status === 'start'){
						that.timeGetData();
					}
				}else if(data.running_status === 'fault'){
					prompt.showToast({
						message:'设备运行出错，请检查洗衣机是否故障'
					})
				}
				console.log("开关："+that.col)
// 				that.CAdata.storage_power = data.storage_power;
// 				that.storage_power = data.storage_power;
// 				that.freezing_power = data.freezing_power;
// 				that.CAdata.freezing_power = data.freezing_power;
// 				that.storage_temperature = data.storage_temperature;
// 				that.CAdata.storage_temperature = data.storage_temperature;
// 				that.freezing_temperature = data.freezing_temperature;
// 				that.CAdata.freezing_temperature = data.freezing_temperature;
// 				if(that.CAdata.storage_power === 'on'){
// 					that.isselect = true;
// 				}else{
// 					that.isselect = false;
// 				}
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(obj1, status);
			}
		},
		/**
		 * 广域网控制
		 */
		wlanControl(res){
			let that = this;
			if(res.code === 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.devices[0].status) && !parseInt(data.code)){
					that.getDeviceStatus(that.openId);
				}else{
					that.initData();
					that.isRefreshing = false;
					that.isloading = false;
					that.isstop = true;
					if(data.msg === ''){
						let str1 = '';
						if(data.devices[0].status){
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if(str1.toString() === '-100' && res_data.devices[0].description.toString() === '3123'){
								// that.netWorkGet('设备离线')
								that.isshowclose();
							}else{
								that.netWorkGet(api.getStatus("post",str1,'操作设备失败'))
							}
						}else{
							str1 = data.code;
							that.netWorkGet(api.getCode(str1,'操作设备失败'))
						}
					}else{
						that.netWorkGet(data.msg)
					}
				}
			}else{
				that.initData();
				that.isRefreshing = false;
				that.isloading = false;
				that.netWorkGet('操作设备失败,请稍后重试')
			}
		},
		postDeviceControl(obj,status){
			let that = this;
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: obj,
					status:that.listDevice
				}]
			}
			that.isloading = true;
			
			console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				if(res.lanonline){
					that.wlanControl(res);
				}else{
					that.lanControl(res,obj,status)
				}
			}).catch((error) => {
				if(error.online){
					that.initData();
					that.isstop = true;
					that.netWorkGet('操作设备失败,请稍后重试')
					that.isloading = false;
					that.isRefreshing = false;
				}else{
					that.isagain = false;
					that.lanOnline = 'false';
					that.postDeviceControl(obj, status);
				}
			})
		},
		initData(){
			this.isfirst = true;
// 			this.dataLists = {
// 				power: "off",
// 				program: "cotton",
// 				control_status: "pause",
// 				running_status: "pause",
// 				remain_time: 15
// 			}
// 			this.program = "cotton";
// 			this.control_status = "pause";
// 			this.running_status = "pause";
// 			this.remain_time = 0;
// 			this.col = "off";
// 			this.online = "false";
// 			if(this.timeoutInter != ''){
// 				clearInterval(this.timeoutInter);
// 			}
		},
		netWorkGet(str){
			if(this.iswarm){
				network.getType({
					success: function (data) {
						if(data.type === 'none'){
							prompt.showToast({
								message: str + "请检查网络",
								duration:1
							}) 
						}else{
							prompt.showToast({
								message: str,
								duration:1
							}) 
						}
					}
				})
			}
		},
		gettime(){
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		onMenuPress(){
			this.isabout = !this.isabout;
		},
		//websocket
				webSocketdata() {
					let that = this;
					api.createWensocket(that.deviceId).then((ws) => {
						that.ws = ws;
						that.isws = true;
						ws.onopen = function() {
							console.log("websocket连接成功")
						}
						ws.onerror = function(data) {
							// 连接失败
							//失败之后再重启
							that.webSocketdata();
							console.log('websocket连接失败')
						}
						ws.onmessage = function(res) {
							let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
							if(obj.status.online){
								that.online = obj.status.online;
								that.dataLists.online = obj.status.online;
							}else{
								that.dataLists.online = 'true';
								that.online = 'true';
							}
							if(obj.status.running_status){
								that.stopData = obj.status.running_status;
								that.dataLists.running_status = obj.status.running_status;
								that.running_status = obj.status.running_status;
							}
							if(obj.status.power){
								that.col = obj.status.power;
								that.dataLists.power = obj.status.power;
							}
							if(obj.status.remain_time){
								that.remain_time = obj.status.remain_time;
								that.dataLists.remain_time = obj.status.remain_time;
							}
							if(obj.status.program){
								that.program = obj.status.program;
								that.dataLists.program = obj.status.program;
							}
							if(obj.status.running_status === 'start' || obj.status.running_status === 'pause'){
								that.isstop = false;
							}
// 							prompt.showDialog({
// 								title: 'websocket',
// 								message: "websocket："+ JSON.stringify(res),
// 								buttons: [{
// 									text: '确定',
// 									color: '#33dd44'
// 								}],
// 								success: function (data) {
// 								},
// 								cancel: function () {
// 									console.log('handling cancel')
// 								},
// 								fail: function (data, code) {
// 									console.log(`handling fail, code = ${code}`)
// 								}
// 							})
						}
						ws.onclose = function() {
							// 关闭 websocket
							// 关闭之后再重启
							if(!that.isclosews){
								that.webSocketdata();
							}
							console.log("websocket连接已关闭...")
						};
					});
				},
				/**
				 * 局域网初始化
				 */
				LanOnlineGet(){
					let that = this;
					net.deviceInit(that.accessToken,that.deviceId).then((res) => {
						that.isLanInit = true;
					}).catch((error) => {
						that.isLanInit = false;
					});
				},
				closeWebsocket(e){
					let that = this;
					that.isclosews = true;
					if(that.timeoutInter != ''){
						clearInterval(that.timeoutInter);
					}
					if(that.ws != ''){
						that.ws.close({
							code: 1000,
							reason: '退出关闭',
							success: function() {
								that.ws = '';
								console.log("关闭websocket成功")
							},
							fail: function(data, code) {
								console.log("关闭websocke失败, code = "+JSON.stringify(code))
							}
						})
					}
				},
				onHide(){
					let that = this;
					that.istips = false;
					that.closeWebsocket();
				},
				onShow(){
					let that = this;
					that.isclosews = false;
					if(that.ws === '' && that.isws){
						// that.webSocketdata();
					}
					if(that.timeoutInter != ''){
						clearInterval(that.timeoutInter);
					}
					that.timeGetData();
				},
        onInit() {
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			let that = this;
			router.clear();
			 // prompt.showToast({message:"deviceid" + this.deviceId + ":::::::openid" + this.openid})
            this.$page.setTitleBar({
                text: '滚筒洗衣机'
            })
			that.$on('cancel', function(e){
				that.isabout = false;
				// prompt.showToast({message:"shdf" + e})
			})
			that.$on('closetips', function(e){
				that.istips = false;
				// prompt.showToast({message:"shdf" + e})
			})
			that.$on('openmenu', function(e){
				that.isabout = !that.isabout;
			})
            for (let i = 0; i < 25; i++) {
                let obj = {}
                obj = {
                    "name": i + "小时",
                    "value": "",
                    "icon": "",
                    "color": ''
                }
                this.time.push(obj);
            }
			this.datalist = this.water;
			this.isloading = true;
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function (data) {
					if(data === ''){
						that.getdevicelist();
					}else{
						let obj = JSON.parse(data);
						if(parseInt(timestamp) > parseInt(obj.time)){
							that.getdevicelist();
						}else{
							if(obj.openid === that.openid){
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								that.LanOnlineGet();
								that.getDeviceStatus(that.openId);
							}else{
								that.getdevicelist();
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
			// this.getdevicelist();
        },
		onCreate(){
			
		},
		onBackPress(){
			router.clear();
			this.$app.exit();
		}
    }
</script>
