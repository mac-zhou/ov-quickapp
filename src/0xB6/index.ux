<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<!-- <import name="midea-about" src="../Component/MideaAbout/index"></import> -->
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>
<import name="midea-foot" src="../Component/MideaFoot/index"></import>
<import name="midea-selectbottom" src="../Component/MideaSelectDiaBottom/index"></import>
<template>
    <div class="container">
		<midea-head title="抽油烟机" language="{{language}}" power="{{(power === 'on' || power === 'delay_off')?'on':'off'}}"></midea-head>
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="scrollbottom" refreshing="{{isRefreshing}}">
			<list onscrollbottom="" id="list" class="E1_list" style="background-color: {{(power === 'on' || power === 'delay_off')?'#3191FD':'#CCCCCC'}};">
				<list-item class="B6_nav" type="listItem">
					<div class="{{language?'B6_nav_list_lock':'B6_nav_list_lock_l'}}" @click="downMeiju()">
						<image src="{{(power === 'on' || power === 'delay_off')?'./assets/img/loadingMeiju.png':'./assets/img/meijuicon.png'}}" class="B6_nav_list_lock_img"></image>
					</div>
					<text class="B6_nav_list_usemeiju" style="color: {{(power === 'on' || power === 'delay_off')?'#ffffff':'#666666'}};">使用美居</text>
					<text if="{{(power === 'on' || power === 'delay_off') && gear < 4}}" class="B6_nav_gear" style="color: {{(power === 'on' || power === 'delay_off')?'#ffffff':'#666666'}};">{{(10 > parseInt(gear) && power == 'on' && parseInt(gear) > 0)?gear:'--'}}</text>
					<text if="{{power === 'off'}}" class="B6_nav_close" style="color: {{(power === 'on' || power === 'delay_off')?'#ffffff':'#666666'}};">已关机</text>
					<text if="{{power === 'off'}}" class="B6_nav_warm" style="color: {{(power === 'on' || power === 'delay_off')?'#ffffff':'#666666'}};">点击下方开关</text>
					<text if="{{(power === 'on' || power === 'delay_off') && gear > 3}}" class="B6_nav_height" style="color: {{(power === 'on' || power === 'delay_off')?'#ffffff':'#666666'}};">{{power == 'on'?'爆炒模式':'--'}}</text>
					<text if="{{power === 'delay_off'}}" class="B6_nav_status" style="color: {{(power === 'on' || power === 'delay_off')?'#ffffff':'#666666'}};">延迟关机中</text>
				</list-item>
			</list>
		</refresh>
		<div class="B6_alert" if="{{isalert}}">
			<div class="B6_alert_nav" style="top: {{deviceHeight/2-312}}px;">
				<text class="B6_alert_nav_head">延时关机</text>
				<text class="B6_alert_nav_middle">确定启动“延时关机”吗</text>
				<div class="B6_alert_nav_foot">
					<div class="B6_alert_nav_foot_btn" @click="close()">
						<text class="B6_alert_nav_foot_btn_left">取消</text>
					</div>
					<div class="B6_alert_nav_foot_btn" @click="delayOff()">
						<text class="B6_alert_nav_foot_btn_right">启动</text>
					</div>
				</div>
			</div>
		</div>
		<midea-selectbottom onclose-dia="closedialog" isform="{{isForm}}" onselect-num="selectdata" isfoot="{{isfoot}}" if="{{isshow}}" isshow="{{isshow}}" showline="{{lingNum}}" datalist="{{selectlist}}" isselecticon="{{isselectpic}}"></midea-selectbottom>
		<text if="{{power === 'on' && gear < 4}}" class="B6_nav_gear_text" style="color: {{power === 'on'?'#ffffff':'#666666'}};">档</text>
		<midea-foot type='1' onclick-alert="btnclick" onclick-btn="clickEv" list-first="{{btnlist}}"></midea-foot>
		<midea-loading if="{{isloading}}"></midea-loading>
		<!-- <midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about> -->
		<midea-tips if="{{istips}}"></midea-tips>
    </div>
</template>
<script>
import api from '../Common/api/api.js';
import router from '@system.router';
import prompt from '@system.prompt';
import fetch from '@system.fetch';
import account from '@service.account';
import storage from '@system.storage';
import push from '@service.push';
import pkg from '@system.package';
import network from '@system.network';
import net from '../Common/api/networkAPI.js';
module.exports = {
	private: {
		isagain:true,
		lanOnline:'false',
		isLanInit:false,
		timeTips:'',
		isForm: true,
		isshow:false,
		isfoot:false,
		isoffset:'-1000px',
		isRefreshing:false,
		isalert:false,
		language: false,
		isfirst: false,
		iswarm: true,
		isabout: false,
		istips: false,
		isloading: false,
		isdelayTips:false,
		isselectpic: false,
		lingNum:2,
		deviceHeight:0,
		selectlist:[{
			name:'01档',
			select:false,
			data:1
		},{
			name:'02档',
			select:false,
			data:2
// 		},{
// 			name:'03档',
// 			select:false,
// 			data:3
// 		},{
// 			name:'爆炒',
// 			select:false,
// 			data:4
		}],
		timeoutInter: '',
		openId: '',
		accessToken: '',
		btnlist:[{
			name:'开关',
			data:'on',
			pic:'./assets/img/off.png',
			clickAlert:false
		},{
			name:'档位',
			data:'off',
			pic:'',
			clickAlert:true
		},{
			name:'延迟关机',
			data:'off',
			pic:'',
			clickAlert:false
		},{
			name:'灯光',
			data:'off',
			pic:'./assets/img/light_off.png',
			clickAlert:false
		}],
		B6list:["power","gear","light","power_delay_left","work_status"],
		B6data:{
			online:'false',
			power:'off',
			gear: 0,
			light: 'off'
		},
		work_status:0,
		online:'false',
		power:'off',
		// intelligent: 'off',
		gear: 0,
		light: 'off'
	},
	public: {
		deviceSeries: '',
		deviceId: '',
		openid: ''
	},
	isshowclose() {
		let that = this;
		that.online = false;
		if(that.timeTips != ''){
			that.istips = false;
			clearTimeout(that.timeTips)
		}
		if (that.iswarm) {
			that.istips = true;
			that.timeTips = setTimeout(() => {
				that.istips = false;
			}, 3000);
		}
	},
	onclickFn(e) {
		this.isabout = false;
	},
	closedialog(){
		let that = this;
		that.isshow = false;
	},
	close(){
		let that = this;
		that.isalert = false;
	},
	btnclick(e){
		let that = this;
		if(that.online === 'false'){
			that.isshowclose();
			return false;
		}
		if(that.power == 'off'){
			prompt.showToast({
				message:"设备关机状态,不能操作"
			})
			return false;
// 		}else if(that.power == 'delay_off'){
// 			prompt.showToast({
// 				message:"延迟关机中，请稍后..."
// 			})
// 			return false;
		}
		let num = 10;
		that.isshow = true;
		that.selectlist.forEach(function(item,i){
			that.selectlist[i].select = false;
			if(that.selectlist[i].data == parseInt(that.gear)){
				num = i;
			}
		})
		if(num != 10){
			that.selectlist[num].select = true;
		}
	},
	downMeiju() {
		let that = this;
		let str1 = "确定打开美居？（仅支持美居5.2及以上版本）";
		let str2 = "您还没安装美居app，是否确定下载安装?";
		pkg.hasInstalled({
			package: 'com.midea.ai.appliances',
			success: function(res) {
				prompt.showDialog({
					title: '提示',
					message: res.result?str1:str2,
					buttons: [
						{
							text: res.result?'直接打开':'去下载',
							color: '#33dd44'
						}
					],
					success: function(data) {
						if (res.result) {
							router.push({ uri: 'meiju://com.midea.meiju/main' });
						} else {
							pkg.install({
								package: 'com.midea.ai.appliances',
								success: function(resp) {
									console.log(`handling success: ${resp.result}`);
								},
								fail: function(resp, code) {
									console.log(`handling fail, code = ${code}`);
								}
							});
						}
					},
					cancel: function() {
						console.log('handling cancel');
					},
					fail: function(data, code) {
						console.log(`handling fail, code = ${code}`);
					}
				});
				
				console.log(`handling success: ${res.result}`);
			},
			fail: function(res, code) {
				console.log(`handling fail, code = ${code}`);
			}
		});
	},
	scrollbottom(e) {
		let that = this;
		that.isRefreshing = e.refreshing;
		let timestamp = Date.parse(new Date());
		// if (that.isfirst) {
			storage.get({
				key: 'openidToken',
				success: function(data) {
					that.isloading = true;
					that.iswarm = true;
					if (data === '') {
						that.getdevicelist();
					} else {
						let obj = JSON.parse(data);
						if (parseInt(timestamp) > parseInt(obj.time)) {
							that.getdevicelist();
						} else {
							if (obj.openid === that.openid) {
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								if(!that.isLanInit){
									that.LanOnlineGet();
								}
								that.getDeviceStatus(that.openId);
							} else {
								that.getdevicelist();
							}
						}
					}
					console.log('handling success');
				},
				fail: function(data, code) {
					console.log(`handling fail, code = ${code}`);
				}
			});
		// }
	},
	timeGetData() {
		let that = this;
		that.timeoutInter = setInterval(function() {
			that.iswarm = false;
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function(data) {
					if (data === '') {
						// that.getdevicelist();
					} else {
						let obj = JSON.parse(data);
						if (parseInt(timestamp) > parseInt(obj.time)) {
							// that.getdevicelist();
						} else {
							if (obj.openid === that.openid) {
								// 									that.openId = obj.openid;
								// 									that.accessToken = obj.accessToken;
								// 									that.getDeviceStatus(that.openId);
							} else {
								// that.getdevicelist();
							}
						}
					}
					console.log('handling success');
				},
				fail: function(data, code) {
					console.log(`handling fail, code = ${code}`);
				}
			});
		}, 3000);
	},
	clickEv(e){
		let that = this;
		let param = {};
		if(that.online === 'true'){
			let status  = [];
			if(e.detail.params === '开关'){
				if(that.power === 'off'){
					param = {
						power:'on'
					}
				}else{
					param = {
						power:'off'
					}
				}
				// that.B6data.power = param.power;
				status = ['power'];
			}else if(e.detail.params === '延迟关机'){
				if(that.power === 'off'){
					prompt.showToast({
						message:"设备关机状态,不能操作"
					})
					return false;
				}
				if(that.power === 'delay_off'){
					prompt.showToast({
						message:"延迟关机中，请稍后..."
					})
					return false;
				}
				that.isalert = true;
// 				param = {
// 					power:'delay_off'
// 				}
// 				status = ['power'];
			}else if(e.detail.params == '灯光'){
// 				if(that.power == 'off'){
// 					prompt.showToast({
// 						message:"设备关机状态,不能操作"
// 					})
// 					return false;
// 				}else if(that.power == 'delay_off'){
// 					prompt.showToast({
// 						message:"延迟关机中，请稍后..."
// 					})
// 					return false;
				// }
				if(that.light === 'on'){
					param = {
						light:'off'
					}
				}else{
					param = {
						light:'on'
					}
				}
				// that.B6data.light = param.light;
				status = ['light'];
			}
			if(!that.isalert){
				that.postDeviceControl(param,status)
			}
		}else{
			that.isshowclose();
		}
	},
	selectdata(e){
		let that = this;
		let i = e.detail.id;
		let param = {
			gear:that.selectlist[i].data
		}
		that.selectlist = e.detail.param;
		that.B6data.gear = param.gear;
		let status = ['gear'];
		that.postDeviceControl(param,status)
	},
	delayOff(){
		let that = this;
		that.isdelayTips = true;
		let param = {
			power:'delay_off'
		}
		let status = ['power'];
		that.isalert = false;
		that.postDeviceControl(param,status);
	},
	workStatus(status){
		let that = this;
		let tips = '';
		let num = parseInt(status);
		console.log("这里的："+num)
		switch(num){
			case 0:
				tips = "off";
			break;
			case 1:
				tips = "off";
			break;
			case 2:
				tips = "on";
			break;
			case 3:
				if(!that.isdelayTips){
					prompt.showToast({
						message:"延迟关机中，请稍后..."
					})
				}
				that.isdelayTips
				that.power = 'delay_off';
				tips = "delay_off";
			break;
			case 4:
				prompt.showToast({
					message:"正在开机中，请稍后..."
				})
				tips = "on";
			break;
			case 5:
				prompt.showToast({
					message:"正在关机中，请稍后..."
				})
				tips = "off";
			break;
			case 6:
				prompt.showToast({
					message:"正在清洗中，请稍后..."
				})
				tips = "on";
			break;
			case 7:
				prompt.showToast({
					message:"正在清洗中，请稍后..."
				})
				tips = "on";
			break;
			case 8:
				prompt.showToast({
					message:"设置时间中，请稍后..."
				})
				tips = "on";
			break;
			case 9:
				prompt.showToast({
					message:"污浊度检测中，请稍后..."
				})
				tips = "on";
			break;
			default:
				prompt.showToast({
					message:"设备可能出故障了..."
				})
				tips = "off";
		}
		that.isdelayTips = false;
		return tips;
	},
	//获取第三方登录信息
	getdevicelist() {
		let that = this;
		account.authorize({
			type: 'code',
			success: function(data) {
				let params = {
					thirdUId: data.code
				};
				api.getUserToken(params).then(res => {
						let data_accesstoken = res;
						if (data_accesstoken.code && data_accesstoken.code === 200) {
							let result_data = typeof data_accesstoken.data === 'object'? data_accesstoken.data: JSON.parse(data_accesstoken.data);
							if (!parseInt(result_data.code)) {
								that.openId = result_data.openId;
								that.accessToken = result_data.accessToken;
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								};
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function(data) {},
									fail: function(data, code) {}
								});
								that.LanOnlineGet();
								that.getDeviceStatus(that.openId);
							} else {
								that.initData();
								that.isRefreshing = false;
								that.isloading = false;
								that.netWorkGet(that.getCode(result_data.code, '获取访问令牌失败'));
								that.isfirst = true;
							}
						} else {
							that.initData();
							that.isRefreshing = false;
							that.isloading = false;
							that.netWorkGet('获取访问令牌失败');
							that.isfirst = true;
						}
					})
					.catch(error => {
						that.isRefreshing = false;
						that.initData();
						that.isloading = false;
						that.netWorkGet('获取访问令牌失败');
						that.isfirst = true;
					});
			},
			fail: function(data, code) {
				that.initData();
				that.isRefreshing = false;
				that.netWorkGet('授权失败,请稍后重试');
				that.isloading = false;
				that.isfirst = true;
			}
		});
	},
	/**
	 * 局域网获取
	 */
	getLanData(res){
		console.log("局域网了+++++++++++++")
		let that = this;
		let obj = (typeof res) == 'object'?res:JSON.parse(res);
		if(parseInt(obj.code) == 0){
			let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
			that.online = 'true';
			if(data.work_status){
				that.work_status = data.work_status;
				that.power = that.workStatus(that.work_status);
			}else{
				if(data.power){
					that.power = data.power;
				}else{
					that.power = "on";
				}
			}
// 			if(data.power){
// 				that.power = data.power;
// 			}else{
// 				if(data.work_status.toString()){
// 					that.work_status = data.work_status;
// 				}else{
// 					that.work_status = 0;
// 				}
// 				that.power = that.workStatus(that.work_status);
// 			}
			console.log("work_status"+that.work_status+"::::::::::power"+that.power)
			that.B6data = data;
			that.B6data.power = that.power;
			that.gear = data.gear;
			that.light = data.light;
			that.initData();
		}else{
			that.isagain = false;
			that.lanOnline = "false";
			that.getDeviceStatus(that.openId);
		}
	},	
	/**
	 * 联网获取
	 */
	getdataLan(res){
		let that = this;
		if (res.code === 200) {
			let data = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
			if (!parseInt(data.code) && !parseInt(data.devices[0].status)) {
				let obj = data.devices[0].properties;
				if (that.timeoutInter != '') {
					clearInterval(that.timeoutInter);
				}
				that.online = obj.online;
				if(obj.power){
					that.power = obj.power;
				}else{
					if(obj.work_status){
						if(obj.work_status.toString()){
							that.work_status = obj.work_status;
							that.power = that.workStatus(obj.work_status);
						}
					}
				}
				that.B6data = obj;
				that.B6data.power = that.power;
				that.gear = obj.gear;
				that.light = obj.light;
				if (that.online != 'true') {
					that.isshowclose();
				}
			} else {
				that.isstop = true;
				if (data.msg === '') {
					let str1 = '';
					if (data.devices[0].status) {
						str1 = data.devices[0].status;
						if (str1.toString() === '-6') {
							that.isshowclose();
							return false;
						}
						if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
							that.isshowclose();
						} else {
							that.netWorkGet(api.getStatus('get', str1, '获取设备状态失败'));
						}
					} else {
						str1 = data.code;
						that.netWorkGet(api.getCode(str1, '获取设备状态失败'));
					}
				} else {
					that.netWorkGet(data.msg);
				}
			}
		} else {
			that.isstop = true;
			that.netWorkGet('获取设备状态失败,请稍后重试');
		}
		that.initData();
	},
	//查询状态
	getDeviceStatus(opid) {
		// net.deviceInit(this.accessToken)
		let that = this;
		let params = {
			openId: opid,
			devices: [
				{
					deviceId: that.deviceId,
					properties: that.B6list
				}
			]
		};
		if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
			that.lanOnline = 'true';
		}else{
			that.lanOnline = 'false';
		}
		api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				that.isRefreshing = false;
				that.isfirst = true;
				that.isloading = false;
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
			}).catch((error) => {
				console.log("报错了")
				if(error.online){
					that.isRefreshing = false;
					that.initData();
					that.isstop = true;
					that.netWorkGet('获取设备状态失败,请稍后重试');
					that.isfirst = true;
					that.isloading = false;
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceStatus(that.openId);
				}
			});
	},
	/**
	 * 局域网控制
	 */
	lanControl(res,obj1,status){
		let that = this;
// 		that.isRefreshing = false;
// 		that.isloading = false;
		let obj = (typeof res) == 'object'?res:JSON.parse(res);
		console.log("局域网："+JSON.stringify(res))
		if(parseInt(obj.code) == 0){
			let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
			that.online = 'true';
			setTimeout(function(){
				that.getDeviceStatus(that.openId);
			},1000)
			return false
			if(obj1.power == 'on'){
				that.getDeviceStatus(that.openId);
			}else{
				if(data.work_status){
					that.work_status = data.work_status;
					that.power = that.workStatus(that.work_status);
				}else{
					if(data.power){
						that.power = data.power;
					}else{
						that.power = "on";
					}
				}
				if(that.power == 'on' || that.power == 'delay_off'){
					if(data.gear){
						that.gear = data.gear;
					}else{
						that.gear = 0;
						// isall = true;
					}
					that.B6data = data;
					that.B6data.power = 'on';
				}else{
					that.B6data = data;
					that.B6data.gear = 0;
					that.B6data.power = 'off';
				}
				if(data.light){
					that.light = data.light;
				}else{
					that.light = 'off';
				}
				that.B6data.light = that.light;
				that.initData();
			}
			
		}else{
			that.isagain = false;
			that.lanOnline = 'false';
			that.postDeviceControl(obj1, status);
		}
	},
	/**
	 * 广域网控制
	 */
	wlanControl(res){
		let that = this;
		that.online = 'true';
		if (res.code === 200) {
			let data = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
			if(parseInt(data.code) == 0){
				if (!parseInt(data.devices[0].status)) {
					setTimeout(function(){
						that.getDeviceStatus(that.openId);
					},700)
					return false;
					let obj = typeof data.devices[0].props === 'object' ? data.devices[0].props : JSON.parse(data.devices[0].props);;
					let isall = false;
					if(obj.work_status){
						that.work_status = obj.work_status;
					}
					if(obj.power){
						that.power = obj.power;
					}else{
						that.power = "on";
					}
					if(that.power == 'on' || that.power == 'delay_off'){
						if(obj.gear){
							that.gear = obj.gear;
						}else{
							that.gear = 0;
							// isall = true;
						}
						that.B6data = obj;
						that.B6data.power = 'on';
					}else{
						that.B6data = obj;
						that.B6data.gear = 0;
						that.B6data.power = 'off';
					}
					if(obj.light){
						that.light = obj.light;
					}else{
						that.light = 'off';
						// isall = true;
					}
					that.B6data.light = that.light;
					if(isall){
						that.getDeviceStatus(that.openId);
					}else{
						that.isRefreshing = false;
						that.isloading = false;
					}
				} else {
					that.isloading = false;
					that.isstop = true;
					if (data.msg === '') {
						let str1 = '';
						if (data.devices[0].status) {
							str1 = data.devices[0].status;
							if (str1.toString() === '-6') {
								that.isshowclose();
								return false;
							}
							if (str1.toString() === '-100' && data.devices[0].description.toString() === '3123') {
								that.isshowclose();
							} else {
								that.netWorkGet(api.getStatus('post', str1, '操作设备失败'));
							}
						} else {
							str1 = data.code;
							that.netWorkGet(api.getCode(str1, '操作设备失败'));
						}
					} else {
						that.netWorkGet(data.msg);
					}
				}
			}else{
				that.isloading = false;
				that.isstop = true;
				if (data.msg === '') {
					let str1 = '';
					str1 = data.code;
					that.netWorkGet(api.getCode(str1, '操作设备失败'));
				} else {
					that.netWorkGet(data.msg);
				}
			}
			
		} else {
			that.isRefreshing = false;
			that.isloading = false;
			that.netWorkGet('操作设备失败,请稍后重试');
		}
		that.initData();
	},
	postDeviceControl(param, status) {
		let that = this;
		let status_params = that.B6data;
		if(param.light){
			status_params.light = param.light;
		}
		if(param.gear){
			status_params.gear = param.gear;
		}
		if (status_params.online) {
			delete status_params.online
		}
		if(status_params.error_code || status_params.error_code == 0){
			delete status_params.error_code
		}
		if(status_params.version){
			delete status_params.version
		}
		let params = {
			openId: that.openId,
			devices: [
				{
					deviceId: that.deviceId,
					properties: param,
					status: status_params
				}
			]
		};
		that.isloading = true;
		console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
		if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
			that.lanOnline = 'true';
		}else{
			that.lanOnline = 'false';
		}
		api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
			that.isagain = true;
			if(res.lanonline){
				that.wlanControl(res);
			}else{
				that.lanControl(res,param,status)
			}
		}).catch((error) => {
			if(error.online){
				that.isRefreshing = false;
				that.initData();
				that.isstop = true;
				that.netWorkGet('操作设备失败,请稍后重试');
				that.isloading = false;
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(param, status);
			}
		});
	},
	initData() {
		let that = this;
		// that.isloading = false;
		if(that.online === 'false'){
			that.power = 'off';
			that.intelligent = 'off';
			that.gear = 0;
			that.light = 'off';
		}
		that.gear = parseInt(that.gear)?parseInt(that.gear):0;
		let gear = that.gear;
		let gearText = '';
		let font_Size = 48;
		if(that.power != 'on'){
			gearText = "off";
		}else{
			if(gear > 0){
				if(gear > 3){
					gearText = "爆炒";
					font_Size = 42;
				}else {
					gearText = '0'+gear;
				}
			}else{
				gearText = "off";
			}
		}
		let light = './assets/img/light_off.png';
		if(that.light == 'on'){
			light = './assets/img/light_on.png';
		}
		that.btnlist = [{
			name:'开关',
			data:that.power,
			pic:'./assets/img/off.png',
			clickAlert:false
		},{
			name:'档位',
			data:gearText,
			pic:'',
			fontSize:font_Size,
			clickAlert:true
		},{
			name:'延迟关机',
			data:that.power == 'delay_off'?'ON':'off',
			pic:'',
			clickAlert:false
		},{
			name:'灯光',
			data:that.light == 'on'?'ON':'off',
			pic:light,
			clickAlert:false
		}]
	},
	netWorkGet(str) {
		if (this.iswarm) {
			network.getType({
				success: function(data) {
					if (data.type === 'none') {
						prompt.showToast({
							message: str + '请检查网络',
							duration: 1
						});
					} else {
						prompt.showToast({
							message: str,
							duration: 1
						});
					}
				}
			});
		}
	},
	/**
	 * 局域网初始化
	 */
	LanOnlineGet(){
		let that = this;
		net.deviceInit(that.accessToken,that.deviceId).then((res) => {
			that.isLanInit = true;
		}).catch((error) => {
			that.isLanInit = false;
		});
	},
	gettime() {
		let timestamp = Date.parse(new Date());
		return parseInt(timestamp) + 3600000;
	},
	onMenuPress() {
		this.isabout = !this.isabout;
	},
	closeWebsocket(e) {
		let that = this;
		that.isclosews = true;
		if (that.timeoutInter != '') {
			clearInterval(that.timeoutInter);
		}
	},
	onHide() {
		let that = this;
		that.istips = false;
		that.closeWebsocket();
	},
	onShow() {
		let that = this;
		that.isclosews = false;
		if (that.ws === '' && that.isws) {
			// that.webSocketdata();
		}
		if (that.timeoutInter != '') {
			clearInterval(that.timeoutInter);
		}
		// that.timeGetData();
	},
	onInit() {
		api.getlanguage().then(res => {
			if (res === 'ug') {
				this.language = false;
			} else {
				this.language = true;
			}
		});
		let that = this;
		that.deviceHeight = that.$app.options.env.deviceHeight;
		router.clear();
		that.$on('cancel', function(e) {
			that.isabout = false;
		});
		that.$on('closetips', function(e) {
			that.istips = false;
		});
		that.$on('openmenu', function(e) {
			that.isabout = !that.isabout;
		});
		let timestamp = Date.parse(new Date());
		storage.get({
			key: 'openidToken',
			success: function(data) {
				that.isloading = true;
				if (data === '') {
					that.getdevicelist();
				} else {
					let obj = JSON.parse(data);
					if (parseInt(timestamp) > parseInt(obj.time)) {
						that.getdevicelist();
					} else {
						if (obj.openid === that.openid) {
							that.openId = obj.openid;
							that.accessToken = obj.accessToken;
							that.LanOnlineGet();
							that.getDeviceStatus(that.openId);
						} else {
							that.getdevicelist();
						}
					}
				}
				console.log('handling success');
			},
			fail: function(data, code) {
				console.log(`handling fail, code = ${code}`);
			}
		});
	},
	onCreate() {},
	onBackPress() {
		router.clear();
		this.$app.exit();
	}
};
</script>

<style lang='less'>
	@import "./assets/index.less";
</style>