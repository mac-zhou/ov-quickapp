<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-title" src="../Component/MideaTitle/index"></import>
<template>
    <div class="container">
		<midea-title title="配网帮助" language="{{language}}" back="{{isback}}"></midea-title>
        <div class="nav_divce" if="{{is_device}}">
			<image class="{{img === ''?'nav_divce_img_l':'nav_divce_img'}}" src="{{img}}" alt="./assets/alt.png"></image>
		</div>
		<list class="nav_tops">
			<block>
				<list-item type="product">
					<text class="nav_tops_title" if="{{is_device}}">
						<span>操作指引</span>
					</text>
				</list-item>
				<list-item type="product" if="{{is_device}}">
					<text class="nav_tops_text">
						{{main_mode_summary}}
					</text>
				</list-item>
				<list-item type="product">
					<div class="nav_tops_btn" if="{{is_device}}">
						<div class="nav_tops_btn_radio">
							<text class="nav_tops_btn_radio_text" if="{{!language}}">
								<span>已完成上述操作</span>
							</text>
							<image src="./assets/checked_{{checked?'off':'on'}}.png" @click="selectData()" class="nav_tops_btn_radio_btn"></image>
							<text class="nav_tops_btn_radio_text" if="{{language}}">
								<span>已完成上述操作</span>
							</text>
						</div>
						<text if="{{isdone}}" class="nav_tops_btn_text" style="background-color: {{checked? '#CCCCCC':'#21D9E5'}};" @click="nextPage()">下一步</text>
						<!-- <input type="button" if="{{isdone}}" class="nav_tops_btn_text" style="background-color: {{checked? '#CCCCCC':'#21D9E5'}};" value="下一步" @click="nextPage()" disabled="{{checked}}"> -->
					</div>
				</list-item>
			</block>
		</list>
		<midea-loading if="{{isloading}}"></midea-loading>
    </div>
</template>

<style lang="less">
    @import "./assets/index.less";
</style>

<script>
	// import IOT from '@service.iot';
    import router from '@system.router';
    import prompt from '@system.prompt';
	import fetch from '@system.fetch';
	import account from '@service.account';
	import storage from '@system.storage';
	import barcode from '@system.barcode';
	import api from '../Common/api/api.js';
    module.exports = {
        private: {
			language:true,
			isback: true,
			isloading: false,
			isdone: true,
			title:'配网帮助',
			deviceImg: '',
			img: '',
			deviceCode: '',
			issecondary: false,
			ssidDevice: '',
			main_mode_summary: '',
			secondary_mode_summary: '',
			btndisabled: true,
			checked:true,
			isap:"true",
			num: -1,
			is_device:true,
			deviceType:'',
			type:["ac","ca","b0","db","e2","ea","fa","fc","fd"]//支持的设备
			// type:["ac","ca","b0","db","e2","ea","fa","fc","fd","e1","e3","b8","b6"]//支持的设备
        },
		public: {
			iot_call_from: '',
			iot_wifi_ssid: "",
			iot_wifi_password: "",
			iot_url:"",
			iot_device_ssid:"",
			iot_wifi_secretType: "",
			iot_config_type:"",
			iot_category: '',
			iot_series:''
		},
		onInit() {
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			this.$page.setTitleBar({
				text: this.title
			})
			let that = this;
			let num = -1;
			that.type.forEach(function(item,i){
				if(item === that.getDeviceType()){
					num = i;
				}
			})
			if(num === -1){
				that.is_device = false;
				prompt.showDialog({
						title: '提示',
						message: "暂不支持该品类设备，请期待",
						buttons: [{
						text: '确定',
						color: '#33dd44'
					}],
					success: function (data) {
						router.clear();
						router.back()
					},
					cancel: function () {
						router.clear();
						router.back()
						console.log('handling cancel')
					},
					fail: function (data, code) {
						router.clear();
						router.back()
						console.log(`handling fail, code = ${code}`)
					}
				})
			}else{
				that.is_device = true;
				if(that.iot_call_from === "AP_SCAN"){
					router.push ({
						uri: "config_network/apNetWork",
						params: {
							iot_call_from: that.iot_call_from,
							iot_wifi_ssid: that.iot_wifi_ssid,
							iot_wifi_password: that.iot_wifi_password,
							iot_url:that.iot_url,
							iot_device_ssid:that.iot_device_ssid,
							iot_wifi_secretType: that.iot_wifi_secretType,
							iot_config_type:that.iot_config_type,
							is_ap:"false"
						}
					})
				}else{
					if(that.iot_call_from === "MANUAL_SELECT"){
						that.ssidDevice = that.iot_category.substring(that.iot_category.length-2,that.iot_category.length).toLowerCase();
						that.deviceCode = that.iot_series;
						that.iot_config_type = '0';
						that.getConfigDeviceInfo();
					}else{
						that.getWifiList();
					}
				}
			}
			// prompt.showToast({message:'iot_series:' + this.iot_series,duration:1})
		},
		//获取设备类型
		getDeviceType(){
			let that = this;
			if(that.iot_call_from === "MANUAL_SELECT"){
				that.deviceType = this.iot_category.substring(this.iot_category.length-2,this.iot_category.length).toLowerCase();
			}else if(that.iot_call_from === "AP_SCAN"){
				that.deviceType = that.iot_device_ssid.substring(6,8).toLowerCase();
			}else{
				let type = api.getDeviceInformation(that.iot_url);
				let ssid = api.getUrlCan(that.iot_url,'SSID');
				if(type || ssid){
					let str = type.substring(type.length-2,type.length).toLowerCase() || ssid.substring(6,8);
					that.deviceType = str;
				}
			}
			return that.deviceType;
		},
		selectData(e){
			let that = this;
			that.checked = !that.checked;
		},
		nextPage(){
			let that = this;
			if(!that.checked){
				router.push ({
					uri: "config_network/apNetWork",
					params: {
						iot_wifi_ssid: that.iot_wifi_ssid,
						iot_wifi_password: that.iot_wifi_password,
						iot_url:that.iot_url,
						ssidDevice: that.ssidDevice,
						iot_device_ssid:that.iot_device_ssid,
						iot_wifi_secretType: that.iot_wifi_secretType,
						iot_config_type:that.iot_config_type,
						is_ap:that.isap
					}
				})
			}
		},
		getConfigDeviceInfo(){
			let that = this;
			let mode = '';
			if(that.iot_url){
				mode = api.getUrlCan(that.iot_url,'mode');
			}
			// prompt.showToast({message:'url'+that.iot_url})
			if(that.iot_config_type.toString() === '-1' || that.iot_config_type === ''){
				if(mode && mode != ''){
					let str = mode.toString();
					mode = str.substring(str.length-1,str.length);
					that.iot_config_type = str.substring(str.length-1,str.length);
				}else{
					that.iot_config_type = '0';
				}
			}
			if(api.getUrlCan(that.iot_url,'type')){
				that.deviceCode = api.getUrlCan(that.iot_url,'type').substring(9,17)
			}
				let params = {
					application: that.ssidDevice,
					mode: that.iot_config_type.toString(),
					// code:that.deviceCode
				}
				
				api.getConfigWorkHelp(params).then((res) => {
					that.isloading = false;
					if(res.code === 200){
						let data = JSON.parse(res.data);
						if(data.errorCode === 0){
							if(data.data.length === 0){
								if(that.iot_config_type === '0'){
									that.iot_config_type = '1';
								}else{
									that.iot_config_type = '0';
								}
								that.getConfigDeviceInfo();
							}else{
								let isdevice = "0";
								data.data.forEach(function(item,i){
									if(item.code == that.deviceCode && isdevice != '1'){
										isdevice = '1';
										that.num = i;
									}else if(item.code === ''){
										if(isdevice === "0"){
											isdevice = '2';
										}
									}
								})
								if(that.deviceCode === ''){
									that.num = 0;
									that.img = data.data[0].main_mode_img;
									that.title = data.data[0].name;
									that.main_mode_summary = data.data[0].main_mode_summary;
								}else{
									if(that.num === -1 && that.iot_config_type.toString() === '0'){
										that.issecondary = true;
										that.isap = "false";
										if(that.iot_config_type.toString() === '0'){
											that.iot_config_type = '1';
											that.num = 0;
											that.getConfigDeviceInfo();
										}
									}else{
										if(that.num === -1){
											that.num = 0;
										}
										that.isdone = true;
										that.img = data.data[that.num].main_mode_img;
										that.title = data.data[that.num].name;
										that.main_mode_summary = data.data[that.num].main_mode_summary;
// 										if(that.issecondary){
// 											that.title = data.data[that.num].name;
// 											that.img = data.data[that.num].main_mode_img;
// 											that.main_mode_summary = data.data[that.num].main_mode_summary;
// 										}else{
// 											that.img = data.data[that.num].main_mode_img;
// 											that.title = data.data[that.num].name;
// 											that.main_mode_summary = data.data[that.num].main_mode_summary;
// 										}
									}
								}
							}
						}
					}
				}).catch((error) => {
					that.isloading = false;
					console.log(error);
				})
		},
		getWifiList(){
			// this.isloading = true;
			let that = this;
			if(that.iot_device_ssid != '' && that.iot_device_ssid != 'null'){
				that.ssidDevice = that.iot_device_ssid.substring(6,8).toLowerCase();
				that.getConfigDeviceInfo();
			}else{
				let type = api.getDeviceInformation(that.iot_url);
				let ssid = api.getUrlCan(that.iot_url,'SSID');
				if(type || ssid){
					let str = type.substring(type.length-2,type.length).toLowerCase() || ssid.substring(6,8);
					that.ssidDevice = str;
					that.getConfigDeviceInfo();
				}else{
					if(that.iot_call_from === "MANUAL_SELECT"){
						that.getConfigDeviceInfo();
					}else{
						prompt.showDialog({
								title: '提示',
								message: "设备不存在，请检查二维码是否正确",
								buttons: [{
								text: '确定',
								color: '#33dd44'
							}],
							success: function (data) {
								router.back()
							},
							cancel: function () {
								router.back()
								console.log('handling cancel')
							},
							fail: function (data, code) {
								router.back()
								console.log(`handling fail, code = ${code}`)
							}
						})
					}
				}
			}
		},
		onBackPress(){
			router.clear();
			router.back();
		},
		onDestroy(){
//             this.$page.finish();
//          	this.$app.exit();
        }
    }
</script>
