<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-logo" src="../Component/MideaLogo/index"></import>
<!-- <import name="midea-wind-speed" src="../Component/MideaWindSpeed/index"></import> -->
<import name="midea-time" src="../Component/MideaTime/index"></import>
<import name="midea-about" src="../Component/MideaAbout/index"></import>
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>

<template>
    <div class="container">
		<midea-head title="空调" language="{{language}}" onclose-websocket="closeWebsocket" power="{{isopen?'on':'off'}}"></midea-head>
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="refreshData" refreshing="{{isRefreshing}}">
		<!-- <div class="nav_ac"> -->
			<list onscrollbottom="" onscroll="" style="background-color: {{isopen?Color:bgColor}};">
				<list-item type="refresh" class="wrap">
					<midea-logo isopen="{{isopen}}"></midea-logo>
					<div class="nav_data_show">
						<div class="nav_data nav_data2">
							<text class="nav_data_text2" if="{{!language}}" style="color: {{isopen?bgCo:dataColor}};">°</text>
							<text class="nav_data_text" style="color: {{isopen?bgCo:dataColor}};">{{value}}</text>
							<text class="nav_data_text2" if="{{language}}" style="color: {{isopen?bgCo:dataColor}};">°</text>
						</div>
					</div>
					<div class="nav_tip_show">
						<text class="nav_data">
							<span class="nav_data_tip" style="color: {{isopen?bgCo:dataColor}};">设定温度</span>
						</text>
					</div>
					<div class="nav_all_show">
						<text class="nav_data">
							<span class="nav_data_tip_in" style="color: {{isopen?bgCo:dataColor}};">室内温度:{{indoor}}°</span>
						</text>
						<text class="fixed_time" style="color: {{isopen?bgCo:dataColor}};">{{fixed_time}}</text>
					</div>
				</list-item>
			</list>
			</refresh>
			<div class="nav_btn">
				<image class="{{language?'nav_del_data':'nav_del_data_in'}}" src="{{isopen?'./assets/img/del.png':'./assets/img/del2.png'}}" @click="delData(isopen)"></image>
				<image class="{{language?'nav_del_data_in':'nav_del_data'}}" src="{{isopen?'./assets/img/add.png':'./assets/img/add2.png'}}"  @click="addData(isopen)"></image>
			</div>
			<!--lua control-->
			<div class="control" @swipe="swiperData({direction:[up]})">
				<div class="tabs">
					<div class="tabs_in" for="productList" @click="showDiolog($item.value,$idx)">
						<div class="img_in" style="background-color: {{getDataItem($item)?'#3191FD':'#ffffff'}}; border-color: #e5e5e5" if="{{!$item.flagImg}}">
							<text class="timeText" style="color:{{getDataItem($item)?'#ffffff':'#666666'}}">
								<span>{{$item.data}}</span>
							</text>
						</div>
						<image class="img" if="{{$item.flagImg}}" src="{{$item.icon}}"></image>
						<div class="nav_icon">
							<text class="text" style="color:{{$item.color}}">
								<span>{{$item.name}}</span>
							</text>
						</div>
					</div>
				</div>
				<div class="tabs">
					<div class="tabs_in" for="productList_in" @click="showDiolog($item.value,$idx)">
						<!-- <div class="img_" style="background-color: {{timeBgcolor}};" if="{{$item.value === 'time'}}">
							<text class="timeText" style="color:{{timecolor}}">
								<span>{{$item.data}}</span>
							</text>
						</div> -->
						<image class="img" src="{{$item.icon}}"></image>
						<div class="nav_icon">
							<text class="text" style="color:{{$item.color}}">
								<span>{{$item.name}}</span>
							</text>
						</div>
					</div>
				</div>
			</div>
			<div class="selectDta" if="{{issmork}}" @click="closeDiolog()"></div>
			<div class="data_select {{Height}}" if="{{isdata}}">
				<block for="list">	
					<div class="nav_add_show item firstlist" if="{{$idx===0}}" @click="selectData($idx)">
						<text class="data_text_l" if="{{!language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
						<image class="{{language?'picIcon':'picIcon_l'}}" src="{{$item.icon}}"></image>
						<text class="data_text" if="{{language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
					</div>
					<div class="nav_add_show item" else @click="selectData($idx)">
						<text class="data_text_l" if="{{!language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
						<image class="picIcon" src="{{$item.icon}}"></image>
						<text class="data_text" if="{{language}}" style="color:{{$item.color}}">
							<span>{{$item.name}}</span>
						</text>
					</div>
				</block>
			</div>
			<div class="data_dia" style="top:{{(deviceHeight-1000)/2}}px" if="{{is_smork}}">
				<!-- <list class="dioData">
					<block for="list">
						<list-item type="product" @click="selectData($idx)">
							<text class="data_text_" style="color:{{$item.color}}">
								<span>{{$item.name}}</span>
							</text>
						</list-item>
					</block>
				</list> -->
                <midea-time language="{{language}}" flag="{{switchFlag}}" list-data="{{timeList}}" time-value="{{timeValue}}" hight-color="#3191FD" default-color="#CCCCCC" selected-index="{{timeIndex}}" text="{{timeText}}" oncancel-evt="setTimeCancel" onsure-evt="setTimeSure"></midea-time>
			</div>
			<div class="wind_dia {{Height}}" if="{{is_wind_dia}}">
				<!-- <div class="wind_container">
					<div class="type">
						<div class="type_list" for="type_list" @click="windSelect($idx)">
							<text class="txt" style="color:{{selected_type==$idx?'#3191FD':'#cccccc'}}">{{$item}}</text>
							<image class="img" style="opacity: {{selected_type==$idx?1:0}}" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
					<div class="content">
						<list>
							<block for="content_list">
								<list-item type="time" @click="windSpeedSelect($idx)">
									<text class="txt" style="color:{{selected_content==$idx?'#3191FD':'#cccccc'}}">{{$item}}</text>
									<image class="img" style="opacity: {{selected_content==$idx?1:0}}" src="./assets/img/icon_selected.png"></image>
								</list-item>
							</block>
						</list>
					</div>
				</div>
				<div class="btn-grounp">
					<text class="btn btn-cancel" @click="windPopCancel">取消</text>
					<text class="btn btn-sure" @click="windPopSure">确认</text>
				</div> -->
                <!-- <midea-wind-speed list-data="{{windList}}" selected-index="{{windIndex}}" hight-color="#3191FD" default-color="#666666" oncancel-wind="setWindCancel" onsure-wind="setWindSure"></midea-wind-speed> -->
				<div class="windtabs">
					<div class="tabbar">
						<div class="tabbar-section" @click="windTypeSelect(0)">
							<text class="txt {{windTypeIndex==0?'curColor':''}}">手动</text>
							<image class="img-icon {{windTypeIndex==0?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
						</div>
						<div class="tabbar-section"  @click="windTypeSelect(1)">
							<text class="txt {{windTypeIndex==1?'curColor':''}}">自动</text>
							<image class="img-icon {{windTypeIndex==1?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
					<div class="tabcontent">
						<div class="tabcontent-section" show="{{tabContentShow === 0}}">
							<list class="list-wind">
								<block for="windList">
									<list-item type="wind-speed" class="wind-item" @click="windSelect($idx)">
										<text class="txt {{windIndex==$idx?'curColor':''}}">{{$item}}</text>
										<image class="img-icon {{windIndex==$idx?'img-icon2':''}}" src="./assets/img/icon_selected.png"></image>
									</list-item>
								</block>
							</list>
						</div>
						<div class="tabcontent-section" show="{{tabContentShow === 1}}">
							<text class="txt2 curColor">自动风</text>
							<image class="img-icon img-icon2" src="./assets/img/icon_selected.png"></image>
						</div>
					</div>
				</div>
				<div class="btn-grounp">
					<text class="btn btn-cancel" @click="windCancel">取消</text>
					<text class="btn btn-sure" @click="windSure">确定</text>
				</div>
			</div>
        <!-- </div> -->
		<midea-loading if="{{isshowLoading}}"></midea-loading>
		<midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about>
		<midea-tips if="{{istips}}"></midea-tips>
    </div>
</template>

<style>
    @import "./assets/index.css";
</style>

<script>
    import router from '@system.router';
    import prompt from '@system.prompt';
	import fetch from '@system.fetch';
	import account from '@service.account';
	import storage from '@system.storage';
	// import IOT from '@service.iot';
	import api from '../Common/api/api.js';
	import network from '@system.network';
	import net from '../Common/api/networkAPI.js';
	
    module.exports = {
        private: {
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			ws: '',
			isws: false,
			isclosews: false,
			language:true,
			deviceHeight:0,
			istips: false,
			isabout: false,
			isshowLoading: false,
			config_network: '',
			online:'false',
			id: "",
			isfirst:false,
			dataHeight: "height: 600px",
			humidity:"--",
			indoor: "--",
			value: '--',
			fixed_time: '',
			bgColor: '#CCCCCC',
			dataColor: '#666666',
			Color: "#3191FD",
			bgCo: '#ffffff',
			isopen: false,
			issmork: false,
			isdata: false,
			is_smork: false,
			is_wind_dia: false,
			date: true,
			closeDia: "",
			Height: '',
			deviceModel:'',
			timeBgcolor: "#ffffff",
			windBgcolor: '#ffffff',
			timecolor: "#000000",
			windcolor: "#666666",
			time_cishu: 0,
			listDevice: {},
			productList: [
				{
				"name":"开关",
				"value": "open",
				"data":'开关',
				"icon":"./assets/img/off.png",
				"id":'',
				"color": "",
				"flagImg": true
			},{
				"name":"模式",
				"value":'model',
				"data": "模式|自动",
				"icon":"./assets/img/model_1.png",
				"id":0,
				"color": "",
				"flagImg": true
			},{
				"name":"风速",
				"value": "wind",
				"data": "--",
				"icon":"",
				"id":0,
				"color": "",
				"flagImg": false
			},{
				"name":"定时",
				"value": "time",
				"data": "off",
				"icon":"",
				"id":0,
				"color": "",
				"flagImg": false
			}],
			productList_in: [
				{
				"name":"上下摆风",
				"value": "windDe1",
				"data": "上下摆风",
				"icon":"./assets/img/windDe_1.png",
				"id":'',
				"color": "",
				"flagImg": true
			},{
				"name":"左右摆风",
				"value": "windDe2",
				"data": "左右摆风",
				"icon":"./assets/img/windDe_2.png",
				"id":'',
				"color": "",
				"flagImg": true
			},{
				"name":"电辅热",
				"value": "elecHeat",
				"data": "on",
				"icon":"./assets/img/elecHeat.png",
				"id":'',
				"color": "",
				"flagImg": true
			}],
			list:[],
			model:[
				{
				"name":"自动",
				"value":"model_on_1",
				"icon":"./assets/img/modelimg_1.png",
				"color": ''
			},{
				"name":"制冷",
				"value":"model_on_2",
				"icon":"./assets/img/modelimg_2.png",
				"color": ''
			},{
				"name":"制热",
				"value":"model_on_3",
				"icon":"./assets/img/modelimg_3.png",
				"color": ''
			},{
				"name":"送风",
				"value":"model_on_4",
				"icon":"./assets/img/modelimg_4.png",
				"color": ''
			},{
				"name":"抽湿",
				"value":"model_on_5",
				"icon":"./assets/img/modelimg_5.png",
				"color": ''
			}],
			wind:[
				{
				"name":"静音风",
				"value":"wind_on_1",
				"icon":"./assets/img/wind_1.png",
				"color": ''
			},{
				"name":"低风",
				"value":"wind_on_2",
				"icon":"./assets/img/wind_2.png",
				"color": ''
			},{
				"name":"中风",
				"value":"wind_on_3",
				"icon":"./assets/img/wind_3.png",
				"color": ''
			},{
				"name":"高风",
				"value":"wind_on_4",
				"icon":"./assets/img/wind_4.png",
				"color": ''
			},{
				"name":"自动风",
				"value":"wind_on_5",
				"icon":"./assets/img/wind_5.png",
				"color": ''
			},{
				"name":"关",
				"value":"",
				"icon":"",
				"color": ''
			}],
			windDe:[
				{
				"name":"上下摆风",
				"value":"windDe_on_1",
				"icon":"./assets/img/windDe_1.png",
				"color": ''
			},{
				"name":"左右摆风",
				"value":"windDe_on_2",
				"icon":"./assets/img/windDe_2.png",
				"color": ''
			},{
				"name":"关",
				"value":"",
				"icon":"",
				"color": ''
			}],
			time:[],
			DBdata: ['power','mode','wind_speed','temperature','indoor_temperature','power_on_timer','power_on_time_value','power_off_timer','power_off_time_value','wind_swing_lr','wind_swing_ud','ptc'],
			dataLists: {},
			type_list: ['手动','固定风','自动'],
			content_list: [],
			selected_type: 1,
			selected_content: 2,
			baseData: {},
			windList: [],
			windIndex: 0,
			timeList: [],
			timeIndex: 0,
			timeText: '',
			tabContentShow: 1,
			windTypeSelect: 1,
			windTypeIndex: 1,
			switchFlag: false,
			timeValue: 1,
			params: {},
			accessToken: '',
			openId: ''
        },
		public: {
            deviceId: '',
            deviceSeries: '',
			openid: '',
        },
		getDataItem(obj){
			let that = this;
			if(obj.value == 'wind'){
				return that.isopen;
			}else{
				if(obj.data == 'off'){
					return false;
				}else{
					return true;
				}
			}
		},
		showDiolog(str,index){
			let that = this;
			let status = that.dataLists;
			if(this.online == 'false' || !this.online){
				this.isshowclose();
				// prompt.showToast({message: '设备离线状态'})
			}else{
				var i = 0;
				let height = 300;
				that.closeDia = str;
				that.id = index;
				if(str === "open"){
					if(this.dataLists.power == 'off'){
						this.params = {
							power: 'on'
						}
					}else{
						this.params = {
							power: 'off'
						}
					}
					delete status.power;
					this.postDeviceControl(this.params,status);
				}else if(str == 'time') {
					that.popData(str,index);
				}else{
					if(that.isopen){
						if(str === "model"){
							that.popData(str,index);
						}else if(str == 'wind'){
							if(that.dataLists.mode == 'auto' || that.dataLists.mode == 'dry'){
								prompt.showToast({
									message: '自动以及抽湿模式下不可设置风速'
								})
							}else{
								that.issmork = true;
								that.is_wind_dia = true;
								that.Height = "animate_S";
								// that.windPopDefault();
							}
						}else if(str == 'elecHeat'){
							if(that.dataLists.mode == 'auto' || that.dataLists.mode == 'heat'){
								if(this.dataLists.ptc == 'off'){
									this.params = {
										ptc: 'on'
									}
								}else{
									this.params = {
										ptc: 'off'
									}
								}
								delete status.ptc;
								this.postDeviceControl(this.params,status);
							}else{
								prompt.showToast({
									message: '自动和制热模式下可设置'
								})
							}
						}else{
							
							switch (str){
								case 'windDe1':
									if(this.dataLists.wind_swing_ud == 'off'){
										this.params = {
											wind_swing_ud: 'on'
										}
									}else{
										this.params = {
											wind_swing_ud: 'off'
										}
									}
									delete status.wind_swing_ud;
									break;
								case 'windDe2':
									if(this.dataLists.wind_swing_lr == 'off'){
										this.params = {
											wind_swing_lr: 'on'
										}
									}else{
										this.params = {
											wind_swing_lr: 'off'
										}
									}
									delete status.wind_swing_lr;
									break;
								default:
									break;
							}
							this.postDeviceControl(this.params,status);
						}
					}else{
						prompt.showToast({message: '设备关机状态'})
					}
				}
			}
		},
		popData(str,index){
			var that = this;
			that.Height = "animate_S";
			for(let i = 0;i < that.list.length;i++){
				that.list[i].color = "";
			}
			switch(str){
				case "model":
					that.list = that.model;
					for(let i = 0;i < that.list.length;i++){
						that.list[i].icon = "./assets/img/modelimg_" + (i + 1) + ".png";;
					}
					that.list[that.productList[index].id].icon = "./assets/img/modelimg_on_" + (that.productList[index].id + 1) + ".png";
					that.list[that.productList[that.id].id].color = "#3191FD";
					that.isdata = true;
				break;
				case "time":
					that.is_smork = true;
				break;
			}
			that.issmork = true;
		},
		closeDiolog(bol){
			this.closeFun();
		},
		selectData(index){
			let that = this;
			let status = that.dataLists;
			let str = "";
			if(that.closeDia === 'model'){
				str = "模式|";
			}
			let ismodel = true;
			if(that.closeDia === 'time'){
				if(that.isopen){
					if(index == 0){
						this.params = {
							power_off_timer: 'off',
							power_off_time_value: parseInt(index)*60
						}
					}else{
						this.params = {
							power_off_timer: 'on',
							power_off_time_value: parseInt(index)*60
						}
					}
					delete status.power_off_timer;
					delete status.power_off_time_value;
				}else{
					if(index == 0){
						this.params = {
							power_on_timer: 'off',
							power_on_time_value: parseInt(index)*60
						}
					}else{
						this.params = {
							power_on_timer: 'on',
							power_on_time_value: parseInt(index)*60
						}
					}
					delete status.power_on_timer;
					delete status.power_on_time_value;
				}
			}
			else{
				switch(index){
					case 0:
						that.params = {
							mode: 'auto'
						}
						break;
					case 1:
						if(that.deviceModel === "auto"){
							that.params = {
								mode: 'cool'
							}
						}else{
							ismodel = false;
							that.params = {
								mode: 'cool',
								wind_speed: 102
							}
						}
						break;
					case 2:
						if(that.deviceModel === "auto"){
							that.params = {
								mode: 'heat'
							}
						}else{
							ismodel = false;
							that.params = {
								mode: 'heat',
								wind_speed: 102
							}
						}
						break;
					case 3:
						if(that.deviceModel === "auto"){
							that.params = {
								mode: 'fan'
							}
						}else{
							ismodel = false;
							that.params = {
								mode: 'fan',
								wind_speed: 102
							}
						}
						break;
					case 4:
						this.params = {
							mode: 'dry'
						}
						break;
					default:
						break;
				}
				if(ismodel){
					delete status.mode;
				}else{
					delete status.mode;
					delete status.wind_speed;
				}
				
			}
			this.closeFun();
			this.postDeviceControl(this.params,status);
		},
		closeFun(){
			let that = this;
			that.Height = "animate_D";
			setTimeout(function(){
				that.is_smork = false;
				that.isdata = false;
				that.issmork = false;
				that.is_wind_dia = false;
			},400)
		},
		addData(bol){
			let that = this;
			let status = that.dataLists;
			if(that.online == 'false' || !that.online){
				that.isshowclose();
				return false;
			}
			if(bol){
				if(parseInt(this.dataLists.temperature)<30){
					this.params = {
						temperature: parseInt(this.value)+1
					}
					delete status.temperature;
					this.postDeviceControl(this.params,status);
				}else{
					prompt.showToast({message: '温度最高为30°'})
				}
			}else{
				prompt.showToast({message: '设备关机状态'})
			}
		},
		delData(bol){
			let that = this;
			let status = that.dataLists;
			if(that.online == 'false' || !that.online){
				that.isshowclose();
				return false;
			}
			if(bol){
				if(parseInt(this.dataLists.temperature)>17){
					this.params = {
						temperature: parseInt(this.value)-1
					}
					delete status.temperature;
					this.postDeviceControl(this.params,status);
				}else{
					prompt.showToast({message: '温度最低为17°'})
				}
			}else{
				prompt.showToast({message: '设备关机状态'})
			}
		},
		//向上滑动
		swiperData(e){
			console.log(e)
		},
		//获取第三方登录信息
		getdevicelist(){
            this.isshowLoading = true;
			let that = this;
			account.authorize({
				type: 'code',
				success: function(data) {
                    let params = {
                        thirdUId: data.code,
                    }
                    api.getUserToken(params).then((res) => {
                        let data_accesstoken = res;
                        if (data_accesstoken.code && data_accesstoken.code === 200) {
                            let result_data = (typeof data_accesstoken.data) === "object"?data_accesstoken.data:JSON.parse(data_accesstoken.data);
                            if (parseInt(result_data.code) === 0 && result_data.accessToken) {
                                that.accessToken = result_data.accessToken;
                                that.openId = result_data.openId;
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								}
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function (data) {
										
									},
									fail: function (data, code) {
										
									}
								})
								that.LanOnlineGet();
                                that.getDeviceStatus();
                            } else {
								that.isRefreshing = false;
								that.isshowLoading = false;
								that.isfirst = true;
								that.netWorkGet(that.getCode(result_data.code,"获取访问令牌失败"))
                            }
                        } else {
							that.isRefreshing = false;
							that.isshowLoading = false;
							that.isfirst = true;
							that.netWorkGet('获取访问令牌失败,请稍后重试');
                        }
                    }).catch((error) => {
						that.isfirst = true;
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.netWorkGet('获取访问令牌失败,请稍后重试')
    					// prompt.showToast({
    					// 	message: "asd"+JSON.stringify(error),
    					// 	duration: 1
    					// })
                    })
				},
				fail: function(data, code) {
					that.isfirst = true;
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('授权失败,请稍后重试')
					// prompt.showToast({
					// 	message: 'authorize:' + code
					// })
				}
			})
		},
		/**
		 * 联网获取
		 */
		getdataLan(res){
			let that = this;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.isfirst = true;
			let num = false;
			if(res.code === 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.code) && !parseInt(data.devices[0].status)){
					num = true;
					let obj = data.devices[0].properties;
					that.online = obj.online;
					if(that.online == 'false' || !that.online){
						that.isshowclose();
					}
			        that.dataFormat(obj);
				}else{
					that.initData();
					if(data.msg === ''){
						if(!num){
							let str1 = '';
							if(data.devices[0].status){
								str1 = data.devices[0].status;
								if(str1.toString() === '-6'){
									that.isshowclose();
									return false;
								}
								if(str1.toString() === '-100' && res_data.devices[0].description.toString() === '3123'){
									// that.netWorkGet('设备离线')
									that.isshowclose();
								}else{
									that.netWorkGet(api.getStatus("get",str1,'获取设备状态失败'))
								}
							}else{
								str1 = data.code;
								that.netWorkGet(api.getCode(str1,'获取设备状态失败'))
							}
							that.isRefreshing = false;
							that.isshowLoading = false;
						}
					}else{
						that.netWorkGet(data.msg)
					}
				}
			}else{
				that.initData();
				if(!num){
					that.isRefreshing = false;
					that.netWorkGet('获取设备状态失败,请稍后重试')
					that.isshowLoading = false;
				}
			}
		},
		/**
		 * 局域网获取
		 */
		getLanData(res){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.online = 'true';
				data.online = 'true';
				that.dataFormat(data);
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceStatus();
			}
		},
        //查询状态
		getDeviceStatus(){
            this.isshowLoading = true;
			let that = this;
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: that.DBdata
				}]
			}
			// that.webSocketdata();
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
			}).catch((error,code) => {
				console.log("授权接口：error"+error+":::code"+code)
				if(error.online){
					that.isfirst = true;
					that.initData();
					if(!num){
						that.isRefreshing = false;
						that.netWorkGet('获取设备状态失败,请稍后重试')
						that.isshowLoading = false;
					}
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceStatus();
				}
			})
        },
		/**
		 * 局域网控制
		 */
		lanControl(res,obj1,status){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			that.isRefreshing = false;
			that.isshowLoading = false;
			if(parseInt(obj.code) == 0){
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				data.online = 'true';
				that.online = "true";
				that.dataFormat(data);
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(obj1, status);
			}
		},
		/**
		 * 广域网控制
		 */
		wlanControl(res){
			let that = this;
			if (res.code && res.code == 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.devices[0].status) && !parseInt(data.code)){
					// prompt.showToast({message:"赛哦谁"+JSON.stringify(data),duration:1})
					let isall = false;
					let objdata = {};
					objdata.online = 'true';
					that.online = "true";
					let obj = typeof data.devices[0].props === 'object'? data.devices[0].props:JSON.parse(data.devices[0].props);
					if(obj.power){
						objdata.power = obj.power;
					}else{
						isall = true;
					}
					if(obj.mode){
						objdata.mode = obj.mode;
					}else{
						isall = true;
					}
					if(obj.wind_speed){
						objdata.wind_speed = obj.wind_speed;
					}else{
						isall = true;
					}
					if(obj.temperature){
						objdata.temperature = obj.temperature;
					}else{
						isall = true;
					}
					if(obj.indoor_temperature){
						objdata.indoor_temperature = obj.indoor_temperature;
					}else{
						isall = true;
					}
					if(obj.power_on_timer){
						objdata.power_on_timer = obj.power_on_timer;
					}else{
						isall = true;
					}
					if(obj.power_on_time_value){
						objdata.power_on_time_value = obj.power_on_time_value;
					}else{
						isall = true;
					}
					if(obj.power_off_timer){
						objdata.power_off_timer = obj.power_off_timer;
					}else{
						isall = true;
					}
					if(obj.power_off_time_value){
						objdata.power_off_time_value = obj.power_off_time_value;
					}else{
						isall = true;
					}
					if(obj.wind_swing_lr){
						objdata.wind_swing_lr = obj.wind_swing_lr;
					}else{
						isall = true;
					}
					if(obj.wind_swing_ud){
						objdata.wind_swing_ud = obj.wind_swing_ud;
					}else{
						isall = true;
					}
					if(obj.ptc){
						objdata.ptc = obj.ptc;
					}else{
						isall = true;
					}
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.dataFormat(objdata);
				}else{
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.initData();
					if(data.msg === ''){
						let str1 = '';
						if(data.devices[0].status){
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if(str1.toString() === '-100' && res_data.devices[0].description.toString() === '3123'){
								// that.netWorkGet('设备离线')
								that.isshowclose();
							}else{
								that.netWorkGet(api.getStatus("post",str1,'操作设备失败'))
							}
						}else{
							str1 = data.code;
							that.netWorkGet(api.getCode(str1,'操作设备失败'))
						}
					}else{
						that.netWorkGet(data.msg)
					}
				}
			}else{
				that.isshowLoading = false;
				that.initData();
				that.isRefreshing = false;
				that.netWorkGet('操作设备失败,请稍后重试')
			}
		},
        //设备控制接口
        postDeviceControl(obj,status){
            this.isshowLoading = true;
			let that = this;
			if(status.online){
				delete status.online
			}
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: obj,
					status:that.listDevice
					// status:status
				}]
			}
			console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				if(res.lanonline){
					that.wlanControl(res);
				}else{
					that.lanControl(res,obj,status)
				}
			}).catch((error) => {
				if(error.online){
					that.initData();
					that.isRefreshing = false;
					that.netWorkGet('操作设备失败,请稍后重试')
					that.isshowLoading = false;
				}else{
					that.isagain = false;
					that.lanOnline = 'false';
					that.postDeviceControl(obj, status);
				}
			})
		},
		initData(){
			this.isfirst = true;
			let obj = {
						'power': 'off',
						'mode': 'auto',
						'wind_speed': '--',
						'temperature':'--',
						'indoor_temperature':'--',
						'power_on_timer':'off',
						'power_on_time_value':'--',
						'power_off_timer':'off',
						'power_off_time_value':'--',
						'wind_swing_lr':'off',
						'wind_swing_ud':'off',
						'ptc':'off'
					}
			this.dataFormat(obj);
		},
		//接口成功数据处理
		dataFormat(data){
			let that = this;
			that.deviceModel = data.mode;
			that.isRefreshing = false;
			this.isshowLoading = false;
			this.baseData = JSON.parse(JSON.stringify(data)); //复制一份数据，方便后续判断
			this.listDevice = data;
			this.dataLists = data;
			if(this.online == 'true'){
				if(data.power == 'on'){
					this.isopen = true;
					this.dataLists = data;
					this.value = data.temperature;
					this.humidity = data.indoor_temperature?data.indoor_temperature:'--';
					this.indoor = data.indoor_temperature?data.indoor_temperature:'--';
					this.switchMode(data.mode,'on');
					this.windBgcolor = '#3191FD';
					this.windcolor = '#ffffff';
					// if(data.wind_speed == 101){
					// 	this.selected_type = 0;
					// 	this.selected_content = 0;
					// }else if(data.wind_speed == 102){
					// 	this.selected_type = 2;
					// 	this.selected_content = 0;
					// }else{
					// 	this.selected_type = 1;
					// 	this.selected_content = parseInt(data.wind_speed) - 1;
					// }
					if(parseInt(data.wind_speed) == 102){
						this.productList[2].data = 'AUTO';
						this.windIndex = 0;
						this.windTypeIndex = 1;
						this.tabContentShow = 1;
					}else{
						this.productList[2].data = data.wind_speed;
						this.windIndex = this.windList.indexOf(parseInt(data.wind_speed));
						this.windTypeIndex = 0;
						this.tabContentShow = 0;
					}
					if(data.power_off_timer == 'on'){
						// let time = Math.round(parseInt(data.power_off_time_value)/60);
						let time = parseInt(data.power_off_time_value), time2 = time/60;
						if(!Number.isInteger(time2)){
							time2 = Number.parseFloat(time2.toFixed(1));
						}
						// if(time >= 60){
						// 	time = time2+'小时';
						// }else{
						// 	time = time+'分钟';
						// }
						this.timeValue = time2;
						this.productList[3].data = time2+'h';
						this.productList[3].id = time;
						this.productList[3].name = time2+'小时关';
						this.fixed_time = `将于${time2}小时后关闭`;
						this.timeBgcolor = "#3191FD";
						this.timecolor = "#ffffff";
						this.timeIndex = this.timeList.indexOf(time);
						this.switchFlag = true;
					}else{
						this.productList[3].data = 'off';
						this.productList[3].name = '定时关';
						this.productList[3].id = 0;
						this.fixed_time = '定时关：关';
						this.timeBgcolor = "#ffffff";
						this.timeIndex = -1;
						this.switchFlag = false;
					}
					// this.productList[3].name = '定时关';
					this.timeText = '定时关机';
					if(data.wind_swing_ud == 'off'){
						this.productList_in[0].icon = "./assets/img/windDe_1.png";
					}else{
						this.productList_in[0].icon = "./assets/img/windDe_on_1.png";
					}
					if(data.wind_swing_lr == 'off'){
						this.productList_in[1].icon = "./assets/img/windDe_2.png";
					}else{
						this.productList_in[1].icon = "./assets/img/windDe_on_2.png";
					}
					if(data.ptc == 'off'){
						this.productList_in[2].icon = "./assets/img/elecHeat.png";
					}else{
						this.productList_in[2].icon = "./assets/img/elecHeat_on.png";
					}
					// if(data.eco == 'off'){
					// 	this.productList_[2].icon = "./assets/img/ECO.png";
					// }else{
					// 	this.productList_[2].icon = "./assets/img/ECO_on.png";
					// }
				}else{
					this.defaultData(data);
					this.switchMode(data.mode,'off');
					if(data.power_on_timer == 'on'){
						// let time = Math.round(parseInt(data.power_on_time_value)/60);
						let time = parseInt(data.power_on_time_value), time2 = time/60;
						if(!Number.isInteger(time2)){
							time2 = Number.parseFloat(time2.toFixed(1));
						}
						// if(time >= 60){
						// 	time = time2+'小时';
						// }else{
						// 	time = time+'分钟';
						// }
						this.timeValue = time2;
						this.productList[3].data = time2+'h';
						this.productList[3].name = time2+'小时开';
						this.fixed_time = `将于${time2}小时后开机`;
						this.productList[3].id = time;
						this.timeBgcolor = "#3191FD";
						this.timecolor = "#ffffff";
						this.timeIndex = this.timeList.indexOf(time);
						this.switchFlag = true;
					}else{
						this.productList[3].data = 'off';
						this.productList[3].name = '定时开';
						this.fixed_time = '定时开：关';
						this.productList[3].id = 0;
						this.timeIndex = -1;
						this.switchFlag = false;
						this.timeBgcolor = "#ffffff";
					}
					// this.productList[3].name = '定时开';
					this.timeText = '定时开机';
				}
			}else{
				// this.isshowclose();
				this.defaultData(data);
				this.fixed_time = `定时开：关`;
				this.timeBgcolor = "#ffffff";
				this.timecolor = "#666666";
				this.productList[3].data = 'off';
				this.productList[1].icon = './assets/img/model_off_1.png';
				
			}
		},
		netWorkGet(str){
			network.getType({
				success: function (data) {
					if(data.type === 'none'){
						prompt.showToast({
							message: str + "，请检查网络",
							duration:1
						}) 
					}else{
						prompt.showToast({
							message: str,
							duration:1
						}) 
					}
				}
			})
		},
		defaultData(data){
			this.isopen = false;
			this.value = '--';
			this.humidity = '--';
			this.indoor = '--';
			this.productList[1].icon = './assets/img/model_off_1.png';
			this.productList[2].data = '--';
			this.productList[3].name = '定时开';
			this.productList_in[0].icon = './assets/img/windDe_off_1.png';
			this.productList_in[1].icon = './assets/img/windDe_off_2.png';
			this.productList_in[2].icon = './assets/img/elecHeat_off.png';
			this.windBgcolor = '#ffffff';
			this.windcolor = '#666666';
		},
		switchMode(mode,status){
			switch (mode){
				case 'auto':
					this.productList[1].icon = `./assets/img/model_${status}_1.png`;
					this.productList[1].name = '模式|自动'
					this.productList[1].id = 0;
					break;
				case 'cool':
					this.productList[1].icon = `./assets/img/model_${status}_2.png`;
					this.productList[1].name = '模式|制冷'
					this.productList[1].id = 1;
					break;
				case 'heat':
					this.productList[1].icon = `./assets/img/model_${status}_3.png`;
					this.productList[1].name = '模式|制热'
					this.productList[1].id = 2;
					break;
				case 'fan':
					this.productList[1].icon = `./assets/img/model_${status}_4.png`;
					this.productList[1].name = '模式|送风'
					this.productList[1].id = 3;
					break;
				case 'dry':
					this.productList[1].icon = `./assets/img/model_${status}_5.png`;
					this.productList[1].name = '模式|抽湿'
					this.productList[1].id = 4;
					break;
				default:
					break;
			}
		},
		windTypeSelect(index){
			this.windTypeIndex = index;
			this.tabContentShow = index;
			if(index == 1){
				this.params = {
					wind_speed: 102
				}
			}else{
				this.params = {
					wind_speed: this.baseData.wind_speed
				}
			}
		},
		windSelect(index){
			this.windIndex = index;
		},
		windCancel(){
			this.closeFun();
		},
		windSure(evt){
			if(this.windTypeIndex === 0){
				this.params = {
					wind_speed: this.windIndex + 1
				}
			}
			// if(evt.detail.data == '自动风'){
			// 	this.dataLists.wind_speed = 102;
			// }else{
			// 	this.dataLists.wind_speed = parseInt(evt.detail.data);
			// }
			let status = this.dataLists;
			delete status.wind_speed;
            this.postDeviceControl(this.params,status);
            this.closeFun();
		},
		setTimeCancel(evt){
			this.closeFun();
		},
		setTimeSure(evt){
			let that = this;
			let status = that.dataLists;
			if(this.isopen){
				if(evt.detail.flag){
					this.params = {
						power_off_timer: 'on',
						power_off_time_value: parseInt(evt.detail.data)*60
					}
				}else{
					this.params = {
						power_off_timer: 'off',
						power_off_time_value: 0
					}
				}
				delete status.power_off_timer;
				delete status.power_off_time_value;
			}else{
				if(evt.detail.flag){
					this.params = {
						power_on_timer: 'on',
						power_on_time_value: parseInt(evt.detail.data)*60
					}
				}else{
					this.params = {
						power_on_timer: 'off',
						power_on_time_value: 0
					}
				}
				delete status.power_on_timer;
				delete status.power_on_time_value;
			}
			
            this.postDeviceControl(this.params,status);
            this.closeFun();
		},
		isshowclose(){
			let that = this;
			if(that.timeTips != ''){
				that.istips = false;
				clearTimeout(that.timeTips)
			}
			that.istips = true;
			that.timeTips = setTimeout(() => {
				that.istips = false;
			},3000)
		},
		refreshData(e){
			let that = this;
			that.isRefreshing = e.refreshing;
			let timestamp = Date.parse(new Date());
			if(that.isfirst){
				that.isshowLoading = true;
				storage.get({
					key: 'openidToken',
					success: function (data) {
						// prompt.showToast({message:"data"+JSON.stringify(data)})
						if(data === ''){
							that.getdevicelist();
						}else{
							let obj = JSON.parse(data);
							if(parseInt(timestamp) > parseInt(obj.time)){
								that.getdevicelist();
							}else{
								if(obj.openid === that.openid){
									that.openId = obj.openid;
									that.accessToken = obj.accessToken;
									if(!that.isLanInit){
										that.LanOnlineGet();
									}
									that.getDeviceStatus();
								}else{
									that.getdevicelist();
								}
							}
						}
						console.log('handling success')
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			}
			
        },
		gettime(){
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		//websocket
		webSocketdata() {
					let that = this;
					api.createWensocket(that.deviceId).then((ws) => {
						that.ws = ws;
						that.isws = true;
						ws.onopen = function() {
							console.log("websocket连接成功")
						}
						ws.onerror = function(data) {
							// 连接失败
							//失败之后再重启
							that.webSocketdata();
							console.log('websocket连接失败');
						}
						ws.onmessage = function(res) {
// 							prompt.showDialog({
// 								title: 'websocket',
// 								message: "websocket："+ JSON.stringify(res),
// 								buttons: [{
// 									text: '确定',
// 									color: '#33dd44'
// 								}],
// 								success: function (data) {
// 								},
// 								cancel: function () {
// 									console.log('handling cancel')
// 								},
// 								fail: function (data, code) {
// 									console.log(`handling fail, code = ${code}`)
// 								}
// 							})
							let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
							let objdata = {};
							if(obj.status.online){
								objdata.online = obj.status.online;
								that.online = obj.status.online;
							}else{
								objdata.online = "true";
								that.online = "true";
							}
							if(obj.status.power){
								objdata.power = obj.status.power;
							}
							if(obj.status.mode){
								objdata.mode = obj.status.mode;
							}
							if(obj.status.wind_speed){
								objdata.wind_speed = obj.status.wind_speed;
							}
							if(obj.status.temperature){
								objdata.temperature = obj.status.temperature;
							}
							if(obj.status.indoor_temperature){
								objdata.indoor_temperature = obj.status.indoor_temperature;
							}
							if(obj.status.power_on_timer){
								objdata.power_on_timer = obj.status.power_on_timer;
							}
							if(obj.status.power_on_time_value){
								objdata.power_on_time_value = obj.status.power_on_time_value;
							}
							if(obj.status.power_off_timer){
								objdata.power_off_timer = obj.status.power_off_timer;
							}
							if(obj.status.power_off_time_value){
								objdata.power_off_time_value = obj.status.power_off_time_value;
							}
							if(obj.status.wind_swing_lr){
								objdata.wind_swing_lr = obj.status.wind_swing_lr;
							}
							if(obj.status.wind_swing_ud){
								objdata.wind_swing_ud = obj.status.wind_swing_ud;
							}
							if(obj.status.ptc){
								objdata.ptc = obj.status.ptc;
							}
						}
						ws.onclose = function() {
							// 关闭 websocket
							// 关闭之后再重启
							if(!that.isclosews){
								that.webSocketdata();
							}
							console.log("websocket连接已关闭...")
						};
					});
				},
		onclickFn(e){
			this.isabout = false;
		},
		closeWebsocket(e){
			let that = this;
			that.isclosews = true;
			if(that.ws != ''){
				that.ws.close({
					code: 1000,
					reason: '退出关闭',
					success: function() {
						that.ws = '';
						console.log("关闭websocket成功")
					},
					fail: function(data, code) {
						console.log("关闭websocke失败, code = "+JSON.stringify(code))
					}
				})
			}
		},
		/**
		 * 局域网初始化
		 */
		LanOnlineGet(){
			let that = this;
			net.deviceInit(that.accessToken,that.deviceId).then((res) => {
				that.isLanInit = true;
			}).catch((error) => {
				that.isLanInit = false;
			});
		},
		onHide(){
			let that = this;
			that.istips = false;
			that.closeWebsocket();
		},
		onShow(){
			let that = this;
			that.isclosews = false;
			if(that.ws === '' && that.isws){
				// that.webSocketdata();
			}
		},
		onBackPress () {
			let that = this;
			that.closeWebsocket();
			router.clear();
			this.$app.exit();
		},
		onInit(){
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			// this.webSocketdata();
			this.deviceHeight = this.$app.options.env.deviceHeight;
			let that = this;
			router.clear();
			that.$page.setTitleBar({ text: '空调' })
			for(let i=1;i<25;i++){
				that.timeList.push(i);
			}
			that.$on('cancel', function(e){
				that.isabout = false;
				// prompt.showToast({message:"shdf" + e})
			})
			that.$on('closetips', function(e){
				that.istips = false;
				// prompt.showToast({message:"shdf" + e})
			})
			that.$on('openmenu', function(e){
				that.isabout = !that.isabout;
			})
			// that.windList.push('自动风');
			for(let i=1;i<101;i++){
				that.windList.push(i);
			}
			// let that = this;
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function (data) {
					// prompt.showToast({message:"data"+JSON.stringify(data)})
					if(data === ''){
						that.getdevicelist();
					}else{
						
						let obj = JSON.parse(data);
						if(parseInt(timestamp) > parseInt(obj.time)){
							that.getdevicelist();
						}else{
							if(obj.openid === that.openid){
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								that.LanOnlineGet();
								that.getDeviceStatus();
							}else{
								that.getdevicelist();
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
		},
		onMenuPress(){
			this.isabout = !this.isabout;
		},
		onCreate () {
			
		},
    }
</script>
