<import name="midea-loading" src="../Component/MideaLoading/index"></import>
<import name="midea-logo" src="../Component/MideaLogo/index"></import>
<import name="midea-time" src="../Component/MideaTime/index"></import>
<import name="midea-wind-speed" src="../Component/MideaWindSpeed/index"></import>
<import name="midea-about" src="../Component/MideaAbout/index"></import>
<import name="midea-tips" src="../Component/MideaTips/index"></import>
<import name="midea-head" src="../Component/MideaHead/index"></import>
<template>
    <div class="container" style="background-color: {{isOpen?'#3191FD':'#ccc'}};">
        <midea-head title="空气净化器" onclose-websocket="closeWebsocket" language="{{language}}" power="{{isOpen?'on':'off'}}"></midea-head>
        <midea-logo isopen="{{isOpen}}"></midea-logo>
		<refresh class="B6_refresh" offset="{{isoffset}}" onrefresh="refreshData" refreshing="{{isRefreshing}}">
			<list onscrollbottom="" onscroll="">
				<list-item type="refresh" class="wrap">
					<div class="pm_box">
						<div>
							<text class="danwei" if="{{!language}}" style="color: {{isOpen?'#fff':dataColor}}">μg/m³</text>
							<text class="value" style="color: {{isOpen?'#fff':dataColor}}">{{value}}</text>
							<text class="danwei" if="{{language}}" style="color: {{isOpen?'#fff':dataColor}}">μg/m³</text>
						</div>
						<text class="pm25" style="color: {{isOpen?'#fff':dataColor}}">pm2.5</text>
					</div>
					<div class="box">
						<div class="div">
							<text class="air_alue" style="color: {{isOpen?'#fff':dataColor}}">{{airValue}}</text>
							<text style="color: {{isOpen?'#fff':dataColor}}">室内空气</text>
						</div>
						<div class="line" style="background-color: {{isOpen?'rgba(255,255,255,0.3)':'rgba(0,0,0,0.3)'}}"></div>
						<div class="div">
							<text class="odour_value" style="color: {{isOpen?'#fff':dataColor}}">{{odourValue}}</text>
							<text style="color: {{isOpen?'#fff':dataColor}}">异味指数</text>
						</div>
					</div>
					<text class="model" style="color: {{isOpen?'#fff':dataColor}}">模式: {{model}}</text>
					<text class="hours" style="color: {{isOpen?'#fff':dataColor}}">{{time}}</text>
				</list-item>
			</list>
		</refresh>
        <div class="control_box">
            <div class="control1">
                <block for="{{controlList1}}">
                    <div class="{{$item.text=='风速'?'windclass':''}}">
                        <image src="{{$item.value}}" if="{{$item.flagImg}}" style="display:{{$item.text=='风速'?'none':'flex'}}" @click="control($item.id)"></image>
                        <text class="textValue textValue1 {{isOpen?'borderclass':'borderclass2'}}" else @click="control($item.id)" style="display:{{$item.text=='风速'?'none':'flex'}};">{{$item.value}}</text>
                        <text style="display:{{$item.text=='风速'?'none':'flex'}};color: {{isOpen?'#000': $item.id===0?'#000':textColor}}">{{$item.text}}</text>
                    </div>
                </block>
            </div>
            <!-- <div class="control2">
                <block for="{{controlList2}}">
                    <div>
                        <text class="textValue textValue2" @click="control($item.id)" style="background-color:{{isOpen?'#3191FD':'#fff'}}; color:{{isOpen?'#fff':'#666'}}; border:{{isOpen?'1px solid #3191FD':'1px solid #e5e5e5'}}">{{$item.value}}</text>
                        <text style="color: {{isOpen?'#000':textColor}}">{{$item.text}}</text>
                    </div>
                </block>
            </div> -->
        </div>
        <div class="mask" if="{{modelPopShow}}" @click="modelPopClose">
            <div class="model_pop pop_content {{animateClass1}}">
                <div class="content" for="{{modelList}}">
                    <div class="list_cont first_list" @click="modelSelect($idx)" if="{{$idx===0}}">
						<text if="{{!language}}" class="{{claSec[$idx]}}">{{$item.text}}</text>
                        <image src="{{$item.icon}}"></image>
                        <text if="{{language}}" class="{{claSec[$idx]}}">{{$item.text}}</text>
                    </div>
                    <div class="list_cont" @click="modelSelect($idx)" else>
						<text if="{{!language}}" class="{{claSec[$idx]}}">{{$item.text}}</text>
                        <image src="{{$item.icon}}"></image>
                        <text if="{{language}}" class="{{claSec[$idx]}}">{{$item.text}}</text>
                    </div>
                </div>
            </div>
        </div>
        <div class="mask" if="{{windPopShow}}" @click="windPopCancel">
            <div class="wind_pop pop_content_1"  style="top:{{(deviceHeight-700)/2}}px">
                <!-- <div class="mask-container">
                    <div class="wind-model">
                        <text @click="selWindModel(0)" style="color: {{selwindM===0?'#3191FD':'#ccc'}}; font-size:{{selwindM===$idx?'72px':'60px'}}">手动</text>
                        <text @click="selWindModel(1)" style="color: {{selwindM===1?'#3191FD':'#ccc'}}; font-size:{{selwindM===$idx?'72px':'60px'}}">自动</text>
                    </div>
                    <list class="box" id="wlist">
                        <block for="windlist">
                            <list-item type="number" @click="selectedWind($item,$idx)">
                                <text style="color: {{selwind===$idx?'#3191FD':'#ccc'}}; font-size:{{selwind===$idx?'72px':'60px'}}">{{$item}}</text>
                            </list-item>
                        </block>
                    </list>
                </div>
                <div class="btn-grounp">
                    <text class="btn btn-cancel" @click="windPopCancel">取消</text>
                    <text class="btn btn-sure" @click="windPopSure">确认</text>
                </div> -->
                <midea-wind-speed language="{{language}}" list-data="{{windList}}" selected-index="{{windIndex}}" hight-color="#3191FD" default-color="#CCCCCC" oncancel-wind="setWindCancel" onsure-wind="setWindSure"></midea-wind-speed>
            </div>
        </div>
        <div class="mask" if="{{timePopShow}}" @click="timePopCancel">
            <div class="time_pop" style="top:{{(deviceHeight-1000)/2}}px">
                <!-- <div class="mask-container">
                    <list class="box" id="list">
                        <block for="timelist">
                            <list-item type="number" @click="selectedTime($item,$idx)">
                                <text style="color: {{selTime===$idx?'#3191FD':'#ccc'}}; font-size:{{selTime===$idx?'72px':'60px'}}">{{$item}}</text>
                            </list-item>
                        </block>
                    </list>
                    <text class="txt">小时后关闭</text>
                </div>
                <div class="btn-grounp">
                    <text class="btn btn-cancel" @click="timePopCancel">取消</text>
                    <text class="btn btn-sure" @click="timePopSure">确认</text>
                </div> -->
                <midea-time language="{{language}}" flag="{{switchFlag}}" hight-color="#3191FD" default-color="#CCCCCC" list-data="{{timeList}}" time-value="{{timeValue}}" selected-index="{{timeIndex}}" text="定时关机" oncancel-evt="setTimeCancel" onsure-evt="setTimeSure"></midea-time>         
            </div>
        </div>
        <midea-loading if="{{isshowLoading}}"></midea-loading>
        <midea-about if="{{isabout}}" oncan-cel="onclickFn" oncan-close="onclickFn"></midea-about>
        <midea-tips if="{{istips}}"></midea-tips>
    </div>
</template>

<style lang="less">
    @import './assets/index.less';
</style>

<script>
    import prompt from '@system.prompt';
    import account from '@service.account';
    import router from '@system.router';
	import storage from '@system.storage';
    // import IOT from '@service.iot';
    import api from '../Common/api/api.js';
    import network from '@system.network';
	import net from '../Common/api/networkAPI.js';
    export default {
        private: {
			isagain:true,
			lanOnline:'false',
			isLanInit:false,
			timeTips:'',
			isoffset:'-1000px',
			isRefreshing:false,
			ws: '',
			isws: false,
			isclosews: false,
			language:true,
			deviceHeight:0,
			istips: false,
			isabout: false,
			isfirst: false,
			online: 'flase',
            isshowLoading: false,
            isOpen: false,
            animateClass1: '',
            animateClass2: '',
            animateClass3: '',
            value: '--',
            airValue: '--',
            odourValue: '--',
            model: '--',
            time: '',
            modelPopShow: false,
            timePopShow: false,
            windPopShow: false,
            dataColor: '#666',
            textColor: '#666',
            controlList1: [
                {
                    value: './assets/img/off.png',
                    text: '开关',
                    id: 0,
                    flagImg: true
                },
                {
                    value: './assets/img/icon11_off.png',
                    text: '手动模式',
                    id: 1,
                    flagImg: true
                },
                {
                    value: 47,
                    text: '风速',
                    id: 2,
                    flagImg: false
                },
                {
                    value: '2h',
                    text: '定时',
                    id: 3,
                    flagImg: false
                }
            ],
            // controlList2: [
            //     {
            //         value: '2h',
            //         text: '定时',
            //         id: 4
            //     }
            // ],
            modelList: [
                {
                    icon: './assets/img/model1_on.png',
                    text: '手动'
                },
                {
                    icon: './assets/img/model2.png',
                    text: '自动'
                }
            ],
            selectedIndex: 2,
            claSec: ['',''],
			DBdata: ["power","mode","power_off_timer","time","pm25","ash_tvoc","smell_tvoc"],
            dataLists: {
                power: '',
                mode: '',
                // anion: '',
                power_off_timer: '',
                time: '',
                // wind_speed: '',
                pm25: '',
                ash_tvoc: '',
                smell_tvoc: '',
                // tvoc: ''
            },
            selTime: 2,
            selwindM: 0,
            selwind: 2,
            selwindValue: 1,
            timeList: [1,2,4,8],
            timeIndex: 1,
            windList: [],
            windIndex: 1,
            switchFlag: false,
            timeValue: 1,
            params: {},
			accessToken: '',
			openId: '',
        },
        public: {
            deviceSeries: '',
			deviceId: '',
			openid: ''
        },
        modelPopClose(){
            this.animateClass1 = 'animate_D1';
            setTimeout(()=>{
                this.modelPopShow = false;
            },400)
        },
        control(index){
			let status = [];
            if(this.online == 'false' || !this.online){
				this.isshowclose();
                // prompt.showToast({message: '设备离线状态'})
            }else{
                if(this.isOpen){
                    switch (index){
                        case 0:
                            this.params = {
                                power: 'off'
                            }
							status = ['power'];
                            break;
                        case 1:
                            this.modelPopShow = true;
                            this.animateClass1 = 'animate_S1';
                            break;
                        case 2:
                            if(this.dataLists.mode == 'manual'){
                                this.windPopShow = true;
                                this.animateClass2 = 'animate_S2';
                                // this.windFormat(0);
                            }else{
                                prompt.showToast({message: '非手动模式下不可设置风速'})
                            }
                            break;
                        case 3:
                            this.timePopShow = true;
                            this.animateClass3 = 'animate_S3';
                            // this.$element('list').scrollTo({index: this.selTime-2});
                            // this.dataLists.time = parseInt(this.timeList[this.selTime])*60;
                            break;
                        case 4:
                            if(this.dataLists.anion == 'off'){
                                this.params = {
                                    anion: 'on'
                                }
                            }else{
                                this.params = {
                                    anion: 'off'
                                }
                            }
							status = ['anion']
                            break;
                        default:
                            break;
                    }
                    if(index === 0){
                        this.postDeviceControl(this.params,status);
                    }
                }else{
                    if(index === 0){
                        this.params = {
                            power: 'on'
                        }
						status = ['power'];
                        this.postDeviceControl(this.params,status);
                    }else{
                        prompt.showToast({message: '设备关机状态'})
                    }
                }
            }
        },
        modelSelect(index){
            switch (index){
                case 0:
                    this.params = {
                        mode: 'manual'
                    }
                    break;
                case 1:
                    this.params = {
                        mode: 'auto'
                    }
                    break;
                case 2:
                    this.params = {
                        mode: 'sleep'
                    }
                    break;
                
                case 3:
                    this.params = {
                        mode: 'fast'
                    }
                    break;
                default:
                    break;
            }
			let status = ['mode'];
            this.postDeviceControl(this.params,status);
            this.animateClass1 = 'animate_D1';
            setTimeout(()=>{
                this.modelPopShow = false;
            },400)
        },
        windPopCancel(){
            // this.windFormat(0);
            this.animateClass2 = 'animate_D2';
            setTimeout(()=>{
                this.windPopShow = false;
            },400)
        },
        timePopCancel(){
            // this.selTime = this.timeIndex;
            this.animateClass3 = 'animate_D3';
            setTimeout(()=>{
                this.timePopShow = false;
            },400)
        },
        //获取第三方登录信息
		getdevicelist(){
            this.isshowLoading = true;
			let that = this;
			account.authorize({
				type: 'code',
				success: function(data) {
                    let params = {
                        thirdUId: data.code,
                    }
                    api.getUserToken(params).then((res) => {
                        let data_accesstoken = res;
                        if (data_accesstoken.code && data_accesstoken.code === 200) {
                            let result_data = (typeof data_accesstoken.data) === "object"? data_accesstoken.data:JSON.parse(data_accesstoken.data);
                            if (parseInt(result_data.code) === 0 && result_data.accessToken) {
                                // prompt.showToast({message:"获取第三方登录信息" + JSON.stringify(res)})
                                that.accessToken = result_data.accessToken;
                                that.openId = result_data.openId;
								let obj = {
									openid: that.openId,
									accessToken: that.accessToken,
									time: that.gettime()
								}
								storage.set({
									key: 'openidToken',
									value: JSON.stringify(obj),
									success: function (data) {
										
									},
									fail: function (data, code) {
										
									}
								})
								that.LanOnlineGet();
                                that.getDeviceStatus();
                            } else {
								that.isRefreshing = false;
								that.isshowLoading = false;
								that.isfirst = true;
								that.netWorkGet(that.getCode(result_data.code,"获取访问令牌失败"))
                                // that.netWorkGet('获取访问令牌失败')
                            }
                        } else {
							that.isRefreshing = false;
							that.isshowLoading = false;
							that.isfirst = true;
                            that.netWorkGet('获取访问令牌失败,请稍后重试')
                        }
                    }).catch((error,code) => {
						console.log("授权接口：error"+error+":::code"+code)
						that.isfirst = true;
						that.isRefreshing = false;
                        that.isshowLoading = false;
                        that.netWorkGet('获取访问令牌失败,请稍后重试')
    					// prompt.showToast({
    					// 	message: "asd"+JSON.stringify(error),
    					// 	duration: 1
    					// })
                    })
				},
				fail: function(data, code) {
					that.isfirst = true;
					that.isRefreshing = false;
				    that.isshowLoading = false;
                    that.netWorkGet('授权失败,请稍后重试')
					// prompt.showToast({
					// 	message: 'authorize:' + code
					// })
				}
			})
		},
		/**
		 * 局域网获取
		 */
		getLanData(res){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			if(parseInt(obj.code) == 0){
				that.isRefreshing = false;
				that.isshowLoading = false;
				that.isfirst = true;
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				let objdata = data;
				objdata.online = "true";
				that.online = "true";
				that.dataFormat(objdata);
			}else{
				that.isagain = false;
				that.lanOnline = "false";
				that.getDeviceStatus();
			}
		},
		/**
		 * 联网获取
		 */
		getdataLan(res){
			let that = this;
			that.isRefreshing = false;
			that.isshowLoading = false;
			that.isfirst = true;
			if(res.code === 200){
				let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
				if(!parseInt(data.code) && !parseInt(data.devices[0].status)){
					let obj = data.devices[0].properties;
					that.online = obj.online;
					if (that.online != 'true') {
						that.isshowclose();
					}
			        that.dataFormat(obj);
				}else{
					if(data.msg === ''){
						let str1 = '';
						if(data.devices[0].status){
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if(str1.toString() === '-100' && res_data.devices[0].description.toString() === '3123'){
								// that.netWorkGet('设备离线')
								that.isshowclose();
							}else{
								that.netWorkGet(api.getStatus("get",str1,'获取设备状态失败'))
							}
							// api.getStatus(str1,'获取设备状态失败')
							// that.netWorkGet(api.getStatus(str1,'获取设备状态失败'))
						}else{
							str1 = data.code;
							that.netWorkGet(api.getCode(str1,'获取设备状态失败'))
						}
						// that.netWorkGet('获取设备状态失败')
					}else{
						that.netWorkGet(data.msg)
					}
			        // that.netWorkGet('获取设备状态失败')
			    }
			}else{
			    that.netWorkGet('获取设备状态失败,请稍后重试')
			}
		},
        //查询状态
		getDeviceStatus(){
            this.isshowLoading = true;
			let that = this;
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: that.DBdata
				}]
			}
			// that.webSocketdata();
			if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
				that.lanOnline = 'true';
			}else{
				that.lanOnline = 'false';
			}
			api.postDeviceStatusQuery(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isagain = true;
				if(res.lanonline){
					that.getdataLan(res);
				}else{
					that.getLanData(res);
				}
			}).catch((error) => {
				if(error.online){
					that.isfirst = true;
					that.netWorkGet('获取设备状态失败,请稍后重试');
					that.isRefreshing = false;
					that.isshowLoading = false;
				}else{
					that.isagain = false;
					that.lanOnline = "false";
					that.getDeviceStatus();
				}
				// prompt.showToast({message: "error:" + JSON.stringify(error),duration:1})
			})
        },
		/**
		 * 局域网控制
		 */
		lanControl(res,obj1,status){
			let that = this;
			let obj = (typeof res) == 'object'?res:JSON.parse(res);
			console.log("局域网："+JSON.stringify(res))
			if(parseInt(obj.code) == 0){
				that.isRefreshing = false;
				that.isshowLoading = false;
				let objdata = {};
				let data = (typeof obj.message) == 'object'?obj.message:JSON.parse(obj.message);
				that.online = "true";
				objdata = data;
				objdata.online = "true";
				that.dataFormat(objdata);
			}else{
				that.isagain = false;
				that.lanOnline = 'false';
				that.postDeviceControl(obj1, status);
			}
		},
		/**
		 * 广域网控制
		 */
		wlanControl(res){
			let that = this;
			if(res.code && res.code == 200){
			    let data = (typeof res.data) === "object"? res.data:JSON.parse(res.data);
			    if(!parseInt(data.devices[0].status) && !parseInt(data.code)){
					let objdata = that.dataLists;
					let isall = false;
					that.online = 'true'
			        let obj = typeof data.devices[0].props === 'object'? data.devices[0].props:JSON.parse(data.devices[0].props);
					if(obj.power){
						objdata.power = obj.power;
					}else{
						isall = true;
					}
					if(obj.mode){
						objdata.mode = obj.mode;
					}else{
						isall = true;
					}
					if(obj.power_off_timer){
						objdata.power_off_timer = obj.power_off_timer;
					}else{
						isall = true;
					}
					if(obj.time){
						objdata.time = obj.time;
					}else{
						isall = true;
					}
					if(obj.pm25){
						objdata.pm25 = obj.pm25;
					}else{
						isall = true;
					}
					if(obj.ash_tvoc){
						objdata.ash_tvoc = obj.ash_tvoc;
					}else{
						isall = true;
					}
					if(obj.smell_tvoc){
						objdata.smell_tvoc = obj.smell_tvoc;
					}else{
						isall = true;
					}
					if(isall){
						that.isshowLoading = true;
						that.getDeviceStatus();
					}else{
						that.isRefreshing = false;
						that.isshowLoading = false;
						that.dataFormat(objdata);
					}
			    }else{
					that.isRefreshing = false;
					that.isshowLoading = false;
					if(data.msg === ''){
						let str1 = '';
						if(data.devices[0].status){
							str1 = data.devices[0].status;
							if(str1.toString() === '-6'){
								that.isshowclose();
								return false;
							}
							if(str1.toString() === '-100' && res_data.devices[0].description.toString() === '3123'){
								that.isshowclose();
							}else{
								that.netWorkGet(api.getStatus("post",str1,'操作设备失败'))
							}
						}else{
							str1 = data.code;
							that.netWorkGet(api.getCode(str1,'操作设备失败'))
						}
					}else{
						that.netWorkGet(data.msg)
					}
			    }
			}else{
				that.isRefreshing = false;
				that.isshowLoading = false;
			    that.netWorkGet('操作设备失败,请稍后重试')
			}
		},
        //设备控制接口
        postDeviceControl(obj,status){
            this.isshowLoading = true;
			let that = this;
			let status_params = that.dataLists;
			for(let i = 0; i < status.length;i++){
				delete status_params[status[i]]
			}
			if(status_params.online){
				delete status_params.online
			}
			let params = {
				openId: that.openId,
				devices: [{
					deviceId: that.deviceId,
					properties: obj,
					status:status_params
				}]
            }
           console.log("$Lanonline:"+JSON.stringify(net.$Lanonline)+"::::::::isagain:"+that.isagain)
           if(net.$Lanonline.deviceid == that.deviceId && net.$Lanonline.isonLan == 'true' && that.isagain){
           	that.lanOnline = 'true';
           }else{
           	that.lanOnline = 'false';
           }
           api.postDeviceControl(params, that.accessToken,that.lanOnline,that.deviceId).then((res) => {
				that.isfirst = true;
				that.isagain = true;
				if(res.lanonline){
					that.wlanControl(res);
				}else{
					that.lanControl(res,obj,status)
				}
			}).catch((error) => {
				if(error.online){
					that.isfirst = true;
					that.isRefreshing = false;
					that.isshowLoading = false;
					that.netWorkGet('操作设备失败,请稍后重试')
				}else{
					that.isagain = false;
					that.lanOnline = 'false';
					that.postDeviceControl(obj, status);
				}
				
				// prompt.showToast({message: JSON.stringify(error),duration:1})
			})
		},
		initData(){
			this.dataLists = {
				power: '',
				mode: '',
				// anion: '',
				power_off_timer: '',
				time: '',
				// wind_speed: '',
				pm25: '',
				ash_tvoc: '',
				smell_tvoc: '',
				// tvoc: ''
			}
			this.dataFormat(this.dataLists);
		},
        //接口成功数据处理
        dataFormat(data){
			this.isRefreshing = false;
            this.isshowLoading = false;
            let tvoc = ['好','好-','中','中-','差+','差','--'];
            this.dataLists = data;
            for(let i=0, len=this.claSec.length; i<len; i++){
                this.modelList[i].icon = './assets/img/model'+(i+1)+'.png';
                this.claSec[i] = '';
            }
            switch (data.mode){
                case 'manual':
                    this.model = '手动模式';
                    this.controlList1[1].text = '手动模式';
                    if(data.power == 'off'){
                        this.controlList1[1].value = './assets/img/icon11_off.png';
                    }else{
                        this.controlList1[1].value = './assets/img/icon11_on.png';
                        this.modelList[0].icon = './assets/img/model1_on.png';
                        this.claSec[0] = 'selected';
                    }
                    break;
                case 'auto':
                    this.model = '自动模式';
                    this.controlList1[1].text = '自动模式';
                    if(data.power == 'off'){
                        this.controlList1[1].value = './assets/img/icon12_off.png';
                    }else{
                        this.controlList1[1].value = './assets/img/icon12_on.png';
                        this.modelList[1].icon = './assets/img/model2_on.png';
                        this.claSec[1] = 'selected';
                    }
                    break;
                // case 'sleep':
                //     this.model = '睡眠模式';
                //     this.controlList1[1].text = '睡眠模式';
                //     if(data.power == 'off'){
                //         this.controlList1[1].value = './assets/img/icon13_off.png';
                //     }else{
                //         this.controlList1[1].value = './assets/img/icon13_on.png';
                //         this.modelList[2].icon = './assets/img/model3_on.png';
                //         this.claSec[2] = 'selected';
                //     }
                //     break;
                // case 'fast':
                //     this.model = '急速模式';
                //     this.controlList1[1].text = '急速模式';
                //     if(data.power == 'off'){
                //         this.controlList1[1].value = './assets/img/icon14_off.png';
                //     }else{
                //         this.controlList1[1].value = './assets/img/icon14_on.png';
                //         this.modelList[3].icon = './assets/img/model4_on.png';
                //         this.claSec[3] = 'selected';
                //     }
                //     break;
                default:
                    break;
            }
            this.windIndex = this.windList.indexOf(parseInt(data.wind_speed));
            let time = parseInt(data.time), time2 = time/60;
            if(!Number.isInteger(time2)){
                time2 = Number.parseFloat(time2.toFixed(1));
            }
            // if(time >= 60){
            //     time = time2+'小时';
            // }else{
            //     time = time+'分钟';
            // }
            this.timeValue = time2;
            if(data.power_off_timer == 'on'){
                this.controlList1[3].value = `${time2}h`;
            }else{
                this.controlList1[3].value = '关';
            }
            if(this.online == 'false' || !this.online){
				// this.isshowclose();
                this.isOpen = false;
                this.value = '--';
                this.airValue = '--';
                this.odourValue = '--';
                this.model = '--';
                this.time = '定时：--';
                this.controlList1[2].value = '--';
            }else{
                if(data.power == 'off'){
                    this.isOpen = false;
                    this.value = '--';
                    this.airValue = '--';
                    this.odourValue = '--';
                    this.model = '--';
                    this.time = '定时：--';
                    this.controlList1[2].value = '--';
                }else{
                    this.isOpen = true;
                    this.airValue = tvoc[data.ash_tvoc];
                    this.odourValue = tvoc[data.smell_tvoc];
                    this.controlList1[2].value = data.wind_speed;
                    this.selwindValue = parseInt(data.wind_speed);
                    if(parseInt(data.pm25)>0 && parseInt(data.pm25)<999){
                        this.value = data.pm25;
                    }else{
                        this.value = '--';
                    }
                    if(data.power_off_timer == 'on'){
                        this.timeIndex = this.timeList.indexOf(time);
                        // if(this.timeList.indexOf(time)>=0){
                        //     this.timeIndex = this.timeList.indexOf(time);
                        //     // this.selTime = this.timeIndex;
                        // }
                        this.time = `将于${time2}小时后关闭`;
                        this.switchFlag = true;
                    }else{
                        this.timeIndex = 0;
                        this.time = '定时：关';
                        this.switchFlag = false;
                    }
                }
            }
//             prompt.showDialog({
//                 title: '获取设备状态',
//                 message: "获取设备状态" + JSON.stringify(data),
//                 buttons: [{
//                     text: '确定',
//                     color: '#33dd44'
//                 }],
//                 success: function (data) {
//                     
//                 },
//                 cancel: function () {
//                     console.log('handling cancel')
//                 },
//                 fail: function (data, code) {
//                     console.log(`handling fail, code = ${code}`)
//                 }
//             })
        },
        netWorkGet(str){
			network.getType({
				success: function (data) {
					if(data.type === 'none'){
						prompt.showToast({
							message: str + "，请检查网络",
							duration:1
						}) 
					}else{
						prompt.showToast({
							message: str,
							duration:1
						}) 
					}
				}
			})
		},
        setTimeSure(evt){
            if(evt.detail.flag){
                this.params = {
                    power_off_timer: 'on',
                    time: parseInt(evt.detail.data)*60
                }
            }else{
                this.params = {
                    power_off_timer: 'off',
                    time: 0
                }
            }
			let status = ['power_off_timer','time'];
            this.postDeviceControl(this.params,status);
            this.animateClass3 = 'animate_D3';
            setTimeout(()=>{
                this.timePopShow = false;
            },400)
        },
        setTimeCancel(evt){
            this.timePopCancel();
        },
        setWindSure(evt){
            this.params = {
                wind_speed: evt.detail.data
            }
			let status = ['wind_speed'];            
            this.postDeviceControl(this.params,status);
            this.animateClass2 = 'animate_D2';
            setTimeout(()=>{
                this.windPopShow = false;
            },400)
        },
        setWindCancel(evt){
            this.windPopCancel();
        },
        refreshData(e){
			let that = this;
			let timestamp = Date.parse(new Date());
			that.isRefreshing = e.refreshing;
			if(that.isfirst){
				storage.get({
					key: 'openidToken',
					success: function (data) {
						that.isshowLoading = true;
						// prompt.showToast({message:"data"+JSON.stringify(data)})
						if(data === ''){
							that.getdevicelist();
						}else{
							let obj = JSON.parse(data);
							if(parseInt(timestamp) > parseInt(obj.time)){
								that.getdevicelist();
							}else{
								if(obj.openid === that.openid){
									that.openId = obj.openid;
									that.accessToken = obj.accessToken;
									if(!that.isLanInit){
										that.LanOnlineGet();
									}
									that.getDeviceStatus();
								}else{
									that.getdevicelist();
								}
							}
						}
						console.log('handling success')
					},
					fail: function (data, code) {
						console.log(`handling fail, code = ${code}`)
					}
				})
			}
        },
		gettime(){
			let timestamp = Date.parse(new Date());
			return parseInt(timestamp) + 3600000;
		},
		webSocketdata() {
			let that = this;
			api.createWensocket(that.deviceId).then((ws) => {
				that.ws = ws;
				that.isws = true;
				ws.onopen = function() {
				console.log("websocket连接成功")
			}
			ws.onerror = function(data) {
				// 连接失败
				//失败之后再重启
				that.webSocketdata();
				console.log('websocket连接失败');
			}
								ws.onmessage = function(res) {
// 									prompt.showDialog({
// 										title: 'websocket',
// 										message: "websocket："+ JSON.stringify(res),
// 										buttons: [{
// 											text: '确定',
// 											color: '#33dd44'
// 										}],
// 										success: function (data) {
// 										},
// 										cancel: function () {
// 											console.log('handling cancel')
// 										},
// 										fail: function (data, code) {
// 											console.log(`handling fail, code = ${code}`)
// 										}
// 									})
									let obj = typeof res.data === 'object' ? res.data : JSON.parse(res.data);
						            let objdata = that.dataLists;
                                    if(obj.status.online){
                                    	that.online = obj.status.online;
										objdata.online = obj.status.online;
                                    }else{
                                    	that.online = 'true';
										objdata.online = "true";
                                    }
									if(obj.status.power){
                                        objdata.power = obj.status.power;
                                    }
                                    if(obj.status.mode){
                                        objdata.mode = obj.status.mode;
                                    }
                                    if(obj.status.power_off_timer){
                                        objdata.power_off_timer = obj.status.power_off_timer;
                                    }
                                    if(obj.status.time){
                                        objdata.time = obj.status.time;
                                    }
                                    if(obj.status.pm25){
                                        objdata.pm25 = obj.status.pm25;
                                    }
                                    if(obj.status.ash_tvoc){
                                        objdata.ash_tvoc = obj.status.ash_tvoc;
                                    }
                                    if(obj.status.smell_tvoc){
                                        objdata.smell_tvoc = obj.status.smell_tvoc;
                                    }
							        that.dataFormat(objdata);
                                }
								ws.onclose = function() {
									// 关闭 websocket
									// 关闭之后再重启
									if(!that.isclosews){
										that.webSocketdata();
									}
									console.log("websocket连接已关闭...")
								};
							});
						},
		onclickFn(e){
			this.isabout = false;
		},
		closeWebsocket(e){
			let that = this;
			that.isclosews = true;
			if(that.ws != ''){
				that.ws.close({
					code: 1000,
					reason: '退出关闭',
					success: function() {
						that.ws = '';
						console.log("关闭websocket成功")
					},
					fail: function(data, code) {
						console.log("关闭websocke失败, code = "+JSON.stringify(code))
					}
				})
			}
		},
		/**
		 * 局域网初始化
		 */
		LanOnlineGet(){
			let that = this;
			net.deviceInit(that.accessToken,that.deviceId).then((res) => {
				that.isLanInit = true;
			}).catch((error) => {
				that.isLanInit = false;
			});
		},
		onHide(){
			let that = this;
			that.istips = false;
			that.closeWebsocket();
		},
		onShow(){
			let that = this;
			that.isclosews = false;
			if(that.ws === '' && that.isws){
				// that.webSocketdata();
			}
		},
        onInit(){
			api.getlanguage().then((res) => {
				if(res === 'ug'){
					this.language = false;
				}else{
					this.language = true;
				}
			})
			let that = this;
			this.deviceHeight = this.$app.options.env.deviceHeight;
			router.clear();
            this.$page.setTitleBar({text: '空气净化器'});
            for(let i=100; i>0; i--){
                this.windList.push(i);
            }
			that.$on('cancel', function(e){
				that.isabout = false;
			})
			that.$on('closetips', function(e){
				that.istips = false;
			})
			that.$on('openmenu', function(e){
				that.isabout = !that.isabout;
			})
			let timestamp = Date.parse(new Date());
			storage.get({
				key: 'openidToken',
				success: function (data) {
					// prompt.showToast({message:"data"+JSON.stringify(data)})
					if(data === ''){
						that.getdevicelist();
					}else{
						let obj = JSON.parse(data);
						if(parseInt(timestamp) > parseInt(obj.time)){
							that.getdevicelist();
						}else{
							if(obj.openid === that.openid){
								that.openId = obj.openid;
								that.accessToken = obj.accessToken;
								that.LanOnlineGet();
								that.getDeviceStatus();
							}else{
								that.getdevicelist();
							}
						}
					}
					console.log('handling success')
				},
				fail: function (data, code) {
					console.log(`handling fail, code = ${code}`)
				}
			})
            // this.getdevicelist();
        },
		isshowclose(){
			let that = this;
			that.istips = true;
			if(that.timeTips != ''){
				clearTimeout(that.timeTips)
			}
			that.istips = true;
			that.timeTips = setTimeout(() => {
				that.istips = false;
			},3000)
		},
		onMenuPress(){
			this.isabout = !this.isabout;
		},
        onBackPress(){
			let that = this;
			that.closeWebsocket();
			router.clear();
			this.$app.exit();
		}
    }
</script>